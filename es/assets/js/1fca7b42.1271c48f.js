"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[8275],{63244:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>t,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"quick-starts/database/hasura/README","title":"A\xf1ade autenticaci\xf3n a tu aplicaci\xf3n Hasura","description":"Hasura es una herramienta que puede proporcionar r\xe1pidamente APIs GraphQL y REST que se ajusten a tus datos. Considerando la seguridad de los datos, Hasura tambi\xe9n ofrece la capacidad de ajustar finamente el control de acceso para cada API diferente.","source":"@site/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/database/hasura/README.mdx","sourceDirName":"quick-starts/database/hasura","slug":"/quick-starts/hasura","permalink":"/es/quick-starts/hasura","draft":false,"unlisted":false,"editUrl":"https://github.com/logto-io/docs/tree/master/i18n/es/docusaurus-plugin-content-docs/current/quick-starts/database/hasura/README.mdx","tags":[],"version":"current","frontMatter":{"slug":"/quick-starts/hasura","sidebar_label":"Hasura","sidebar_custom_props":{"description":"Integra Logto con Hasura."}},"sidebar":"quickStartSidebar","previous":{"title":"Web tradicional","permalink":"/es/quick-starts/traditional-web"},"next":{"title":"Supabase","permalink":"/es/quick-starts/supabase"}}');var o=s(25105),n=s(79621);const i={slug:"/quick-starts/hasura",sidebar_label:"Hasura",sidebar_custom_props:{description:"Integra Logto con Hasura."}},c="A\xf1ade autenticaci\xf3n a tu aplicaci\xf3n Hasura",t={},d=[{value:"Antecedentes",id:"background",level:2},{value:"Empezar",id:"get-started",level:2},{value:"1. Crear recurso de API de Hasura en Logto",id:"1-create-hasura-api-resource-in-logto",level:3},{value:"2. Crear roles seg\xfan la configuraci\xf3n de Hasura en Logto",id:"2-create-roles-according-to-hasura-setup-in-logto",level:3},{value:"3. Configurar la variable de entorno de Hasura <code>HASURA_GRAPHQL_JWT_SECRET</code> para habilitar el modo JWT",id:"3-configure-hasura-environment-variable-hasura_graphql_jwt_secret-to-enable-jwt-mode",level:3},{value:"4. Personalizar reclamos adicionales del token de acceso del usuario",id:"4-customize-user-access-token-extra-claims",level:3},{value:"5. Integrar Logto SDK",id:"5-integrate-logto-sdk",level:3},{value:"Conclusi\xf3n",id:"conclusion",level:2}];function l(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.header,{children:(0,o.jsx)(a.h1,{id:"a\xf1ade-autenticaci\xf3n-a-tu-aplicaci\xf3n-hasura",children:"A\xf1ade autenticaci\xf3n a tu aplicaci\xf3n Hasura"})}),"\n",(0,o.jsxs)(a.p,{children:[(0,o.jsx)(a.a,{href:"https://hasura.io/",children:"Hasura"})," es una herramienta que puede proporcionar r\xe1pidamente APIs GraphQL y REST que se ajusten a tus datos. Considerando la seguridad de los datos, Hasura tambi\xe9n ofrece la capacidad de ajustar finamente el control de acceso para cada API diferente."]}),"\n",(0,o.jsx)(a.p,{children:"Usualmente, los usuarios de Hasura utilizan otros servicios de gesti\xf3n de identidad y autenticaci\xf3n, siendo Logto uno muy popular entre ellos."}),"\n",(0,o.jsx)(a.p,{children:"En esta publicaci\xf3n del blog, asumiremos que ya est\xe1s utilizando servicios de Hasura. Introduciremos c\xf3mo integrar Hasura y Logto para maximizar la seguridad de tus datos. Si no tienes una cuenta de Logto, reg\xedstrate y comienza a usarla ahora."}),"\n",(0,o.jsx)(a.h2,{id:"background",children:"Antecedentes"}),"\n",(0,o.jsxs)(a.p,{children:["Hasura emplea ",(0,o.jsx)(a.a,{href:"https://hasura.io/docs/latest/auth/overview/",children:"gesti\xf3n de acceso basada en roles"}),", mientras que Logto utiliza el est\xe1ndar ",(0,o.jsx)(a.a,{href:"/authorization/role-based-access-control",children:"Control de acceso basado en roles (RBAC)"}),"."]}),"\n",(0,o.jsxs)(a.p,{children:["En el modelo de Logto y las mejores pr\xe1cticas para RBAC, aconsejamos a los usuarios usar ",(0,o.jsx)(a.code,{children:"alcance"})," para corresponder a la granularidad m\xe1s fina de permisos, usar ",(0,o.jsx)(a.code,{children:"rol"})," como un conjunto de ",(0,o.jsx)(a.code,{children:"alcances"})," para operaciones por lotes convenientes, y finalmente verificar el ",(0,o.jsx)(a.code,{children:"alcance"})," (usualmente del lado de los proveedores de recursos) para verificar si un usuario puede realizar una operaci\xf3n espec\xedfica."]}),"\n",(0,o.jsxs)(a.p,{children:["En Hasura, un ",(0,o.jsx)(a.code,{children:"rol"})," corresponde a la granularidad m\xe1s fina de permisos, y las verificaciones de permisos se realizan contra los ",(0,o.jsx)(a.code,{children:"roles"}),". Por lo tanto, durante la configuraci\xf3n de Logto, recomendamos mapear un ",(0,o.jsx)(a.code,{children:"rol"})," a exactamente un ",(0,o.jsx)(a.code,{children:"alcance"}),". Este enfoque puede vincular los permisos de Logto y Hasura para evitar confusiones y mal uso."]}),"\n",(0,o.jsxs)(a.p,{children:["Hasura puede soportar el control de acceso usando Webhooks o JWT. Nuestra ",(0,o.jsx)(a.a,{href:"https://blog.logto.io/logto-x-hasura",children:"publicaci\xf3n anterior del blog"})," introdujo c\xf3mo usar Webhooks, y en las siguientes secciones, explicaremos c\xf3mo utilizar el control de acceso en modo JWT de Hasura."]}),"\n",(0,o.jsx)(a.h2,{id:"get-started",children:"Empezar"}),"\n",(0,o.jsxs)(a.p,{children:["Comencemos con un ejemplo simple. Supongamos que un usuario ya tiene dos APIs en Hasura, ",(0,o.jsx)(a.code,{children:"GET /user"})," y ",(0,o.jsx)(a.code,{children:"PATCH /user"}),", que corresponden a dos roles: ",(0,o.jsx)(a.code,{children:"user:reader"})," y ",(0,o.jsx)(a.code,{children:"user:maintainer"}),", respectivamente."]}),"\n",(0,o.jsx)(a.h3,{id:"1-create-hasura-api-resource-in-logto",children:"1. Crear recurso de API de Hasura en Logto"}),"\n",(0,o.jsx)(a.p,{children:"Crea un recurso de API de Hasura en Logto."}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.img,{alt:"Hasura API",src:s(12832).A+"",width:"1286",height:"776"})}),"\n",(0,o.jsx)(a.h3,{id:"2-create-roles-according-to-hasura-setup-in-logto",children:"2. Crear roles seg\xfan la configuraci\xf3n de Hasura en Logto"}),"\n",(0,o.jsxs)(a.p,{children:["Necesitamos crear dos ",(0,o.jsx)(a.code,{children:"alcances"})," para el recurso de API de Hasura mencionado en el paso 1, a saber, ",(0,o.jsx)(a.code,{children:"read:user"})," y ",(0,o.jsx)(a.code,{children:"maintain:user"}),", y luego crear dos roles: ",(0,o.jsx)(a.code,{children:"user:reader"})," (que contiene el alcance ",(0,o.jsx)(a.code,{children:"read:user"}),") y ",(0,o.jsx)(a.code,{children:"user:maintainer"})," (que incluye el alcance ",(0,o.jsx)(a.code,{children:"maintain:user"}),") para corresponder uno a uno con los roles de Hasura. Y asignar estos roles a los usuarios de Logto seg\xfan sea necesario."]}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.img,{alt:"Hasura API with scopes",src:s(14947).A+"",width:"2642",height:"836"})}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.img,{alt:"User reader role",src:s(46703).A+"",width:"2648",height:"740"})}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.img,{alt:"User maintainer role",src:s(48384).A+"",width:"2652",height:"736"})}),"\n",(0,o.jsxs)(a.h3,{id:"3-configure-hasura-environment-variable-hasura_graphql_jwt_secret-to-enable-jwt-mode",children:["3. Configurar la variable de entorno de Hasura ",(0,o.jsx)(a.code,{children:"HASURA_GRAPHQL_JWT_SECRET"})," para habilitar el modo JWT"]}),"\n",(0,o.jsxs)(a.p,{children:["Al revisar las ",(0,o.jsx)(a.a,{href:"https://hasura.io/docs/latest/auth/authentication/jwt/#hasura-jwt-configuration-options",children:"opciones de configuraci\xf3n de JWT de Hasura"}),", necesitamos agregar y configurar la variable de entorno ",(0,o.jsx)(a.code,{children:"HASURA_GRAPHQL_JWT_SECRET"})," antes de poder usar JWT para el control de acceso."]}),"\n",(0,o.jsxs)(a.p,{children:["Hay muchas opciones diferentes que se pueden configurar, pero aqu\xed introducimos el caso m\xe1s simple: solo se necesita configurar el ",(0,o.jsx)(a.code,{children:"jwk_url"}),". Este valor se puede obtener desde el endpoint de configuraci\xf3n de OpenID de tu Logto (",(0,o.jsx)(a.a,{href:"https://your.logto.domain/oidc/.well-known/openid-configuration",children:"https://your.logto.domain/oidc/.well-known/openid-configuration"}),")."]}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.img,{alt:"Hasura JWT config",src:s(85642).A+"",width:"1064",height:"788"})}),"\n",(0,o.jsx)(a.h3,{id:"4-customize-user-access-token-extra-claims",children:"4. Personalizar reclamos adicionales del token de acceso del usuario"}),"\n",(0,o.jsx)(a.p,{children:"Usando la funci\xf3n de reclamos personalizados del token de Logto, personaliza la l\xf3gica para agregar reclamos adicionales al token de acceso del usuario."}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.img,{alt:"User access token script",src:s(96663).A+"",width:"2656",height:"1526"})}),"\n",(0,o.jsxs)(a.p,{children:["Personaliza el m\xe9todo ",(0,o.jsx)(a.code,{children:"getCustomJwtClaims"})," para agregar datos en el JWT de los que Hasura depende para implementar el control de acceso. Esto puede incluir datos relacionados con el usuario que est\xe1 siendo autorizado durante esa instancia, incluidos los ",(0,o.jsx)(a.code,{children:"roles"})," que poseen, los cuales pueden ser accedidos a trav\xe9s de ",(0,o.jsx)(a.code,{children:"context"}),"."]}),"\n",(0,o.jsxs)(a.p,{children:["Tambi\xe9n hemos definido una variable de entorno ",(0,o.jsx)(a.code,{children:"USER_DEFAULT_ROLE_NAMES"})," para evitar codificaci\xf3n fija."]}),"\n",(0,o.jsx)(a.h3,{id:"5-integrate-logto-sdk",children:"5. Integrar Logto SDK"}),"\n",(0,o.jsx)(a.p,{children:"Despu\xe9s de configurar Logto y Hasura, integra tu aplicaci\xf3n con el Logto SDK. Aqu\xed usamos un ejemplo de React para previsualizar el token de acceso del usuario emitido por Logto despu\xe9s del inicio de sesi\xf3n del usuario."}),"\n",(0,o.jsx)(a.p,{children:(0,o.jsx)(a.img,{alt:"User with roles",src:s(37939).A+"",width:"2656",height:"912"})}),"\n",(0,o.jsxs)(a.p,{children:["Primero, asignamos los roles ",(0,o.jsx)(a.code,{children:"user:reader"})," y ",(0,o.jsx)(a.code,{children:"user:maintainer"})," previamente creados al usuario, y luego iniciamos sesi\xf3n como ese usuario."]}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-tsx",children:"const config: LogtoConfig = {\n  endpoint: 'http://localhost:3001',\n  appId: '<your-application-id>',\n  appSecret: '<your-application-secret>',\n  scopes: [\n    ...// existing scopes\n    'read:user',\n    'maintain:user',\n  ],\n  resources: [\n    ...// existing resources\n    'https://*.hasura.app/api',\n  ],\n};\n"})}),"\n",(0,o.jsx)(a.p,{children:"Obt\xe9n el token de acceso del usuario y solicita las APIs de Hasura:"}),"\n",(0,o.jsx)(a.pre,{children:(0,o.jsx)(a.code,{className:"language-tsx",children:"const accessToken = await logto.getAccessToken('https://*.hasura.app/api');\n\n// Antes de enviar la solicitud a Hasura\nrequest.headers.set('Authorization', `Bearer ${accessToken}`);\nrequest.headers.set('x-Hasura-Role', '<required-role-for-the-endpoint>');\n"})}),"\n",(0,o.jsx)(a.h2,{id:"conclusion",children:"Conclusi\xf3n"}),"\n",(0,o.jsx)(a.p,{children:"En este art\xedculo, proporcionamos otro m\xe9todo de control de acceso basado en JWT soportado por Hasura, adem\xe1s de Webhook."}),"\n",(0,o.jsxs)(a.p,{children:["Al comparar los procesos de control de acceso de ",(0,o.jsx)(a.a,{href:"https://hasura.io/docs/latest/auth/authentication/webhook/",children:"Webhook"})," y ",(0,o.jsx)(a.a,{href:"https://hasura.io/docs/latest/auth/authentication/jwt/",children:"JWT"})," de Hasura, podemos ver que el enfoque de Webhook env\xeda un Webhook a Logto y espera una respuesta con cada solicitud de Hasura; mientras que el enfoque basado en JWT puede ser utilizado continuamente hasta que el JWT expire."]}),"\n",(0,o.jsx)(a.p,{children:"El enfoque de JWT puede reducir la carga de la red y eliminar la latencia de red provocada por los Webhooks; mientras tanto, el enfoque de Webhook puede sincronizar cambios en los permisos de usuario en tiempo real."}),"\n",(0,o.jsx)(a.p,{children:"Los usuarios pueden elegir el enfoque apropiado basado en estas conclusiones, combinado con sus necesidades comerciales reales."})]})}function u(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},14947:(e,a,s)=>{s.d(a,{A:()=>r});const r=s.p+"assets/images/hasura-api-with-scopes-ab26b108b1aa93f0225ca8cc55a70c8c.webp"},12832:(e,a,s)=>{s.d(a,{A:()=>r});const r=s.p+"assets/images/hasura-api-f0466211049ca00f0b07f1b913ba58e4.webp"},85642:(e,a,s)=>{s.d(a,{A:()=>r});const r=s.p+"assets/images/hasura-jwt-config-1935efe8a692058171ed131f90921dde.webp"},96663:(e,a,s)=>{s.d(a,{A:()=>r});const r=s.p+"assets/images/user-access-token-script-924dba883452e140764247739744b91d.webp"},48384:(e,a,s)=>{s.d(a,{A:()=>r});const r=s.p+"assets/images/user-maintainer-role-bc2937b4169034c8979712dd1484d864.webp"},46703:(e,a,s)=>{s.d(a,{A:()=>r});const r=s.p+"assets/images/user-reader-role-cc358419b86d766f002b9dda90515555.webp"},37939:(e,a,s)=>{s.d(a,{A:()=>r});const r=s.p+"assets/images/user-with-roles-ceb339a231a4e03f51e23691f45dd790.webp"},79621:(e,a,s)=>{s.d(a,{R:()=>i,x:()=>c});var r=s(58101);const o={},n=r.createContext(o);function i(e){const a=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(n.Provider,{value:a},e.children)}}}]);