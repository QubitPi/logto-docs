"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[71095],{98433:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"logto-oss/develop-your-connector/implement-connectors","title":"Implementar conectores","description":"Ap\xf3s analisar a estrutura de arquivos do conector, vamos discutir a implementa\xe7\xe3o e a ideia principal de desenvolver um conector.","source":"@site/i18n/pt-BR/docusaurus-plugin-content-docs/current/logto-oss/develop-your-connector/implement-connectors.mdx","sourceDirName":"logto-oss/develop-your-connector","slug":"/logto-oss/develop-your-connector/implement-connectors","permalink":"/pt-BR/logto-oss/develop-your-connector/implement-connectors","draft":false,"unlisted":false,"editUrl":"https://github.com/logto-io/docs/tree/master/i18n/pt-BR/docusaurus-plugin-content-docs/current/logto-oss/develop-your-connector/implement-connectors.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Estrutura de arquivos do conector","permalink":"/pt-BR/logto-oss/develop-your-connector/connector-file-structure"},"next":{"title":"Guia passo a passo para desenvolver um conector social","permalink":"/pt-BR/logto-oss/develop-your-connector/step-by-step-guide"}}');var r=n(25105),a=n(79621);const t={sidebar_position:2},c="Implementar conectores",i={},d=[{value:"Construir um conector social",id:"build-a-social-connector",level:2},{value:"getAuthorizationUri",id:"getauthorizationuri",level:3},{value:"getAccessToken",id:"getaccesstoken",level:3},{value:"getUserInfo",id:"getuserinfo",level:3},{value:"Construir um conector sem senha",id:"build-a-passwordless-connector",level:2},{value:"sendMessage",id:"sendmessage",level:3},{value:"O que mais?",id:"whats-more",level:2},{value:"Instalar seus pr\xf3prios conectores",id:"install-your-own-connectors",level:2}];function l(e){const o={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(o.header,{children:(0,r.jsx)(o.h1,{id:"implementar-conectores",children:"Implementar conectores"})}),"\n",(0,r.jsx)(o.p,{children:"Ap\xf3s analisar a estrutura de arquivos do conector, vamos discutir a implementa\xe7\xe3o e a ideia principal de desenvolver um conector."}),"\n",(0,r.jsx)(o.p,{children:"Vamos passar por um exemplo simples para conectores sociais e sem senha, para que voc\xea possa construir seu conector com quase a mesma ideia."}),"\n",(0,r.jsxs)(o.p,{children:["Nesta parte, n\xe3o vamos nos aprofundar nos detalhes de par\xe2metros espec\xedficos (como ",(0,r.jsx)(o.code,{children:"config"}),"), pois n\xe3o \xe9 o objetivo deste guia. Os desenvolvedores que implementam novos conectores devem ler os documentos fornecidos pelos fornecedores de servi\xe7os de terceiros, e esses documentos devem detalhar os par\xe2metros."]}),"\n",(0,r.jsx)(o.h2,{id:"build-a-social-connector",children:"Construir um conector social"}),"\n",(0,r.jsx)(o.p,{children:"Vamos tomar o conector do GitHub como exemplo."}),"\n",(0,r.jsxs)(o.p,{children:["A maioria dos fluxos de autoriza\xe7\xe3o dos conectores sociais obedece ao ",(0,r.jsx)(o.a,{href:"https://openid.net/specs/openid-connect-basic-1_0.html",children:"Fluxo de C\xf3digo de Autoriza\xe7\xe3o OAuth"}),"."]}),"\n",(0,r.jsxs)(o.admonition,{type:"note",children:[(0,r.jsxs)(o.p,{children:["A maioria dos ",(0,r.jsx)(o.em,{children:"conectores sociais"}),", ao obter um perfil de usu\xe1rio com a autentica\xe7\xe3o dos usu\xe1rios finais, segue um esquema de duas etapas (assumindo que todas as etapas sejam bem-sucedidas):"]}),(0,r.jsxs)(o.ol,{children:["\n",(0,r.jsx)(o.li,{children:"Iniciar uma solicita\xe7\xe3o de autentica\xe7\xe3o e obter a autentica\xe7\xe3o do usu\xe1rio."}),"\n",(0,r.jsxs)(o.li,{children:["Buscar ",(0,r.jsx)(o.code,{children:"accessToken"})," usando um ",(0,r.jsx)(o.code,{children:"authCode"})," concedido pelo fornecedor do conector."]}),"\n",(0,r.jsxs)(o.li,{children:["Solicitar um perfil de usu\xe1rio publicamente acess\xedvel usando ",(0,r.jsx)(o.code,{children:"accessToken"}),"."]}),"\n"]})]}),"\n",(0,r.jsx)(o.mermaid,{value:"sequenceDiagram\n\tactor user as Usu\xe1rio final\n\tparticipant logto as Logto\n\tparticipant platform as Plataforma social de terceiros\n\n\tuser ->> logto: Usu\xe1rio inicia login social\n\tlogto ->> platform: Logto redireciona para a plataforma social de terceiros\n\tplatform --\x3e> user: Plataforma social solicita que o usu\xe1rio fa\xe7a login\n\tuser ->> platform: Usu\xe1rio faz login e autoriza o acesso do Logto\n\tplatform --\x3e> logto: Redireciona de volta para o URI de callback do Logto com um c\xf3digo de autoriza\xe7\xe3o\n\tlogto ->> platform: Logto troca o c\xf3digo por um token de acesso\n\tplatform --\x3e> logto: Plataforma social retorna o token de acesso\n\tlogto ->> platform: Logto busca informa\xe7\xf5es do usu\xe1rio com o token de acesso\n\tplatform --\x3e> logto: Plataforma social retorna as informa\xe7\xf5es do usu\xe1rio\n\tlogto --\x3e> user: Logto retorna as informa\xe7\xf5es do usu\xe1rio para o aplicativo do usu\xe1rio, <br> completa o fluxo de login"}),"\n",(0,r.jsx)(o.p,{children:"Para realizar o fluxo, precisamos ter os seguintes tr\xeas m\xe9todos:"}),"\n",(0,r.jsx)(o.h3,{id:"getauthorizationuri",children:"getAuthorizationUri"}),"\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.code,{children:"getAuthorizationUri"})," gera uma URL de redirecionamento que pode direcionar os usu\xe1rios finais para a p\xe1gina que requer a autentica\xe7\xe3o dos usu\xe1rios."]}),"\n",(0,r.jsxs)(o.p,{children:["A interface \xe9 definida como ",(0,r.jsx)(o.code,{children:"GetAuthorizationUri"})," em ",(0,r.jsx)(o.a,{href:"https://github.com/logto-io/logto/blob/master/packages/toolkit/connector-kit/src/types/social.ts",children:(0,r.jsx)(o.code,{children:"@logto/connector-kit"})}),"."]}),"\n",(0,r.jsxs)(o.p,{children:["Voc\xea pode armazenar informa\xe7\xf5es essenciais relacionadas ao login usando ",(0,r.jsx)(o.code,{children:"setSession"})," (o segundo par\xe2metro de entrada de ",(0,r.jsx)(o.code,{children:"GetAuthorizationUri"}),") para o m\xe9todo ",(0,r.jsx)(o.code,{children:"getUserInfo"}),"."]}),"\n",(0,r.jsx)(o.p,{children:"Os par\xe2metros listados s\xe3o necess\xe1rios:"}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:"authorizationEndpoint"})," pode ser encontrado no site de documenta\xe7\xe3o do OAuth do GitHub, que \xe9 a p\xe1gina onde o usu\xe1rio final deve ir para autentica\xe7\xe3o"]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:"config"}),", que inclui ",(0,r.jsx)(o.code,{children:"clientId"})," e ",(0,r.jsx)(o.code,{children:"clientSecret"})," no cen\xe1rio do GitHub"]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:"state"}),", uma string aleat\xf3ria para provar CSRF"]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:"redirectUri"})," da p\xe1gina de destino ap\xf3s a autentica\xe7\xe3o bem-sucedida do usu\xe1rio final"]}),"\n"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-typescript",children:"const getAuthorizationUri = async ({ state, redirectUri }) => {\n  const queryParameters = new URLSearchParams({\n    client_id: config.clientId, // `config` cont\xe9m suas credenciais de aplicativo do GitHub\n    redirect_uri: redirectUri,\n    state,\n  });\n\n  return `${authorizationEndpoint}?${queryParameters.toString()}`;\n};\n"})}),"\n",(0,r.jsx)(o.h3,{id:"getaccesstoken",children:"getAccessToken"}),"\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.code,{children:"getAccessToken"})," obt\xe9m o token de acesso com o c\xf3digo de autoriza\xe7\xe3o emitido ap\xf3s a autentica\xe7\xe3o bem-sucedida dos usu\xe1rios finais."]}),"\n",(0,r.jsxs)(o.p,{children:["Al\xe9m do ",(0,r.jsx)(o.code,{children:"config"})," mencionado no m\xe9todo ",(0,r.jsx)(o.code,{children:"getAuthorizationUri"})," anterior, tamb\xe9m queremos obter:"]}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:"code"})," de autoriza\xe7\xe3o dos par\xe2metros trazidos para a p\xe1gina de destino de redirecionamento"]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:"accessTokenEndpoint"}),", que \xe9 o endpoint para obter o token de acesso com o c\xf3digo de autoriza\xe7\xe3o"]}),"\n"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-typescript",children:"const getAccessToken = async (config: GithubConfig, code: string) => {\n  const { clientId: client_id, clientSecret: client_secret } = config;\n\n  const httpResponse = await got.post({\n    url: accessTokenEndpoint,\n    json: {\n      client_id,\n      client_secret,\n      code,\n    },\n    timeout: defaultTimeout,\n  });\n\n  const result = accessTokenResponseGuard.safeParse(qs.parse(httpResponse.body));\n\n  if (!result.success) {\n    throw new ConnectorError(ConnectorErrorCodes.InvalidResponse, result.error);\n  }\n\n  const { access_token: accessToken } = result.data;\n\n  assert(accessToken, new ConnectorError(ConnectorErrorCodes.SocialAuthCodeInvalid));\n\n  return { accessToken };\n};\n"})}),"\n",(0,r.jsx)(o.h3,{id:"getuserinfo",children:"getUserInfo"}),"\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.code,{children:"getUserInfo"})," busca informa\xe7\xf5es do usu\xe1rio com o token de acesso obtido na etapa anterior."]}),"\n",(0,r.jsxs)(o.p,{children:["A interface \xe9 definida como ",(0,r.jsx)(o.code,{children:"GetUserInfo"})," em ",(0,r.jsx)(o.a,{href:"https://github.com/logto-io/logto/blob/master/packages/toolkit/connector-kit/src/types/social.ts",children:(0,r.jsx)(o.code,{children:"@logto/connector-kit"})}),"."]}),"\n",(0,r.jsxs)(o.p,{children:["Para fins de login, voc\xea pode recuperar informa\xe7\xf5es necess\xe1rias usando a fun\xe7\xe3o ",(0,r.jsx)(o.code,{children:"getSession"}),"."]}),"\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.code,{children:"userInfoEndpoint"})," \xe9 o endpoint usado para obter informa\xe7\xf5es do usu\xe1rio."]}),"\n",(0,r.jsx)(o.p,{children:"Voc\xea pode verificar documentos oficiais para encontrar informa\xe7\xf5es espec\xedficas do usu\xe1rio que podem ser acessadas no endpoint de informa\xe7\xf5es do usu\xe1rio e o escopo correspondente."}),"\n",(0,r.jsxs)(o.p,{children:[(0,r.jsx)(o.code,{children:"id"})," atribu\xeddo pelo provedor de identidade do conector (neste caso, GitHub) \xe9 necess\xe1rio; outras informa\xe7\xf5es s\xe3o opcionais. Se voc\xea puder obter ",(0,r.jsx)(o.code,{children:"email"})," ou ",(0,r.jsx)(o.code,{children:"phone"}),' do perfil do usu\xe1rio, CERTIFIQUE-SE de que eles est\xe3o "verificados". Voc\xea tamb\xe9m precisa alinhar as chaves de retorno com os nomes dos campos no ',(0,r.jsx)(o.a,{href:"/user-management/user-data/#basic-data",children:"perfil de usu\xe1rio do Logto"}),"."]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-typescript",children:"const getUserInfo = async (\n  data: { code: string; config: GithubConfig },\n  getSession: GetSession,\n  { set: SetStorageValue, get: GetStorageValue }\n) => {\n  const { code, config } = data;\n  const { accessToken } = await getAccessToken(config, code);\n\n  try {\n    const httpResponse = await got.get(userInfoEndpoint, {\n      headers: {\n        authorization: `token ${accessToken}`,\n      },\n      timeout: defaultTimeout,\n    });\n\n    const result = userInfoResponseGuard.safeParse(parseJson(httpResponse.body));\n\n    if (!result.success) {\n      throw new ConnectorError(ConnectorErrorCodes.InvalidResponse, result.error);\n    }\n\n    const { id, avatar_url: avatar, email, name } = result.data;\n\n    return {\n      id: String(id),\n      avatar: conditional(avatar),\n      email: conditional(email),\n      name: conditional(name),\n    };\n  } catch (error: unknown) {\n    if (error instanceof HTTPError) {\n      const { statusCode, body: rawBody } = error.response;\n\n      if (statusCode === 401) {\n        throw new ConnectorError(ConnectorErrorCodes.SocialAccessTokenInvalid);\n      }\n\n      throw new ConnectorError(ConnectorErrorCodes.General, JSON.stringify(rawBody));\n    }\n\n    throw error;\n  }\n};\n"})}),"\n",(0,r.jsxs)(o.p,{children:["Voc\xea pode encontrar a implementa\xe7\xe3o completa ",(0,r.jsx)(o.a,{href:"https://github.com/logto-io/connectors/blob/master/packages/connector-github/src/index.ts",children:"aqui"}),"."]}),"\n",(0,r.jsx)(o.p,{children:"Para mais detalhes sobre par\xe2metros configur\xe1veis, consulte o README do conector do GitHub ou os documentos oficiais do GitHub."}),"\n",(0,r.jsxs)(o.admonition,{type:"note",children:[(0,r.jsx)(o.p,{children:"O exemplo que discutimos \xe9 baseado no tipo de concess\xe3o de C\xf3digo de Autoriza\xe7\xe3o do protocolo OAuth, que \xe9 usado no conector do GitHub do Logto. No entanto, vale destacar que outro tipo de concess\xe3o, o tipo de concess\xe3o Impl\xedcita, tamb\xe9m pode ser usado para recuperar o perfil de um usu\xe1rio e, de fato, fornece um access_token diretamente na resposta de autentica\xe7\xe3o. Apesar dessa conveni\xeancia, o tipo de concess\xe3o de C\xf3digo de Autoriza\xe7\xe3o \xe9 geralmente recomendado em vez do tipo Impl\xedcito devido \xe0 sua seguran\xe7a mais robusta."}),(0,r.jsx)(o.p,{children:"Voc\xea tamb\xe9m pode construir um conector baseado em OIDC ou em alguns outros protocolos abertos, depende do seu caso de uso, bem como da compatibilidade do fornecedor social que voc\xea deseja conectar."})]}),"\n",(0,r.jsx)(o.h2,{id:"build-a-passwordless-connector",children:"Construir um conector sem senha"}),"\n",(0,r.jsx)(o.p,{children:"Vamos passar pela implementa\xe7\xe3o do conector de email direto da Aliyun para entender o processo de constru\xe7\xe3o de um conector sem senha."}),"\n",(0,r.jsxs)(o.p,{children:["Conectores sem senha s\xe3o usados para enviar um c\xf3digo aleat\xf3rio para o email ou telefone dos usu\xe1rios finais. Como resultado, um m\xe9todo ",(0,r.jsx)(o.code,{children:"sendMessage"})," \xe9 necess\xe1rio."]}),"\n",(0,r.jsx)(o.h3,{id:"sendmessage",children:"sendMessage"}),"\n",(0,r.jsxs)(o.p,{children:["Para enviar uma mensagem, precisamos que ",(0,r.jsx)(o.code,{children:"config"})," e ",(0,r.jsx)(o.code,{children:"endpoint"})," estejam configurados corretamente."]}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:"endpoint"})," \xe9 o endpoint para o qual suas chamadas de API se conectam"]}),"\n",(0,r.jsxs)(o.li,{children:[(0,r.jsx)(o.code,{children:"config"})," cont\xe9m ",(0,r.jsx)(o.code,{children:"templates"})," (modelos de conte\xfado para enviar c\xf3digo de acesso em diferentes fluxos de usu\xe1rio), ",(0,r.jsx)(o.code,{children:"clientId"})," e ",(0,r.jsx)(o.code,{children:"clientSecret"})," (para acessar solicita\xe7\xf5es de API)"]}),"\n"]}),"\n",(0,r.jsx)(o.pre,{children:(0,r.jsx)(o.code,{className:"language-typescript",children:"const sendMessage = async (data, inputConfig) => {\n  const { to, type, payload } = data;\n  const config = inputConfig ?? (await getConfig(defaultMetadata.id));\n  validateConfig<AliyunDmConfig>(config, aliyunDmConfigGuard);\n  const { accessKeyId, accessKeySecret, accountName, fromAlias, templates } = config;\n  const template = templates.find((template) => template.usageType === type);\n\n  assert(\n    template,\n    new ConnectorError(\n      ConnectorErrorCodes.TemplateNotFound,\n      `Cannot find template for type: ${type}`\n    )\n  );\n\n  const parameters = {\n    AccessKeyId: accessKeyId,\n    AccountName: accountName,\n    ReplyToAddress: 'false',\n    AddressType: '1',\n    ToAddress: to,\n    FromAlias: fromAlias,\n    Subject: template.subject,\n    HtmlBody:\n      typeof payload.code === 'string'\n        ? template.content.replace(/{{code}}/g, payload.code)\n        : template.content,\n  };\n\n  try {\n    const httpResponse = await request(\n      endpoint,\n      { Action: 'SingleSendMail', ...staticConfigs, ...parameters },\n      accessKeySecret\n    );\n\n    const result = sendEmailResponseGuard.safeParse(parseJson(httpResponse.body));\n\n    if (!result.success) {\n      throw new ConnectorError(ConnectorErrorCodes.InvalidResponse, result.error);\n    }\n\n    return result.data;\n  } catch (error: unknown) {\n    if (error instanceof HTTPError) {\n      const {\n        response: { body: rawBody },\n      } = error;\n\n      assert(typeof rawBody === 'string', new ConnectorError(ConnectorErrorCodes.InvalidResponse));\n\n      errorHandler(rawBody);\n    }\n\n    throw error;\n  }\n};\n\nconst request = async (\n  url: string,\n  parameters: PublicParameters & Record<string, string>,\n  accessKeySecret: string\n) => {\n  const finalParameters: Record<string, string> = {\n    ...parameters,\n    SignatureNonce: String(Math.random()),\n    Timestamp: new Date().toISOString(),\n  };\n  const signature = getSignature(finalParameters, accessKeySecret, 'POST');\n\n  const payload = new URLSearchParams();\n\n  for (const [key, value] of Object.entries(finalParameters)) {\n    payload.append(key, value);\n  }\n  payload.append('Signature', signature);\n\n  return got.post({\n    url,\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    form: payload,\n  });\n};\n"})}),"\n",(0,r.jsxs)(o.p,{children:["Voc\xea pode encontrar a implementa\xe7\xe3o completa ",(0,r.jsx)(o.a,{href:"https://github.com/logto-io/connectors/blob/master/packages/connector-aliyun-dm/src/index.ts",children:"aqui"}),"."]}),"\n",(0,r.jsx)(o.p,{children:"Para mais detalhes sobre par\xe2metros configur\xe1veis, consulte o README do conector de email direto da Aliyun ou os documentos oficiais do email direto da Aliyun."}),"\n",(0,r.jsx)(o.h2,{id:"whats-more",children:"O que mais?"}),"\n",(0,r.jsxs)(o.p,{children:["Para ver a defini\xe7\xe3o dos m\xe9todos do conector e construir uma imagem do design da interface do conector, veja ",(0,r.jsx)(o.a,{href:"https://github.com/logto-io/logto/tree/master/packages/toolkit/connector-kit",children:(0,r.jsx)(o.code,{children:"@logto/connector-kit"})}),". Voc\xea tamb\xe9m pode encontrar a refer\xeancia ",(0,r.jsx)(o.em,{children:"ConnectorMetadata"}),' em "',(0,r.jsx)(o.a,{href:"/connectors/connector-data-structure/#connectors-local-storage-connectormetadata",children:"Connectors - ConnectorMetadata"}),'" e "',(0,r.jsx)(o.a,{href:"/logto-oss/develop-your-connector/connector-file-structure/",children:"Estrutura de arquivo do conector"}),'" pode ajud\xe1-lo a entender como organizar sua implementa\xe7\xe3o.']}),"\n",(0,r.jsxs)(o.ul,{children:["\n",(0,r.jsxs)(o.li,{children:["O esquema ",(0,r.jsx)(o.em,{children:"Zod"})," de configura\xe7\xe3o de um conector \xe9 obrigat\xf3rio para todos os conectores. Isso \xe9 bastante importante, pois fazemos verifica\xe7\xe3o de tipo antes de salvar ",(0,r.jsx)(o.code,{children:"config"})," no banco de dados e chamar APIs que requerem informa\xe7\xf5es de ",(0,r.jsx)(o.code,{children:"config"}),"."]}),"\n",(0,r.jsxs)(o.li,{children:["Todos os ",(0,r.jsx)(o.em,{children:"conectores de SMS"})," e ",(0,r.jsx)(o.em,{children:"conectores de email"})," requerem um m\xe9todo ",(0,r.jsx)(o.code,{children:"sendMessage"})," para chamar as APIs de envio de mensagens dos provedores de servi\xe7o usando configura\xe7\xf5es do banco de dados. Os desenvolvedores tamb\xe9m podem reutilizar esse m\xe9todo para enviar uma mensagem de teste com configura\xe7\xe3o n\xe3o salva ao configurar conectores no Console de Administra\xe7\xe3o."]}),"\n",(0,r.jsxs)(o.li,{children:["O gerador de URL de autoriza\xe7\xe3o ",(0,r.jsx)(o.code,{children:"getAuthorizationUri"})," e o recuperador de perfil de usu\xe1rio ",(0,r.jsx)(o.code,{children:"getUserInfo"})," s\xe3o necess\xe1rios para todos os ",(0,r.jsx)(o.em,{children:"conectores sociais"})," (",(0,r.jsx)(o.code,{children:"getAccessToken"})," \xe9 considerado uma etapa opcional em ",(0,r.jsx)(o.code,{children:"getUserInfo"}),")."]}),"\n",(0,r.jsx)(o.li,{children:"Todos os m\xe9todos dos conectores funcionam por meio de chamadas de API, como resultado, os desenvolvedores de conectores precisam verificar documentos e lidar com poss\xedveis respostas malsucedidas de chamadas de API."}),"\n"]}),"\n",(0,r.jsx)(o.h2,{id:"install-your-own-connectors",children:"Instalar seus pr\xf3prios conectores"}),"\n",(0,r.jsx)(o.p,{children:"Assumimos que voc\xea j\xe1 terminou de construir seu pr\xf3prio conector. Siga os passos a seguir para instal\xe1-lo manualmente:"}),"\n",(0,r.jsxs)(o.ol,{children:["\n",(0,r.jsxs)(o.li,{children:["Copie a pasta do conector que voc\xea implementou para o diret\xf3rio ",(0,r.jsx)(o.code,{children:"/packages/connectors"})," de ",(0,r.jsx)(o.a,{href:"https://github.com/logto-io/logto",children:(0,r.jsx)(o.code,{children:"logto-io/logto"})}),"."]}),"\n",(0,r.jsxs)(o.li,{children:["Instale as depend\xeancias do reposit\xf3rio do conector digitando ",(0,r.jsx)(o.code,{children:"pnpm pnpm:devPreinstall && pnpm i"})," no caminho raiz da pasta logto."]}),"\n",(0,r.jsxs)(o.li,{children:["Construa o conector com ",(0,r.jsx)(o.code,{children:"pnpm connectors build"}),"."]}),"\n",(0,r.jsxs)(o.li,{children:["Vincule conectores locais usando ",(0,r.jsx)(o.code,{children:"pnpm cli connector link"}),"."]}),"\n",(0,r.jsxs)(o.li,{children:["Reinicie a inst\xe2ncia do Logto com ",(0,r.jsx)(o.code,{children:"pnpm dev"})," no diret\xf3rio raiz de ",(0,r.jsx)(o.code,{children:"logto-io/logto"}),", e voc\xea poder\xe1 encontrar os conectores instalados com sucesso."]}),"\n"]}),"\n",(0,r.jsx)(o.p,{children:"Agora voc\xea pode testar e experimentar seu conector para ver se ele funciona conforme o esperado."}),"\n",(0,r.jsxs)(o.p,{children:["Se voc\xea quiser adicionar conectores que j\xe1 foram publicados no NPM ou conectores oficiais do Logto, voc\xea pode verificar ",(0,r.jsx)(o.a,{href:"/logto-oss/using-cli/manage-connectors/#add-connectors",children:"Usando Logto CLI - Gerenciar conectores"}),"."]})]})}function u(e={}){const{wrapper:o}={...(0,a.R)(),...e.components};return o?(0,r.jsx)(o,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},79621:(e,o,n)=>{n.d(o,{R:()=>t,x:()=>c});var s=n(58101);const r={},a=s.createContext(r);function t(e){const o=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(a.Provider,{value:o},e.children)}}}]);