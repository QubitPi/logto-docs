"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[61346],{27007:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"logto-oss/develop-your-connector/implement-connectors","title":"Impl\xe9menter des connecteurs","description":"Apr\xe8s avoir examin\xe9 la structure de fichiers du connecteur, discutons de l\'impl\xe9mentation et de l\'id\xe9e principale du d\xe9veloppement d\'un connecteur.","source":"@site/i18n/fr/docusaurus-plugin-content-docs/current/logto-oss/develop-your-connector/implement-connectors.mdx","sourceDirName":"logto-oss/develop-your-connector","slug":"/logto-oss/develop-your-connector/implement-connectors","permalink":"/fr/logto-oss/develop-your-connector/implement-connectors","draft":false,"unlisted":false,"editUrl":"https://github.com/logto-io/docs/tree/master/i18n/fr/docusaurus-plugin-content-docs/current/logto-oss/develop-your-connector/implement-connectors.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Structure de fichier du connecteur","permalink":"/fr/logto-oss/develop-your-connector/connector-file-structure"},"next":{"title":"Guide \xe9tape par \xe9tape pour d\xe9velopper un connecteur social","permalink":"/fr/logto-oss/develop-your-connector/step-by-step-guide"}}');var s=o(25105),r=o(79621);const i={sidebar_position:2},c="Impl\xe9menter des connecteurs",a={},l=[{value:"Construire un connecteur social",id:"build-a-social-connector",level:2},{value:"getAuthorizationUri",id:"getauthorizationuri",level:3},{value:"getAccessToken",id:"getaccesstoken",level:3},{value:"getUserInfo",id:"getuserinfo",level:3},{value:"Construire un connecteur sans mot de passe",id:"build-a-passwordless-connector",level:2},{value:"sendMessage",id:"sendmessage",level:3},{value:"Quoi d&#39;autre ?",id:"whats-more",level:2},{value:"Installer vos propres connecteurs",id:"install-your-own-connectors",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"impl\xe9menter-des-connecteurs",children:"Impl\xe9menter des connecteurs"})}),"\n",(0,s.jsx)(n.p,{children:"Apr\xe8s avoir examin\xe9 la structure de fichiers du connecteur, discutons de l'impl\xe9mentation et de l'id\xe9e principale du d\xe9veloppement d'un connecteur."}),"\n",(0,s.jsx)(n.p,{children:"Nous allons passer par un exemple simple pour les connecteurs sociaux et sans mot de passe afin que vous puissiez construire votre connecteur avec presque la m\xeame id\xe9e."}),"\n",(0,s.jsxs)(n.p,{children:["Dans cette partie, nous n'entrons pas dans les d\xe9tails des param\xe8tres sp\xe9cifiques (comme ",(0,s.jsx)(n.code,{children:"config"}),") car ce n'est pas le but de ce guide. Les d\xe9veloppeurs qui impl\xe9mentent de nouveaux connecteurs devraient lire les documents fournis par les fournisseurs de services tiers, et ces documents devraient d\xe9tailler les param\xe8tres."]}),"\n",(0,s.jsx)(n.h2,{id:"build-a-social-connector",children:"Construire un connecteur social"}),"\n",(0,s.jsx)(n.p,{children:"Prenons le connecteur GitHub comme exemple."}),"\n",(0,s.jsxs)(n.p,{children:["La plupart des flux d'Autorisation des connecteurs sociaux ob\xe9issent au ",(0,s.jsx)(n.a,{href:"https://openid.net/specs/openid-connect-basic-1_0.html",children:"Flux de Code d'Autorisation OAuth"}),"."]}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.p,{children:["La majorit\xe9 des ",(0,s.jsx)(n.em,{children:"connecteurs sociaux"}),", obtenir un profil utilisateur avec l'Authentification des utilisateurs finaux suit un sch\xe9ma en deux \xe9tapes (en supposant que toutes les \xe9tapes r\xe9ussissent) :"]}),(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"D\xe9marrer une requ\xeate d'authentification et obtenir l'authentification de l'utilisateur."}),"\n",(0,s.jsxs)(n.li,{children:["R\xe9cup\xe9rer le ",(0,s.jsx)(n.code,{children:"jeton d\u2019acc\xe8s"})," en utilisant un ",(0,s.jsx)(n.code,{children:"authCode"})," accord\xe9 par le fournisseur de connecteur."]}),"\n",(0,s.jsxs)(n.li,{children:["Demander un profil utilisateur accessible publiquement en utilisant le ",(0,s.jsx)(n.code,{children:"jeton d\u2019acc\xe8s"}),"."]}),"\n"]})]}),"\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\n\tactor user as Utilisateur final\n\tparticipant logto as Logto\n\tparticipant platform as Plateforme sociale tierce\n\n\tuser ->> logto: L'utilisateur initie la connexion sociale\n\tlogto ->> platform: Logto redirige vers la plateforme sociale tierce\n\tplatform --\x3e> user: La plateforme sociale invite l'utilisateur \xe0 se connecter\n\tuser ->> platform: L'utilisateur se connecte et autorise l'acc\xe8s de Logto\n\tplatform --\x3e> logto: Rediriger vers l'URI de rappel de Logto avec un code d'autorisation\n\tlogto ->> platform: Logto \xe9change le code contre un jeton d\u2019acc\xe8s\n\tplatform --\x3e> logto: La plateforme sociale renvoie le jeton d\u2019acc\xe8s\n\tlogto ->> platform: Logto r\xe9cup\xe8re les informations utilisateur avec le jeton d\u2019acc\xe8s\n\tplatform --\x3e> logto: La plateforme sociale renvoie les informations utilisateur\n\tlogto --\x3e> user: Logto renvoie les informations utilisateur \xe0 l'application utilisateur, <br> compl\xe8te le flux de connexion"}),"\n",(0,s.jsx)(n.p,{children:"Pour accomplir le flux, nous devons avoir les trois m\xe9thodes suivantes :"}),"\n",(0,s.jsx)(n.h3,{id:"getauthorizationuri",children:"getAuthorizationUri"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"getAuthorizationUri"})," g\xe9n\xe8re une URL de redirection qui peut diriger les utilisateurs finaux vers la page n\xe9cessitant l'Authentification des utilisateurs."]}),"\n",(0,s.jsxs)(n.p,{children:["L'interface est d\xe9finie comme ",(0,s.jsx)(n.code,{children:"GetAuthorizationUri"})," dans ",(0,s.jsx)(n.a,{href:"https://github.com/logto-io/logto/blob/master/packages/toolkit/connector-kit/src/types/social.ts",children:(0,s.jsx)(n.code,{children:"@logto/connector-kit"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Vous \xeates autoris\xe9 \xe0 stocker des informations essentielles li\xe9es \xe0 la connexion en utilisant ",(0,s.jsx)(n.code,{children:"setSession"})," (le deuxi\xe8me param\xe8tre d'entr\xe9e de ",(0,s.jsx)(n.code,{children:"GetAuthorizationUri"}),") pour le bien de la m\xe9thode ",(0,s.jsx)(n.code,{children:"getUserInfo"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Les param\xe8tres list\xe9s sont requis :"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"authorizationEndpoint"})," peut \xeatre trouv\xe9 dans le site de documentation OAuth de GitHub, qui est la page o\xf9 l'utilisateur final doit aller pour l'authentification"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"config"}),", qui inclut ",(0,s.jsx)(n.code,{children:"clientId"})," et ",(0,s.jsx)(n.code,{children:"clientSecret"})," dans le sc\xe9nario GitHub"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"state"}),", une cha\xeene al\xe9atoire pour prouver le CSRF"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"redirectUri"})," de la page de destination apr\xe8s l'authentification r\xe9ussie de l'utilisateur final"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const getAuthorizationUri = async ({ state, redirectUri }) => {\n  const queryParameters = new URLSearchParams({\n    client_id: config.clientId, // `config` contient vos informations d'identification de l'application GitHub\n    redirect_uri: redirectUri,\n    state,\n  });\n\n  return `${authorizationEndpoint}?${queryParameters.toString()}`;\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"getaccesstoken",children:"getAccessToken"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"getAccessToken"})," obtient le jeton d\u2019acc\xe8s avec le code d'autorisation \xe9mis apr\xe8s l'authentification r\xe9ussie des utilisateurs finaux."]}),"\n",(0,s.jsxs)(n.p,{children:["Outre ",(0,s.jsx)(n.code,{children:"config"})," que nous avons mentionn\xe9 dans la m\xe9thode pr\xe9c\xe9dente ",(0,s.jsx)(n.code,{children:"getAuthorizationUri"}),", nous voulons \xe9galement obtenir :"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["le ",(0,s.jsx)(n.code,{children:"code"})," d'autorisation des param\xe8tres apport\xe9s \xe0 la page de destination de redirection"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"accessTokenEndpoint"}),", qui est le point de terminaison pour obtenir le jeton d\u2019acc\xe8s avec le code d'autorisation"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const getAccessToken = async (config: GithubConfig, code: string) => {\n  const { clientId: client_id, clientSecret: client_secret } = config;\n\n  const httpResponse = await got.post({\n    url: accessTokenEndpoint,\n    json: {\n      client_id,\n      client_secret,\n      code,\n    },\n    timeout: defaultTimeout,\n  });\n\n  const result = accessTokenResponseGuard.safeParse(qs.parse(httpResponse.body));\n\n  if (!result.success) {\n    throw new ConnectorError(ConnectorErrorCodes.InvalidResponse, result.error);\n  }\n\n  const { access_token: accessToken } = result.data;\n\n  assert(accessToken, new ConnectorError(ConnectorErrorCodes.SocialAuthCodeInvalid));\n\n  return { accessToken };\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"getuserinfo",children:"getUserInfo"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"getUserInfo"})," r\xe9cup\xe8re les informations utilisateur avec le jeton d\u2019acc\xe8s obtenu \xe0 l'\xe9tape pr\xe9c\xe9dente."]}),"\n",(0,s.jsxs)(n.p,{children:["L'interface est d\xe9finie comme ",(0,s.jsx)(n.code,{children:"GetUserInfo"})," dans ",(0,s.jsx)(n.a,{href:"https://github.com/logto-io/logto/blob/master/packages/toolkit/connector-kit/src/types/social.ts",children:(0,s.jsx)(n.code,{children:"@logto/connector-kit"})}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["\xc0 des fins de connexion, vous pouvez r\xe9cup\xe9rer les informations n\xe9cessaires en utilisant la fonction ",(0,s.jsx)(n.code,{children:"getSession"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"userInfoEndpoint"})," est le point de terminaison utilis\xe9 pour obtenir les informations utilisateur."]}),"\n",(0,s.jsx)(n.p,{children:"Vous pouvez consulter les documents officiels pour trouver des informations utilisateur sp\xe9cifiques accessibles au point de terminaison des informations utilisateur et la port\xe9e correspondante."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"id"})," attribu\xe9 par le fournisseur d\u2019identit\xe9 (IdP) du connecteur (dans ce cas, GitHub) est requis ; d'autres informations sont facultatives. Si vous pouvez obtenir ",(0,s.jsx)(n.code,{children:"email"})," ou ",(0,s.jsx)(n.code,{children:"phone"}),' \xe0 partir du profil utilisateur, ASSUREZ-VOUS qu\'ils sont "v\xe9rifi\xe9s". Vous devez \xe9galement aligner les cl\xe9s de retour avec les noms de champs dans le ',(0,s.jsx)(n.a,{href:"/user-management/user-data/#basic-data",children:"profil utilisateur Logto"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const getUserInfo = async (\n  data: { code: string; config: GithubConfig },\n  getSession: GetSession,\n  { set: SetStorageValue, get: GetStorageValue }\n) => {\n  const { code, config } = data;\n  const { accessToken } = await getAccessToken(config, code);\n\n  try {\n    const httpResponse = await got.get(userInfoEndpoint, {\n      headers: {\n        authorization: `token ${accessToken}`,\n      },\n      timeout: defaultTimeout,\n    });\n\n    const result = userInfoResponseGuard.safeParse(parseJson(httpResponse.body));\n\n    if (!result.success) {\n      throw new ConnectorError(ConnectorErrorCodes.InvalidResponse, result.error);\n    }\n\n    const { id, avatar_url: avatar, email, name } = result.data;\n\n    return {\n      id: String(id),\n      avatar: conditional(avatar),\n      email: conditional(email),\n      name: conditional(name),\n    };\n  } catch (error: unknown) {\n    if (error instanceof HTTPError) {\n      const { statusCode, body: rawBody } = error.response;\n\n      if (statusCode === 401) {\n        throw new ConnectorError(ConnectorErrorCodes.SocialAccessTokenInvalid);\n      }\n\n      throw new ConnectorError(ConnectorErrorCodes.General, JSON.stringify(rawBody));\n    }\n\n    throw error;\n  }\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Vous pouvez trouver l'impl\xe9mentation compl\xe8te ",(0,s.jsx)(n.a,{href:"https://github.com/logto-io/connectors/blob/master/packages/connector-github/src/index.ts",children:"ici"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Pour plus de d\xe9tails sur les param\xe8tres configurables, consultez le README du connecteur GitHub ou les documents officiels de GitHub."}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:"L'exemple que nous avons discut\xe9 est bas\xe9 sur le type de subvention du Code d'Autorisation du protocole OAuth, qui est utilis\xe9 dans le connecteur GitHub de Logto. Cependant, il convient de souligner qu'un autre type de subvention, le type de subvention Implicite, peut \xe9galement \xeatre utilis\xe9 pour r\xe9cup\xe9rer le profil d'un utilisateur, et en fait, fournit un jeton d\u2019acc\xe8s directement dans la r\xe9ponse d'authentification. Malgr\xe9 cette commodit\xe9, le type de subvention du Code d'Autorisation est g\xe9n\xe9ralement recommand\xe9 par rapport au type Implicite en raison de sa s\xe9curit\xe9 renforc\xe9e."}),(0,s.jsx)(n.p,{children:"Vous pouvez \xe9galement construire un connecteur bas\xe9 sur OIDC ou d'autres protocoles ouverts, cela d\xe9pend de votre cas d'utilisation ainsi que de la compatibilit\xe9 du fournisseur social auquel vous souhaitez vous connecter."})]}),"\n",(0,s.jsx)(n.h2,{id:"build-a-passwordless-connector",children:"Construire un connecteur sans mot de passe"}),"\n",(0,s.jsx)(n.p,{children:"Passons en revue l'impl\xe9mentation du connecteur de messagerie directe Aliyun pour comprendre le processus de construction d'un connecteur sans mot de passe."}),"\n",(0,s.jsxs)(n.p,{children:["Les connecteurs sans mot de passe sont utilis\xe9s pour envoyer un code al\xe9atoire \xe0 l'email ou au t\xe9l\xe9phone des utilisateurs finaux. En cons\xe9quence, une m\xe9thode ",(0,s.jsx)(n.code,{children:"sendMessage"})," est requise."]}),"\n",(0,s.jsx)(n.h3,{id:"sendmessage",children:"sendMessage"}),"\n",(0,s.jsxs)(n.p,{children:["Pour envoyer un message, nous devons configurer correctement ",(0,s.jsx)(n.code,{children:"config"})," et ",(0,s.jsx)(n.code,{children:"endpoint"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"endpoint"})," est le point de terminaison auquel vos appels API se connectent"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"config"})," contient ",(0,s.jsx)(n.code,{children:"templates"})," (mod\xe8les de contenu pour envoyer le code de passe dans diff\xe9rents flux utilisateur), ",(0,s.jsx)(n.code,{children:"clientId"})," et ",(0,s.jsx)(n.code,{children:"clientSecret"})," (pour acc\xe9der aux requ\xeates API)"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const sendMessage = async (data, inputConfig) => {\n  const { to, type, payload } = data;\n  const config = inputConfig ?? (await getConfig(defaultMetadata.id));\n  validateConfig<AliyunDmConfig>(config, aliyunDmConfigGuard);\n  const { accessKeyId, accessKeySecret, accountName, fromAlias, templates } = config;\n  const template = templates.find((template) => template.usageType === type);\n\n  assert(\n    template,\n    new ConnectorError(\n      ConnectorErrorCodes.TemplateNotFound,\n      `Cannot find template for type: ${type}`\n    )\n  );\n\n  const parameters = {\n    AccessKeyId: accessKeyId,\n    AccountName: accountName,\n    ReplyToAddress: 'false',\n    AddressType: '1',\n    ToAddress: to,\n    FromAlias: fromAlias,\n    Subject: template.subject,\n    HtmlBody:\n      typeof payload.code === 'string'\n        ? template.content.replace(/{{code}}/g, payload.code)\n        : template.content,\n  };\n\n  try {\n    const httpResponse = await request(\n      endpoint,\n      { Action: 'SingleSendMail', ...staticConfigs, ...parameters },\n      accessKeySecret\n    );\n\n    const result = sendEmailResponseGuard.safeParse(parseJson(httpResponse.body));\n\n    if (!result.success) {\n      throw new ConnectorError(ConnectorErrorCodes.InvalidResponse, result.error);\n    }\n\n    return result.data;\n  } catch (error: unknown) {\n    if (error instanceof HTTPError) {\n      const {\n        response: { body: rawBody },\n      } = error;\n\n      assert(typeof rawBody === 'string', new ConnectorError(ConnectorErrorCodes.InvalidResponse));\n\n      errorHandler(rawBody);\n    }\n\n    throw error;\n  }\n};\n\nconst request = async (\n  url: string,\n  parameters: PublicParameters & Record<string, string>,\n  accessKeySecret: string\n) => {\n  const finalParameters: Record<string, string> = {\n    ...parameters,\n    SignatureNonce: String(Math.random()),\n    Timestamp: new Date().toISOString(),\n  };\n  const signature = getSignature(finalParameters, accessKeySecret, 'POST');\n\n  const payload = new URLSearchParams();\n\n  for (const [key, value] of Object.entries(finalParameters)) {\n    payload.append(key, value);\n  }\n  payload.append('Signature', signature);\n\n  return got.post({\n    url,\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    form: payload,\n  });\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Vous pouvez trouver l'impl\xe9mentation compl\xe8te ",(0,s.jsx)(n.a,{href:"https://github.com/logto-io/connectors/blob/master/packages/connector-aliyun-dm/src/index.ts",children:"ici"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Pour plus de d\xe9tails sur les param\xe8tres configurables, consultez le README du connecteur de messagerie directe Aliyun ou les documents officiels de messagerie directe Aliyun."}),"\n",(0,s.jsx)(n.h2,{id:"whats-more",children:"Quoi d'autre ?"}),"\n",(0,s.jsxs)(n.p,{children:["Pour voir la d\xe9finition des m\xe9thodes de connecteur et se faire une id\xe9e de la conception de l'interface du connecteur, consultez ",(0,s.jsx)(n.a,{href:"https://github.com/logto-io/logto/tree/master/packages/toolkit/connector-kit",children:(0,s.jsx)(n.code,{children:"@logto/connector-kit"})}),". Vous pouvez \xe9galement trouver la r\xe9f\xe9rence ",(0,s.jsx)(n.em,{children:"ConnectorMetadata"}),' \xe0 "',(0,s.jsx)(n.a,{href:"/connectors/connector-data-structure/#connectors-local-storage-connectormetadata",children:"Connectors - ConnectorMetadata"}),'" et "',(0,s.jsx)(n.a,{href:"/logto-oss/develop-your-connector/connector-file-structure/",children:"Connector file structure"}),'" peut vous aider \xe0 comprendre comment organiser votre impl\xe9mentation.']}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Un sch\xe9ma ",(0,s.jsx)(n.em,{children:"Zod"})," de configuration de connecteur est obligatoire pour tous les connecteurs. C'est assez important car nous effectuons une v\xe9rification de type avant de sauvegarder ",(0,s.jsx)(n.code,{children:"config"})," dans la base de donn\xe9es et d'appeler des API qui n\xe9cessitent des informations ",(0,s.jsx)(n.code,{children:"config"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Tous les ",(0,s.jsx)(n.em,{children:"connecteurs SMS"})," et ",(0,s.jsx)(n.em,{children:"connecteurs email"})," n\xe9cessitent une m\xe9thode ",(0,s.jsx)(n.code,{children:"sendMessage"})," pour appeler les API d'envoi de messages des fournisseurs de services en utilisant les configurations de la base de donn\xe9es. Les d\xe9veloppeurs peuvent \xe9galement r\xe9utiliser cette m\xe9thode pour envoyer un message de test avec une configuration non enregistr\xe9e lors de la configuration des connecteurs dans la Console d'administration."]}),"\n",(0,s.jsxs)(n.li,{children:["Le g\xe9n\xe9rateur d'URL d'autorisation ",(0,s.jsx)(n.code,{children:"getAuthorizationUri"})," et le r\xe9cup\xe9rateur de profil utilisateur ",(0,s.jsx)(n.code,{children:"getUserInfo"})," sont requis pour tous les ",(0,s.jsx)(n.em,{children:"connecteurs sociaux"})," (",(0,s.jsx)(n.code,{children:"getAccessToken"})," est consid\xe9r\xe9 comme une \xe9tape optionnelle dans ",(0,s.jsx)(n.code,{children:"getUserInfo"}),")."]}),"\n",(0,s.jsx)(n.li,{children:"Toutes les m\xe9thodes des connecteurs fonctionnent via des appels API, par cons\xe9quent, les d\xe9veloppeurs de connecteurs doivent v\xe9rifier les documents et g\xe9rer les r\xe9ponses d'appels API infructueuses possibles."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"install-your-own-connectors",children:"Installer vos propres connecteurs"}),"\n",(0,s.jsx)(n.p,{children:"Nous supposons que vous avez d\xe9j\xe0 termin\xe9 la construction de votre propre connecteur. Suivez les \xe9tapes suivantes pour l'installer manuellement :"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Copiez le dossier du connecteur que vous avez impl\xe9ment\xe9 dans le r\xe9pertoire ",(0,s.jsx)(n.code,{children:"/packages/connectors"})," de ",(0,s.jsx)(n.a,{href:"https://github.com/logto-io/logto",children:(0,s.jsx)(n.code,{children:"logto-io/logto"})}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Installez les d\xe9pendances du d\xe9p\xf4t du connecteur en tapant ",(0,s.jsx)(n.code,{children:"pnpm pnpm:devPreinstall && pnpm i"})," \xe0 la racine du dossier logto."]}),"\n",(0,s.jsxs)(n.li,{children:["Construisez le connecteur avec ",(0,s.jsx)(n.code,{children:"pnpm connectors build"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Liez les connecteurs locaux en utilisant ",(0,s.jsx)(n.code,{children:"pnpm cli connector link"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Red\xe9marrez l'instance Logto avec ",(0,s.jsx)(n.code,{children:"pnpm dev"})," \xe0 la racine du r\xe9pertoire ",(0,s.jsx)(n.code,{children:"logto-io/logto"}),", et vous pouvez trouver les connecteurs install\xe9s avec succ\xe8s."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Vous pouvez maintenant tester et essayer votre connecteur pour voir s'il fonctionne comme pr\xe9vu."}),"\n",(0,s.jsxs)(n.p,{children:["Si vous souhaitez ajouter des connecteurs qui ont d\xe9j\xe0 \xe9t\xe9 publi\xe9s sur NPM ou les connecteurs officiels de Logto, vous pouvez consulter ",(0,s.jsx)(n.a,{href:"/logto-oss/using-cli/manage-connectors/#add-connectors",children:"Using Logto CLI - Manage connectors"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},79621:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>c});var t=o(58101);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);