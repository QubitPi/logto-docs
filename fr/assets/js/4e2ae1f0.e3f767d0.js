"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[2149],{25242:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>ve,contentTitle:()=>je,default:()=>we,frontMatter:()=>fe,metadata:()=>r,toc:()=>Ae});const r=JSON.parse('{"id":"authorization/validate-access-tokens/README","title":"Comment valider les jetons d\u2019acc\xe8s dans votre service API ou backend","description":"La validation des jetons d\u2019acc\xe8s (Access tokens) est une \xe9tape essentielle pour appliquer le contr\xf4le d\u2019acc\xe8s bas\xe9 sur les r\xf4les (RBAC) dans Logto. Ce guide vous accompagne dans la v\xe9rification des JWT \xe9mis par Logto dans votre backend / API, en contr\xf4lant la signature, l\u2019\xe9metteur (Issuer), l\u2019audience (Audience), l\u2019expiration, les permissions (Port\xe9es / Scopes), et le contexte d\u2019organisation.","source":"@site/i18n/fr/docusaurus-plugin-content-docs/current/authorization/validate-access-tokens/README.mdx","sourceDirName":"authorization/validate-access-tokens","slug":"/authorization/validate-access-tokens/","permalink":"/fr/authorization/validate-access-tokens/","draft":false,"unlisted":false,"editUrl":"https://github.com/logto-io/docs/tree/master/i18n/fr/docusaurus-plugin-content-docs/current/authorization/validate-access-tokens/README.mdx","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"sidebar_label":"Valider les jetons d\u2019acc\xe8s dans l\u2019API"},"sidebar":"docsSidebar","previous":{"title":"Prot\xe9ger les ressources API au niveau de l\u2019organisation","permalink":"/fr/authorization/organization-level-api-resources"},"next":{"title":"Autorisation (Authorization)","permalink":"/fr/authorization/"}}');var i=t(25105),o=t(79621),s=t(38552),a=t(22002),c=t(12684),u=t(37191),l=t(81348),d=t(41466),p=t(28503),h=t(53830),g=t(12128),m=t(88926),x=t(33306),f=t(38937),j=t(76766),v=t(45402);const A=[...v.RM,...f.RM,...j.RM,...x.RM];function y(e){return(0,i.jsxs)(a.A,{groupId:"go-framework",children:[(0,i.jsx)(s.A,{value:"gin",label:"Gin",children:(0,i.jsx)(v.Ay,{})}),(0,i.jsx)(s.A,{value:"echo",label:"Echo",children:(0,i.jsx)(f.Ay,{})}),(0,i.jsx)(s.A,{value:"fiber",label:"Fiber",children:(0,i.jsx)(j.Ay,{})}),(0,i.jsx)(s.A,{value:"chi",label:"Chi",children:(0,i.jsx)(x.Ay,{})})]})}function w(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(y,{...e})}):y()}var b=t(67292),k=t(57476),_=t(11982),z=t(37512),S=t(51198),I=t(22312);const R=[...S.RM,...z.RM,..._.RM,...I.RM];function q(e){return(0,i.jsxs)(a.A,{groupId:"api-framework",children:[(0,i.jsx)(s.A,{value:"spring-boot",label:"Spring Boot",children:(0,i.jsx)(S.Ay,{})}),(0,i.jsx)(s.A,{value:"quarkus",label:"Quarkus",children:(0,i.jsx)(z.Ay,{})}),(0,i.jsx)(s.A,{value:"micronaut",label:"Micronaut",children:(0,i.jsx)(_.Ay,{})}),(0,i.jsx)(s.A,{value:"vertx-web",label:"Vert.x Web",children:(0,i.jsx)(I.Ay,{})})]})}function E(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(q,{...e})}):q()}var P=t(20242),T=t(40318);function C(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(a.A,{groupId:"api-framework",children:[(0,i.jsx)(s.A,{value:"express",label:"Express.js",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="app.ts"',children:"import express from 'express';\nimport { verifyAccessToken } from './auth-middleware.js';\n\nconst app = express();\n\napp.get('/api/protected', verifyAccessToken, (req, res) => {\n  // Acc\xe9dez directement aux informations d'authentification depuis req.auth\n  res.json({ auth: req.auth });\n});\n\napp.get('/api/protected/detailed', verifyAccessToken, (req, res) => {\n  // Votre logique de point de terminaison prot\xe9g\xe9\n  res.json({\n    auth: req.auth,\n    message: 'Donn\xe9es prot\xe9g\xe9es accessibles avec succ\xe8s',\n  });\n});\n\napp.listen(3000);\n"})})}),(0,i.jsx)(s.A,{value:"koa",label:"Koa.js",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="app.ts"',children:"import Koa from 'koa';\nimport Router from '@koa/router';\nimport { koaVerifyAccessToken } from './auth-middleware.js';\n\nconst app = new Koa();\nconst router = new Router();\n\nrouter.get('/api/protected', koaVerifyAccessToken, (ctx) => {\n  // Acc\xe9dez directement aux informations d'authentification depuis ctx.state.auth\n  ctx.body = { auth: ctx.state.auth };\n});\n\nrouter.get('/api/protected/detailed', koaVerifyAccessToken, (ctx) => {\n  // Votre logique de point de terminaison prot\xe9g\xe9\n  ctx.body = {\n    auth: ctx.state.auth,\n    message: 'Donn\xe9es prot\xe9g\xe9es accessibles avec succ\xe8s',\n  };\n});\n\napp.use(router.routes());\napp.listen(3000);\n"})})}),(0,i.jsx)(s.A,{value:"fastify",label:"Fastify",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="app.ts"',children:"import Fastify from 'fastify';\nimport { fastifyVerifyAccessToken } from './auth-middleware.js';\n\nconst fastify = Fastify();\n\nserver.get('/api/protected', { preHandler: fastifyVerifyAccessToken }, (request, reply) => {\n  // Acc\xe9dez directement aux informations d'authentification depuis request.auth\n  reply.send({ auth: request.auth });\n});\n\nserver.get(\n  '/api/protected/detailed',\n  { preHandler: fastifyVerifyAccessToken },\n  (request, reply) => {\n    // Votre logique de point de terminaison prot\xe9g\xe9\n    reply.send({\n      auth: request.auth,\n      message: 'Donn\xe9es prot\xe9g\xe9es accessibles avec succ\xe8s',\n    });\n  }\n);\n\nfastify.listen({ port: 3000 });\n"})})}),(0,i.jsx)(s.A,{value:"hapi",label:"Hapi.js",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="app.ts"',children:"import Hapi from '@hapi/hapi';\nimport { hapiVerifyAccessToken } from './auth-middleware.js';\n\nconst server = Hapi.server({ port: 3000 });\n\nserver.route({\n  method: 'GET',\n  path: '/api/protected',\n  options: {\n    pre: [{ method: hapiVerifyAccessToken }],\n    handler: (request, h) => {\n      // Acc\xe9dez aux informations d'authentification depuis request.app.auth\n      return { auth: request.app.auth };\n    },\n  },\n});\n\nserver.route({\n  method: 'GET',\n  path: '/api/protected/detailed',\n  options: {\n    pre: [{ method: hapiVerifyAccessToken }],\n    handler: (request, h) => {\n      // Votre logique de point de terminaison prot\xe9g\xe9\n      return {\n        auth: request.app.auth,\n        message: 'Donn\xe9es prot\xe9g\xe9es accessibles avec succ\xe8s',\n      };\n    },\n  },\n});\n\nawait server.start();\n"})})}),(0,i.jsx)(s.A,{value:"nestjs",label:"NestJS",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",metastring:'title="protected.controller.ts"',children:"import { Controller, Get, UseGuards, Req } from '@nestjs/common';\nimport { AccessTokenGuard } from './access-token.guard.js';\n\n@Controller('api')\nexport class ProtectedController {\n  @Get('protected')\n  @UseGuards(AccessTokenGuard)\n  getProtected(@Req() req: any) {\n    // Acc\xe9dez aux informations d'authentification depuis req.auth\n    return { auth: req.auth };\n  }\n\n  @Get('protected/detailed')\n  @UseGuards(AccessTokenGuard)\n  getDetailedProtected(@Req() req: any) {\n    // Votre logique de point de terminaison prot\xe9g\xe9\n    return {\n      auth: req.auth,\n      message: 'Donn\xe9es prot\xe9g\xe9es accessibles avec succ\xe8s',\n    };\n  }\n}\n"})})})]})}function J(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(C,{...e})}):C(e)}var V=t(73231),N=t(1532),M=t(33435),$=t(46309),W=t(40181),O=t(56853);const F=[...$.RM,...O.RM,...W.RM];function H(e){return(0,i.jsxs)(a.A,{groupId:"api-framework",children:[(0,i.jsx)(s.A,{value:"laravel",label:(0,M.My)("laravel"),children:(0,i.jsx)($.Ay,{})}),(0,i.jsx)(s.A,{value:"symfony",label:(0,M.My)("symfony"),children:(0,i.jsx)(O.Ay,{})}),(0,i.jsx)(s.A,{value:"slim",label:(0,M.My)("slim"),children:(0,i.jsx)(W.Ay,{})})]})}function D(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(H,{...e})}):H()}var L=t(81068),U=t(54580),B=t(71323),K=t(54372),G=t(94498),Y=t(74839);const Q=[...G.RM,...Y.RM,...B.RM,...K.RM];function X(e){return(0,i.jsxs)(a.A,{groupId:"api-framework",children:[(0,i.jsx)(s.A,{value:"fastapi",label:(0,M.My)("fastapi"),children:(0,i.jsx)(G.Ay,{})}),(0,i.jsx)(s.A,{value:"flask",label:(0,M.My)("flask"),children:(0,i.jsx)(Y.Ay,{})}),(0,i.jsx)(s.A,{value:"django",label:(0,M.My)("django"),children:(0,i.jsx)(B.Ay,{})}),(0,i.jsx)(s.A,{value:"django-rest",label:(0,M.My)("django-rest"),children:(0,i.jsx)(K.Ay,{})})]})}function Z(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(X,{...e})}):X()}var ee=t(97304),ne=t(85732),te=t(93081),re=t(16315),ie=t(11972);const oe=[...re.RM,...ie.RM,...te.RM];function se(e){return(0,i.jsxs)(a.A,{groupId:"api-framework",children:[(0,i.jsx)(s.A,{value:"rails",label:(0,M.My)("rails"),children:(0,i.jsx)(re.Ay,{})}),(0,i.jsx)(s.A,{value:"sinatra",label:(0,M.My)("sinatra"),children:(0,i.jsx)(ie.Ay,{})}),(0,i.jsx)(s.A,{value:"grape",label:(0,M.My)("grape"),children:(0,i.jsx)(te.Ay,{})})]})}function ae(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(se,{...e})}):se()}var ce=t(29714),ue=t(45651),le=t(28342),de=t(86947),pe=t(34228);const he=[...de.RM,...le.RM,...pe.RM];function ge(e){return(0,i.jsxs)(a.A,{groupId:"api-framework",children:[(0,i.jsx)(s.A,{value:"axum",label:(0,M.My)("axum"),children:(0,i.jsx)(de.Ay,{})}),(0,i.jsx)(s.A,{value:"actix-web",label:(0,M.My)("actix-web"),children:(0,i.jsx)(le.Ay,{})}),(0,i.jsx)(s.A,{value:"rocket",label:(0,M.My)("rocket"),children:(0,i.jsx)(pe.Ay,{})})]})}function me(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(ge,{...e})}):ge()}var xe=t(21688);const fe={sidebar_position:6,sidebar_label:"Valider les jetons d\u2019acc\xe8s dans l\u2019API"},je="Comment valider les jetons d\u2019acc\xe8s dans votre service API ou backend",ve={},Ae=[{value:"Avant de commencer",id:"before-you-start",level:2},{value:"\xc9tape 1 : Initialiser les constantes et utilitaires",id:"step-1-initialize-constants-and-utilities",level:2},...d.RM,...V.RM,...ee.RM,...b.RM,...P.RM,...l.RM,...L.RM,...ce.RM,...xe.RM,{value:"\xc9tape 2 : R\xe9cup\xe9rer les informations sur votre tenant Logto",id:"step-2-retrieve-info-about-your-logto-tenant",level:2},...p.RM,{value:"\xc9tape 3 : Valider le jeton et les permissions",id:"step-3-validate-the-token-and-permissions",level:2},...g.RM,{value:"Ajouter la logique de validation",id:"add-the-validation-logic",level:3},...T.RM,...U.RM,...m.RM,...k.RM,...c.RM,...N.RM,...ne.RM,...ue.RM,{value:"\xc9tape 4 : Appliquer le middleware \xe0 votre API",id:"step-4-apply-middleware-to-your-api",level:2},...Q,...A,...R,...u.RM,...F,...oe,...he,{value:"\xc9tape 5 : Tester votre impl\xe9mentation",id:"step-5-test-your-implementation",level:2},...h.RM,{value:"Ressources associ\xe9es",id:"related-resources",level:2}];function ye(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components},{Url:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Url",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"comment-valider-les-jetons-dacc\xe8s-dans-votre-service-api-ou-backend",children:"Comment valider les jetons d\u2019acc\xe8s dans votre service API ou backend"})}),"\n",(0,i.jsx)(n.p,{children:"La validation des jetons d\u2019acc\xe8s (Access tokens) est une \xe9tape essentielle pour appliquer le contr\xf4le d\u2019acc\xe8s bas\xe9 sur les r\xf4les (RBAC) dans Logto. Ce guide vous accompagne dans la v\xe9rification des JWT \xe9mis par Logto dans votre backend / API, en contr\xf4lant la signature, l\u2019\xe9metteur (Issuer), l\u2019audience (Audience), l\u2019expiration, les permissions (Port\xe9es / Scopes), et le contexte d\u2019organisation."}),"\n",(0,i.jsx)(n.h2,{id:"before-you-start",children:"Avant de commencer"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ce guide suppose que vous \xeates familier avec les concepts RBAC de Logto."}),"\n",(0,i.jsxs)(n.li,{children:["Si vous prot\xe9gez des ressources API, ce guide suppose que vous avez suivi le guide ",(0,i.jsx)(n.a,{href:"/authorization/global-api-resources",children:"Prot\xe9ger les ressources API globales"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Si vous prot\xe9gez des fonctionnalit\xe9s ou des flux internes \xe0 l\u2019application (permissions non-API), ce guide suppose que vous avez suivi le guide ",(0,i.jsx)(n.a,{href:"/authorization/organization-permissions",children:"Prot\xe9ger les permissions d\u2019organisation (non-API)"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Si vous prot\xe9gez des ressources API au niveau organisation, ce guide suppose que vous avez suivi le guide ",(0,i.jsx)(n.a,{href:"/authorization/organization-level-api-resources",children:"Prot\xe9ger les ressources API au niveau organisation"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"step-1-initialize-constants-and-utilities",children:"\xc9tape 1 : Initialiser les constantes et utilitaires"}),"\n",(0,i.jsx)(d.Ay,{}),"\n",(0,i.jsxs)(a.A,{groupId:"api-language",children:[(0,i.jsx)(s.A,{value:"node",label:"Node.js",children:(0,i.jsx)(V.Ay,{})}),(0,i.jsx)(s.A,{value:"python",label:"Python",children:(0,i.jsx)(ee.Ay,{})}),(0,i.jsx)(s.A,{value:"go",label:"Go",children:(0,i.jsx)(b.Ay,{})}),(0,i.jsx)(s.A,{value:"java",label:"Java",children:(0,i.jsx)(P.Ay,{})}),(0,i.jsx)(s.A,{value:"dotnet",label:".NET",children:(0,i.jsx)(l.Ay,{})}),(0,i.jsx)(s.A,{value:"php",label:"PHP",children:(0,i.jsx)(L.Ay,{})}),(0,i.jsx)(s.A,{value:"ruby",label:"Ruby",children:(0,i.jsx)(ce.Ay,{})}),(0,i.jsx)(s.A,{value:"rust",label:"Rust",children:(0,i.jsx)(xe.Ay,{})})]}),"\n",(0,i.jsx)(n.h2,{id:"step-2-retrieve-info-about-your-logto-tenant",children:"\xc9tape 2 : R\xe9cup\xe9rer les informations sur votre tenant Logto"}),"\n",(0,i.jsx)(p.Ay,{}),"\n",(0,i.jsx)(n.h2,{id:"step-3-validate-the-token-and-permissions",children:"\xc9tape 3 : Valider le jeton et les permissions"}),"\n",(0,i.jsx)(g.Ay,{}),"\n",(0,i.jsx)(n.h3,{id:"add-the-validation-logic",children:"Ajouter la logique de validation"}),"\n",(0,i.jsxs)(a.A,{groupId:"api-language",children:[(0,i.jsx)(s.A,{value:"node",label:"Node.js",children:(0,i.jsx)(T.Ay,{})}),(0,i.jsx)(s.A,{value:"python",label:"Python",children:(0,i.jsx)(U.Ay,{})}),(0,i.jsx)(s.A,{value:"go",label:"Go",children:(0,i.jsx)(m.Ay,{})}),(0,i.jsx)(s.A,{value:"java",label:"Java",children:(0,i.jsx)(k.Ay,{})}),(0,i.jsx)(s.A,{value:"dotnet",label:".NET",children:(0,i.jsx)(c.Ay,{})}),(0,i.jsx)(s.A,{value:"php",label:"PHP",children:(0,i.jsx)(N.Ay,{})}),(0,i.jsx)(s.A,{value:"ruby",label:"Ruby",children:(0,i.jsx)(ne.Ay,{})}),(0,i.jsx)(s.A,{value:"rust",label:"Rust",children:(0,i.jsx)(ue.Ay,{})})]}),"\n",(0,i.jsx)(n.h2,{id:"step-4-apply-middleware-to-your-api",children:"\xc9tape 4 : Appliquer le middleware \xe0 votre API"}),"\n",(0,i.jsx)(n.p,{children:"Appliquez le middleware \xe0 vos routes API prot\xe9g\xe9es."}),"\n",(0,i.jsxs)(a.A,{groupId:"api-language",children:[(0,i.jsx)(s.A,{value:"node",label:"Node.js",children:(0,i.jsx)(J,{})}),(0,i.jsx)(s.A,{value:"python",label:"Python",children:(0,i.jsx)(Z,{})}),(0,i.jsx)(s.A,{value:"go",label:"Go",children:(0,i.jsx)(w,{})}),(0,i.jsx)(s.A,{value:"java",label:"Java",children:(0,i.jsx)(E,{})}),(0,i.jsx)(s.A,{value:"dotnet",label:".NET",children:(0,i.jsx)(u.Ay,{})}),(0,i.jsx)(s.A,{value:"php",label:"PHP",children:(0,i.jsx)(D,{})}),(0,i.jsx)(s.A,{value:"ruby",label:"Ruby",children:(0,i.jsx)(ae,{})}),(0,i.jsx)(s.A,{value:"rust",label:"Rust",children:(0,i.jsx)(me,{})})]}),"\n",(0,i.jsx)(n.h2,{id:"step-5-test-your-implementation",children:"\xc9tape 5 : Tester votre impl\xe9mentation"}),"\n",(0,i.jsx)(h.Ay,{}),"\n",(0,i.jsx)(n.h2,{id:"related-resources",children:"Ressources associ\xe9es"}),"\n",(0,i.jsx)(t,{href:"/developers/custom-token-claims",children:"Personnalisation des revendications de jeton"}),"\n",(0,i.jsx)(t,{href:"https://auth.wiki/jwt",children:"JSON Web Token (JWT)"}),"\n",(0,i.jsx)(t,{href:"https://openid.net/specs/openid-connect-discovery-1_0.html",children:(0,i.jsx)(n.p,{children:"OpenID Connect Discovery"})}),"\n",(0,i.jsx)(t,{href:"https://www.rfc-editor.org/rfc/rfc8707.html",children:"RFC 8707 : Indicateurs de ressource"})]})}function we(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(ye,{...e})}):ye(e)}},12684:(e,n,t)=>{t.d(n,{Ay:()=>u,RM:()=>a});var r=t(25105),i=t(79621),o=t(38552),s=t(22002);const a=[];function c(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Ajoutez le package NuGet requis pour l\u2019authentification JWT :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="8.0.0" />\n'})}),"\n",(0,r.jsx)(n.p,{children:"Cr\xe9ez un service de validation pour g\xe9rer la validation du jeton :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="JwtValidationService.cs"',children:'using System.Security.Claims;\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\nusing YourApiNamespace.Exceptions;\n\nnamespace YourApiNamespace.Services\n{\n    public interface IJwtValidationService\n    {\n        Task ValidateTokenAsync(TokenValidatedContext context);\n    }\n\n    public class JwtValidationService : IJwtValidationService\n    {\n        public async Task ValidateTokenAsync(TokenValidatedContext context)\n        {\n            var principal = context.Principal!;\n\n            try\n            {\n                // Ajoutez ici votre logique de validation bas\xe9e sur le mod\xe8le de permission\n                ValidatePayload(principal);\n            }\n            catch (AuthorizationException)\n            {\n                throw; // Relancer les exceptions d\'autorisation\n            }\n            catch (Exception ex)\n            {\n                throw new AuthorizationException($"\xc9chec de la validation du jeton : {ex.Message}", 401);\n            }\n        }\n\n        private void ValidatePayload(ClaimsPrincipal principal)\n        {\n            // Impl\xe9mentez ici votre logique de v\xe9rification bas\xe9e sur le mod\xe8le de permission\n            // Ceci sera d\xe9taill\xe9 dans la section sur les mod\xe8les de permission ci-dessous\n        }\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Configurez l\u2019authentification JWT dans votre ",(0,r.jsx)(n.code,{children:"Program.cs"})," :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="Program.cs"',children:'using Microsoft.AspNetCore.Authentication.JwtBearer;\nusing Microsoft.IdentityModel.Tokens;\nusing YourApiNamespace.Services;\nusing YourApiNamespace.Exceptions;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Ajoutez les services au conteneur\nbuilder.Services.AddControllers();\nbuilder.Services.AddScoped<IJwtValidationService, JwtValidationService>();\n\n// Configurez l\u2019authentification JWT\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddJwtBearer(options =>\n    {\n        options.Authority = AuthConstants.Issuer;\n        options.MetadataAddress = $"{AuthConstants.Issuer}/.well-known/openid-configuration";\n        options.RequireHttpsMetadata = true;\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            ValidateIssuer = true,\n            ValidIssuer = AuthConstants.Issuer,\n            ValidateAudience = false, // Nous validerons l\u2019audience manuellement selon le mod\xe8le de permission\n            ValidateLifetime = true,\n            ValidateIssuerSigningKey = true,\n            ClockSkew = TimeSpan.FromMinutes(5)\n        };\n\n        options.Events = new JwtBearerEvents\n        {\n            OnTokenValidated = async context =>\n            {\n                var validationService = context.HttpContext.RequestServices\n                    .GetRequiredService<IJwtValidationService>();\n\n                await validationService.ValidateTokenAsync(context);\n            },\n            OnAuthenticationFailed = context =>\n            {\n                // G\xe9rer les erreurs de la biblioth\xe8que JWT comme 401\n                context.Response.StatusCode = 401;\n                context.Response.ContentType = "application/json";\n                context.Response.WriteAsync($"{{\\"error\\": \\"Invalid token\\"}}");\n                context.HandleResponse();\n                return Task.CompletedTask;\n            }\n        };\n    });\n\nbuilder.Services.AddAuthorization();\n\nvar app = builder.Build();\n\n// Gestion globale des erreurs pour les \xe9checs d\u2019authentification / autorisation\napp.Use(async (context, next) =>\n{\n    try\n    {\n        await next();\n    }\n    catch (AuthorizationException ex)\n    {\n        context.Response.StatusCode = ex.StatusCode;\n        context.Response.ContentType = "application/json";\n        await context.Response.WriteAsync($"{{\\"error\\": \\"{ex.Message}\\"}}");\n    }\n});\n\n// Configurez le pipeline de requ\xeates HTTP\napp.UseAuthentication();\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Selon votre mod\xe8le de permission, impl\xe9mentez la logique de validation appropri\xe9e dans ",(0,r.jsx)(n.code,{children:"JwtValidationService"})," :"]}),"\n",(0,r.jsxs)(s.A,{groupId:"permission-models",children:[(0,r.jsx)(o.A,{value:"global-api-resources",label:"Ressources API globales",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="JwtValidationService.cs"',children:'private void ValidatePayload(ClaimsPrincipal principal)\n{\n    // V\xe9rifiez que la revendication d\u2019audience correspond \xe0 votre indicateur de ressource API\n    var audiences = principal.FindAll("aud").Select(c => c.Value).ToList();\n    if (!audiences.Contains("https://your-api-resource-indicator"))\n    {\n        throw new AuthorizationException("Audience invalide");\n    }\n\n    // V\xe9rifiez les port\xe9es requises pour les ressources API globales\n    var requiredScopes = new[] { "api:read", "api:write" }; // Remplacez par vos port\xe9es requises\n    var tokenScopes = principal.FindFirst("scope")?.Value?.Split(\' \') ?? Array.Empty<string>();\n\n    if (!requiredScopes.All(scope => tokenScopes.Contains(scope)))\n    {\n        throw new AuthorizationException("Port\xe9e insuffisante");\n    }\n}\n'})})}),(0,r.jsx)(o.A,{value:"organization-permissions",label:"Permissions d\u2019organisation (hors API)",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="JwtValidationService.cs"',children:'private void ValidatePayload(ClaimsPrincipal principal)\n{\n    // V\xe9rifiez que la revendication d\u2019audience correspond au format d\u2019organisation\n    var audiences = principal.FindAll("aud").Select(c => c.Value).ToList();\n    var hasOrgAudience = audiences.Any(aud => aud.StartsWith("urn:logto:organization:"));\n\n    if (!hasOrgAudience)\n    {\n        throw new AuthorizationException("Audience invalide pour les permissions d\u2019organisation");\n    }\n\n    // V\xe9rifiez que l\u2019ID d\u2019organisation correspond au contexte (vous devrez peut-\xeatre l\u2019extraire du contexte de la requ\xeate)\n    var expectedOrgId = "your-organization-id"; // \xc0 extraire du contexte de la requ\xeate\n    var expectedAud = $"urn:logto:organization:{expectedOrgId}";\n    if (!audiences.Contains(expectedAud))\n    {\n        throw new AuthorizationException("Incoh\xe9rence de l\u2019ID d\u2019organisation");\n    }\n\n    // V\xe9rifiez les port\xe9es requises pour l\u2019organisation\n    var requiredScopes = new[] { "invite:users", "manage:settings" }; // Remplacez par vos port\xe9es requises\n    var tokenScopes = principal.FindFirst("scope")?.Value?.Split(\' \') ?? Array.Empty<string>();\n\n    if (!requiredScopes.All(scope => tokenScopes.Contains(scope)))\n    {\n        throw new AuthorizationException("Port\xe9e d\u2019organisation insuffisante");\n    }\n}\n'})})}),(0,r.jsx)(o.A,{value:"organization-level-api-resources",label:"Ressources API au niveau organisation",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="JwtValidationService.cs"',children:'private void ValidatePayload(ClaimsPrincipal principal)\n{\n    // V\xe9rifiez que la revendication d\u2019audience correspond \xe0 votre indicateur de ressource API\n    var audiences = principal.FindAll("aud").Select(c => c.Value).ToList();\n    if (!audiences.Contains("https://your-api-resource-indicator"))\n    {\n        throw new AuthorizationException("Audience invalide pour les ressources API au niveau organisation");\n    }\n\n    // V\xe9rifiez que l\u2019ID d\u2019organisation correspond au contexte (vous devrez peut-\xeatre l\u2019extraire du contexte de la requ\xeate)\n    var expectedOrgId = "your-organization-id"; // \xc0 extraire du contexte de la requ\xeate\n    var orgId = principal.FindFirst("organization_id")?.Value;\n    if (!expectedOrgId.Equals(orgId))\n    {\n        throw new AuthorizationException("Incoh\xe9rence de l\u2019ID d\u2019organisation");\n    }\n\n    // V\xe9rifiez les port\xe9es requises pour les ressources API au niveau organisation\n    var requiredScopes = new[] { "api:read", "api:write" }; // Remplacez par vos port\xe9es requises\n    var tokenScopes = principal.FindFirst("scope")?.Value?.Split(\' \') ?? Array.Empty<string>();\n\n    if (!requiredScopes.All(scope => tokenScopes.Contains(scope)))\n    {\n        throw new AuthorizationException("Port\xe9es API au niveau organisation insuffisantes");\n    }\n}\n'})})})]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},37191:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Nous avons d\xe9j\xe0 configur\xe9 les middlewares d\u2019authentification (Authentication) et d\u2019autorisation (Authorization) dans les sections pr\xe9c\xe9dentes. Nous pouvons maintenant cr\xe9er un contr\xf4leur prot\xe9g\xe9 qui valide les jetons d\u2019acc\xe8s (Access tokens) et extrait les revendications (Claims) des requ\xeates authentifi\xe9es."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="ProtectedController.cs"',children:'using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Security.Claims;\n\nnamespace YourApiNamespace.Controllers\n{\n    [ApiController]\n    [Route("api/[controller]")]\n    [Authorize] // Exige l\u2019authentification pour toutes les actions de ce contr\xf4leur\n    public class ProtectedController : ControllerBase\n    {\n        [HttpGet]\n        public IActionResult GetProtectedData()\n        {\n            // Informations du jeton d\u2019acc\xe8s (Access token) directement depuis les revendications (Claims) de l\u2019utilisateur\n            var sub = User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? User.FindFirst("sub")?.Value;\n            var clientId = User.FindFirst("client_id")?.Value;\n            var organizationId = User.FindFirst("organization_id")?.Value;\n            var scopes = User.FindFirst("scope")?.Value?.Split(\' \') ?? Array.Empty<string>();\n            var audience = User.FindAll("aud").Select(c => c.Value).ToArray();\n\n            return Ok(new {\n                sub,\n                client_id = clientId,\n                organization_id = organizationId,\n                scopes,\n                audience\n            });\n        }\n\n        [HttpGet("claims")]\n        public IActionResult GetAllClaims()\n        {\n            // Retourne toutes les revendications (Claims) pour le d\xe9bogage / l\u2019inspection\n            var claims = User.Claims.Select(c => new { c.Type, c.Value }).ToList();\n            return Ok(new { claims });\n        }\n    }\n}\n'})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},81348:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="AuthConstants.cs"',children:'namespace YourApiNamespace\n{\n    public static class AuthConstants\n    {\n        public const string Issuer = "https://your-tenant.logto.app/oidc";\n    }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="AuthenticationExceptions.cs"',children:"namespace YourApiNamespace.Exceptions\n{\n    public class AuthorizationException : Exception\n    {\n        public int StatusCode { get; }\n\n        public AuthorizationException(string message, int statusCode = 403) : base(message)\n        {\n            StatusCode = statusCode;\n        }\n    }\n}\n"})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},41466:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",p:"p",...(0,i.R)(),...e.components};return(0,r.jsxs)(n.p,{children:["D\xe9finissez les constantes et utilitaires n\xe9cessaires dans votre code pour g\xe9rer l\u2019extraction et la validation du jeton. Une requ\xeate valide doit inclure un en-t\xeate ",(0,r.jsx)(n.code,{children:"Authorization"})," sous la forme ",(0,r.jsx)(n.code,{children:"Bearer <jeton d\u2019acc\xe8s (access token)>"}),"."]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},28503:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[{value:"R\xe9cup\xe9rer depuis l\u2019endpoint de d\xe9couverte OpenID Connect",id:"fetch-from-openid-connect-discovery-endpoint",level:3},{value:"Codage en dur dans votre code (non recommand\xe9)",id:"hardcode-in-your-code-not-recommended",level:3}];function s(e){const n={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Vous aurez besoin des valeurs suivantes pour valider les jetons \xe9mis par Logto :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"URI JSON Web Key Set (JWKS) : L\u2019URL vers les cl\xe9s publiques de Logto, utilis\xe9e pour v\xe9rifier les signatures JWT."}),"\n",(0,r.jsx)(n.li,{children:"\xc9metteur (Issuer) : La valeur attendue de l\u2019\xe9metteur (l\u2019URL OIDC de Logto)."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Commencez par trouver l\u2019endpoint de votre tenant Logto. Vous pouvez le trouver \xe0 diff\xe9rents endroits :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Dans la Console Logto, sous ",(0,r.jsx)(n.strong,{children:"Param\xe8tres"})," \u2192 ",(0,r.jsx)(n.strong,{children:"Domaines"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Dans les param\xe8tres de toute application que vous avez configur\xe9e dans Logto, ",(0,r.jsx)(n.strong,{children:"Param\xe8tres"})," \u2192 ",(0,r.jsx)(n.strong,{children:"Endpoints & Credentials"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"fetch-from-openid-connect-discovery-endpoint",children:"R\xe9cup\xe9rer depuis l\u2019endpoint de d\xe9couverte OpenID Connect"}),"\n",(0,r.jsx)(n.p,{children:"Ces valeurs peuvent \xeatre r\xe9cup\xe9r\xe9es depuis l\u2019endpoint de d\xe9couverte OpenID Connect de Logto :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"https://<your-logto-endpoint>/oidc/.well-known/openid-configuration\n"})}),"\n",(0,r.jsx)(n.p,{children:"Voici un exemple de r\xe9ponse (autres champs omis pour plus de clart\xe9) :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "jwks_uri": "https://your-tenant.logto.app/oidc/jwks",\n  "issuer": "https://your-tenant.logto.app/oidc"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"hardcode-in-your-code-not-recommended",children:"Codage en dur dans votre code (non recommand\xe9)"}),"\n",(0,r.jsx)(n.p,{children:"Puisque Logto ne permet pas de personnaliser l\u2019URI JWKS ou l\u2019\xe9metteur (Issuer), vous pouvez coder ces valeurs en dur dans votre code. Cependant, cela n\u2019est pas recommand\xe9 pour les applications en production, car cela peut augmenter la charge de maintenance si une configuration change \xe0 l\u2019avenir."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["URI JWKS : ",(0,r.jsx)(n.code,{children:"https://<your-logto-endpoint>/oidc/jwks"})]}),"\n",(0,r.jsxs)(n.li,{children:["\xc9metteur (Issuer) : ",(0,r.jsx)(n.code,{children:"https://<your-logto-endpoint>/oidc"})]}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},53830:(e,n,t)=>{t.d(n,{Ay:()=>u,RM:()=>a});var r=t(25105),i=t(79621),o=t(38552),s=t(22002);const a=[{value:"Obtenir des jetons d\u2019acc\xe8s (Access tokens)",id:"get-access-tokens",level:3},{value:"Tester les points de terminaison prot\xe9g\xe9s",id:"test-protected-endpoints",level:3},{value:"Tests sp\xe9cifiques au mod\xe8le de permission",id:"permission-model-specific-testing",level:3}];function c(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"get-access-tokens",children:"Obtenir des jetons d\u2019acc\xe8s (Access tokens)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Depuis votre application cliente :"}),(0,r.jsx)(n.br,{}),"\n","Si vous avez configur\xe9 une int\xe9gration client, votre application peut obtenir automatiquement les jetons. Extrayez le jeton d\u2019acc\xe8s (access token) et utilisez-le dans les requ\xeates API."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Pour tester avec curl / Postman :"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Jetons utilisateur :"})," Utilisez les outils d\xe9veloppeur de votre application cliente pour copier le jeton d\u2019acc\xe8s depuis le localStorage ou l\u2019onglet r\xe9seau."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Jetons machine \xe0 machine :"})," Utilisez le flux d\u2019identifiants client (client credentials flow). Voici un exemple non normatif utilisant curl :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -X POST https://your-tenant.logto.app/oidc/token \\\n  -H "Content-Type: application/x-www-form-urlencoded" \\\n  -d "grant_type=client_credentials" \\\n  -d "client_id=your-m2m-client-id" \\\n  -d "client_secret=your-m2m-client-secret" \\\n  -d "resource=https://your-api-resource-indicator" \\\n  -d "scope=api:read api:write"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Vous devrez peut-\xeatre ajuster les param\xe8tres ",(0,r.jsx)(n.code,{children:"resource"})," et ",(0,r.jsx)(n.code,{children:"scope"})," selon votre ressource API (API resource) et vos permissions ; un param\xe8tre ",(0,r.jsx)(n.code,{children:"organization_id"})," peut \xe9galement \xeatre requis si votre API est li\xe9e \xe0 une organisation."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["Besoin d\u2019inspecter le contenu du jeton ? Utilisez notre ",(0,r.jsx)(n.a,{href:"https://logto.io/jwt-decoder",children:"d\xe9codificateur JWT"})," pour d\xe9coder et v\xe9rifier vos JWT."]})}),"\n",(0,r.jsx)(n.h3,{id:"test-protected-endpoints",children:"Tester les points de terminaison prot\xe9g\xe9s"}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)(n.strong,{children:"Requ\xeate avec jeton valide"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -H "Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..." \\\n  http://localhost:3000/api/protected\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"R\xe9ponse attendue :"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "auth": {\n    "sub": "user123",\n    "clientId": "app456",\n    "organizationId": "org789",\n    "scopes": ["api:read", "api:write"],\n    "audience": ["https://your-api-resource-indicator"]\n  }\n}\n'})})]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)(n.strong,{children:"Jeton manquant"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"curl http://localhost:3000/api/protected\n"})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"R\xe9ponse attendue (401) :"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Authorization header is missing"\n}\n'})})]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)(n.strong,{children:"Jeton invalide"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -H "Authorization: Bearer invalid-token" \\\n  http://localhost:3000/api/protected\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"R\xe9ponse attendue (401) :"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Invalid token"\n}\n'})})]}),"\n",(0,r.jsx)(n.h3,{id:"permission-model-specific-testing",children:"Tests sp\xe9cifiques au mod\xe8le de permission"}),"\n",(0,r.jsxs)(s.A,{groupId:"permission-models",children:[(0,r.jsxs)(o.A,{value:"global-api-resources",label:"Ressources API globales",children:[(0,r.jsx)(n.p,{children:"Sc\xe9narios de test pour les API prot\xe9g\xe9es par des port\xe9es globales :"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Port\xe9es valides :"})," Testez avec des jetons qui incluent les port\xe9es API requises (par exemple, ",(0,r.jsx)(n.code,{children:"api:read"}),", ",(0,r.jsx)(n.code,{children:"api:write"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Port\xe9es manquantes :"})," Attendez-vous \xe0 une r\xe9ponse ",(0,r.jsx)(n.strong,{children:"403 Interdit"})," si le jeton ne contient pas les port\xe9es requises"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Audience incorrecte :"})," Attendez-vous \xe0 une r\xe9ponse ",(0,r.jsx)(n.strong,{children:"403 Interdit"})," si l\u2019audience ne correspond pas \xe0 la ressource API"]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Jeton sans les port\xe9es requises - attendre 403\ncurl -H "Authorization: Bearer token-without-required-scopes" \\\n  http://localhost:3000/api/protected\n'})})]}),(0,r.jsxs)(o.A,{value:"organization-permissions",label:"Permissions d\u2019organisation (hors API)",children:[(0,r.jsx)(n.p,{children:"Sc\xe9narios de test pour le contr\xf4le d\u2019acc\xe8s sp\xe9cifique \xe0 une organisation :"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Jeton d\u2019organisation valide :"})," Testez avec des jetons qui incluent le bon contexte d\u2019organisation (ID d\u2019organisation et port\xe9es)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Port\xe9es manquantes :"})," Attendez-vous \xe0 une r\xe9ponse ",(0,r.jsx)(n.strong,{children:"403 Interdit"})," si l\u2019utilisateur n\u2019a pas les permissions pour l\u2019action demand\xe9e"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mauvaise organisation :"})," Attendez-vous \xe0 une r\xe9ponse ",(0,r.jsx)(n.strong,{children:"403 Interdit"})," si l\u2019audience ne correspond pas au contexte d\u2019organisation (",(0,r.jsx)(n.code,{children:"urn:logto:organization:<organization_id>"}),")"]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Jeton pour une mauvaise organisation - attendre 403\ncurl -H "Authorization: Bearer token-for-different-organization" \\\n  http://localhost:3000/api/protected\n'})})]}),(0,r.jsxs)(o.A,{value:"organization-level-api-resources",label:"Ressources API au niveau organisation",children:[(0,r.jsx)(n.p,{children:"Sc\xe9narios de test combinant la validation de ressource API avec le contexte d\u2019organisation :"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Organisation valide + port\xe9es API :"})," Testez avec des jetons ayant \xe0 la fois le contexte d\u2019organisation et les port\xe9es API requises"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Port\xe9es API manquantes :"})," Attendez-vous \xe0 une r\xe9ponse ",(0,r.jsx)(n.strong,{children:"403 Interdit"})," si le jeton d\u2019organisation ne poss\xe8de pas les permissions API requises"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mauvaise organisation :"})," Attendez-vous \xe0 une r\xe9ponse ",(0,r.jsx)(n.strong,{children:"403 Interdit"})," lors de l\u2019acc\xe8s \xe0 l\u2019API avec un jeton d\u2019une autre organisation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Audience incorrecte :"})," Attendez-vous \xe0 une r\xe9ponse ",(0,r.jsx)(n.strong,{children:"403 Interdit"})," si l\u2019audience ne correspond pas \xe0 la ressource API au niveau organisation"]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Jeton d\u2019organisation sans port\xe9es API - attendre 403\ncurl -H "Authorization: Bearer organization-token-without-api-scopes" \\\n  http://localhost:3000/api/protected\n'})})]})]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},12128:(e,n,t)=>{t.d(n,{Ay:()=>u,RM:()=>a});var r=t(25105),i=t(79621),o=t(38552),s=t(22002);const a=[{value:"\xc0 v\xe9rifier selon chaque mod\xe8le de permission",id:"what-to-check-for-each-permission-model",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Apr\xe8s avoir extrait le jeton et r\xe9cup\xe9r\xe9 la configuration OIDC, validez les \xe9l\xe9ments suivants :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Signature :"})," Le JWT doit \xeatre valide et sign\xe9 par Logto (via JWKS)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"\xc9metteur (Issuer) :"})," Doit correspondre \xe0 l\u2019\xe9metteur de votre tenant Logto."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Audience (Audience) :"})," Doit correspondre \xe0 l\u2019indicateur de ressource de l\u2019API enregistr\xe9 dans Logto, ou au contexte d\u2019organisation si applicable."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Expiration :"})," Le jeton ne doit pas \xeatre expir\xe9."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Permissions (Port\xe9es / scopes) :"})," Le jeton doit inclure les port\xe9es requises pour votre API / action. Les port\xe9es sont des cha\xeenes s\xe9par\xe9es par des espaces dans la revendication ",(0,r.jsx)(n.code,{children:"scope"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Contexte d\u2019organisation :"})," Si vous prot\xe9gez des ressources API au niveau organisation, validez la revendication ",(0,r.jsx)(n.code,{children:"organization_id"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Consultez ",(0,r.jsx)(n.a,{href:"https://auth.wiki/jwt",children:"JSON Web Token"})," pour en savoir plus sur la structure et les revendications des JWT."]}),"\n",(0,r.jsx)(n.h3,{id:"what-to-check-for-each-permission-model",children:"\xc0 v\xe9rifier selon chaque mod\xe8le de permission"}),"\n",(0,r.jsxs)(s.A,{groupId:"permission-models",children:[(0,r.jsx)(o.A,{value:"global-api-resources",label:"Ressources API globales",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Revendication Audience (",(0,r.jsx)(n.code,{children:"aud"}),") :"]})," Indicateur de ressource API"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Revendication Organisation (",(0,r.jsx)(n.code,{children:"organization_id"}),") :"]})," ",(0,r.jsx)(n.em,{children:"Non pr\xe9sent"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Port\xe9es (permissions) \xe0 v\xe9rifier (",(0,r.jsx)(n.code,{children:"scope"}),") :"]})," Permissions de ressource API"]}),"\n"]})}),(0,r.jsx)(o.A,{value:"organization-permissions",label:"Permissions d'organisation (hors API)",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Revendication Audience (",(0,r.jsx)(n.code,{children:"aud"}),") :"]})," ",(0,r.jsx)(n.code,{children:"urn:logto:organization:<id>"})," (le contexte d'organisation est dans ",(0,r.jsx)(n.code,{children:"aud"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Revendication Organisation (",(0,r.jsx)(n.code,{children:"organization_id"}),") :"]})," ",(0,r.jsx)(n.em,{children:"Non pr\xe9sent"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Port\xe9es (permissions) \xe0 v\xe9rifier (",(0,r.jsx)(n.code,{children:"scope"}),") :"]})," Permissions d'organisation"]}),"\n"]})}),(0,r.jsx)(o.A,{value:"organization-level-api-resources",label:"Ressources API au niveau organisation",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Revendication Audience (",(0,r.jsx)(n.code,{children:"aud"}),") :"]})," Indicateur de ressource API"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Revendication Organisation (",(0,r.jsx)(n.code,{children:"organization_id"}),") :"]})," ID de l'organisation (doit correspondre \xe0 la requ\xeate)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Port\xe9es (permissions) \xe0 v\xe9rifier (",(0,r.jsx)(n.code,{children:"scope"}),") :"]})," Permissions de ressource API"]}),"\n"]})})]}),"\n",(0,r.jsx)("small",{children:(0,r.jsxs)(n.p,{children:["Pour les permissions d\u2019organisation hors API, le contexte d\u2019organisation est repr\xe9sent\xe9 par la\nrevendication ",(0,r.jsx)(n.code,{children:"aud"})," (par exemple, ",(0,r.jsx)(n.code,{children:"urn:logto:organization:abc123"}),"). La revendication\n",(0,r.jsx)(n.code,{children:"organization_id"})," n\u2019est pr\xe9sente que pour les jetons de ressource API au niveau organisation."]})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"Validez toujours \xe0 la fois les permissions (port\xe9es / scopes) et le contexte (audience, organisation) pour s\xe9curiser les API multi-tenant."})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},88926:(e,n,t)=>{t.d(n,{Ay:()=>m,RM:()=>h});var r=t(25105),i=t(79621),o=t(33435),s=t(38552),a=t(22002);function c(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="auth_middleware.go"',children:'import (\n    "context"\n    "encoding/json"\n    "net/http"\n)\n\ntype contextKey string\n\nconst AuthContextKey contextKey = "auth"\n\nfunc VerifyAccessToken(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        tokenString, err := extractBearerTokenFromHeaders(r)\n        if err != nil {\n            authErr := err.(*AuthorizationError)\n            w.Header().Set("Content-Type", "application/json")\n            w.WriteHeader(authErr.Status)\n            json.NewEncoder(w).Encode(map[string]string{"error": authErr.Message})\n            return\n        }\n\n        token, err := validateJWT(tokenString)\n        if err != nil {\n            authErr := err.(*AuthorizationError)\n            w.Header().Set("Content-Type", "application/json")\n            w.WriteHeader(authErr.Status)\n            json.NewEncoder(w).Encode(map[string]string{"error": authErr.Message})\n            return\n        }\n\n        // Stocker le jeton dans le contexte pour une utilisation g\xe9n\xe9rique\n        ctx := context.WithValue(r.Context(), AuthContextKey, token)\n        next.ServeHTTP(w, r.WithContext(ctx))\n    })\n}\n'})})}function u(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="auth_middleware.go"',children:'import "github.com/labstack/echo/v4"\n\nfunc VerifyAccessToken(next echo.HandlerFunc) echo.HandlerFunc {\n    return func(c echo.Context) error {\n        tokenString, err := extractBearerTokenFromHeaders(c.Request())\n        if err != nil {\n            authErr := err.(*AuthorizationError)\n            return c.JSON(authErr.Status, echo.Map{"error": authErr.Message})\n        }\n\n        token, err := validateJWT(tokenString)\n        if err != nil {\n            authErr := err.(*AuthorizationError)\n            return c.JSON(authErr.Status, echo.Map{"error": authErr.Message})\n        }\n\n        // Stocker le jeton dans le contexte pour une utilisation g\xe9n\xe9rique (Store token in context for generic use)\n        c.Set("auth", token)\n        return next(c)\n    }\n}\n'})})}function l(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="auth_middleware.go"',children:'import (\n    "net/http"\n    "github.com/gofiber/fiber/v2"\n)\n\nfunc VerifyAccessToken(c *fiber.Ctx) error {\n    // Convertir la requ\xeate fiber en http.Request pour la compatibilit\xe9\n    req := &http.Request{\n        Header: make(http.Header),\n    }\n    req.Header.Set("Authorization", c.Get("Authorization"))\n\n    tokenString, err := extractBearerTokenFromHeaders(req)\n    if err != nil {\n        authErr := err.(*AuthorizationError)\n        return c.Status(authErr.Status).JSON(fiber.Map{"error": authErr.Message})\n    }\n\n    token, err := validateJWT(tokenString)\n    if err != nil {\n        authErr := err.(*AuthorizationError)\n        return c.Status(authErr.Status).JSON(fiber.Map{"error": authErr.Message})\n    }\n\n    // Stocker le jeton dans locals pour une utilisation g\xe9n\xe9rique\n    c.Locals("auth", token)\n    return c.Next()\n}\n'})})}function d(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="auth_middleware.go"',children:'import "github.com/gin-gonic/gin"\n\nfunc VerifyAccessToken() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        tokenString, err := extractBearerTokenFromHeaders(c.Request)\n        if err != nil {\n            authErr := err.(*AuthorizationError)\n            c.JSON(authErr.Status, gin.H{"error": authErr.Message})\n            c.Abort()\n            return\n        }\n\n        token, err := validateJWT(tokenString)\n        if err != nil {\n            authErr := err.(*AuthorizationError)\n            c.JSON(authErr.Status, gin.H{"error": authErr.Message})\n            c.Abort()\n            return\n        }\n\n        // Stocker le jeton dans le contexte pour une utilisation g\xe9n\xe9rique (Store token in context for generic use)\n        c.Set("auth", token)\n        c.Next()\n    }\n}\n'})})}const p=Object.freeze({gin:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}),{}),fiber:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}),{}),echo:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}),{}),chi:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}),{})}),h=[];function g(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Nous utilisons ",(0,r.jsx)(n.a,{href:"https://github.com/lestrrat-go/jwx",children:"github.com/lestrrat-go/jwx"})," pour valider les JWT. Installez-le si ce n'est pas d\xe9j\xe0 fait :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"go mod init your-project\ngo get github.com/lestrrat-go/jwx/v3\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Commencez par ajouter ces composants partag\xe9s \xe0 votre fichier ",(0,r.jsx)(n.code,{children:"auth_middleware.go"})," :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="auth_middleware.go"',children:'import (\n    "context"\n    "strings"\n    "time"\n\n    "github.com/lestrrat-go/jwx/v3/jwk"\n    "github.com/lestrrat-go/jwx/v3/jwt"\n)\n\nvar jwkSet jwk.Set\n\nfunc init() {\n    // Initialiser le cache JWKS\n    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n    defer cancel()\n\n    var err error\n    jwkSet, err = jwk.Fetch(ctx, JWKS_URI)\n    if err != nil {\n        panic("\xc9chec de la r\xe9cup\xe9ration du JWKS : " + err.Error())\n    }\n}\n\n// validateJWT valide le JWT et retourne le jeton analys\xe9\nfunc validateJWT(tokenString string) (jwt.Token, error) {\n    token, err := jwt.Parse([]byte(tokenString), jwt.WithKeySet(jwkSet))\n    if err != nil {\n        return nil, NewAuthorizationError("Jeton invalide : "+err.Error(), http.StatusUnauthorized)\n    }\n\n    // V\xe9rifier l\'\xe9metteur\n    if token.Issuer() != ISSUER {\n        return nil, NewAuthorizationError("\xc9metteur invalide", http.StatusUnauthorized)\n    }\n\n    if err := verifyPayload(token); err != nil {\n        return nil, err\n    }\n\n    return token, nil\n}\n\n// Fonctions utilitaires pour extraire les donn\xe9es du jeton\nfunc getStringClaim(token jwt.Token, key string) string {\n    if val, ok := token.Get(key); ok {\n        if str, ok := val.(string); ok {\n            return str\n        }\n    }\n    return ""\n}\n\nfunc getScopesFromToken(token jwt.Token) []string {\n    if val, ok := token.Get("scope"); ok {\n        if scope, ok := val.(string); ok && scope != "" {\n            return strings.Split(scope, " ")\n        }\n    }\n    return []string{}\n}\n\nfunc getAudienceFromToken(token jwt.Token) []string {\n    return token.Audience()\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Ensuite, impl\xe9mentez le middleware pour v\xe9rifier le jeton d\u2019acc\xe8s (access token) :"}),"\n",e.framework?p[e.framework]:(0,r.jsx)(a.A,{groupId:"api-framework",children:Object.entries(p).map((([e,n])=>(0,r.jsx)(s.A,{value:e,label:(0,o.My)(e),children:n},e)))}),"\n",(0,r.jsxs)(n.p,{children:["Selon votre mod\xe8le de permissions, vous devrez peut-\xeatre adopter une logique diff\xe9rente pour ",(0,r.jsx)(n.code,{children:"verifyPayload"})," :"]}),"\n",(0,r.jsxs)(a.A,{groupId:"permission-models",children:[(0,r.jsx)(s.A,{value:"global-api-resources",label:"Ressources API globales",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="auth_middleware.go"',children:'func verifyPayload(token jwt.Token) error {\n    // V\xe9rifier que la revendication d\'audience correspond \xe0 votre indicateur de ressource API\n    if !hasAudience(token, "https://your-api-resource-indicator") {\n        return NewAuthorizationError("Audience invalide")\n    }\n\n    // V\xe9rifier les port\xe9es requises pour les ressources API globales\n    requiredScopes := []string{"api:read", "api:write"} // Remplacez par vos port\xe9es requises\n    if !hasRequiredScopes(token, requiredScopes) {\n        return NewAuthorizationError("Port\xe9e insuffisante")\n    }\n\n    return nil\n}\n'})})}),(0,r.jsx)(s.A,{value:"organization-permissions",label:"Permissions d\u2019organisation (hors API)",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="auth_middleware.go"',children:'func verifyPayload(token jwt.Token) error {\n    // V\xe9rifier que la revendication d\'audience correspond au format d\'organisation\n    if !hasOrganizationAudience(token) {\n        return NewAuthorizationError("Audience invalide pour les permissions d\'organisation")\n    }\n\n    // V\xe9rifier que l\'ID d\'organisation correspond au contexte (vous devrez peut-\xeatre l\'extraire du contexte de la requ\xeate)\n    expectedOrgID := "your-organization-id" // \xc0 extraire du contexte de la requ\xeate\n    if !hasMatchingOrganization(token, expectedOrgID) {\n        return NewAuthorizationError("ID d\'organisation non correspondant")\n    }\n\n    // V\xe9rifier les port\xe9es requises pour l\'organisation\n    requiredScopes := []string{"invite:users", "manage:settings"} // Remplacez par vos port\xe9es requises\n    if !hasRequiredScopes(token, requiredScopes) {\n        return NewAuthorizationError("Port\xe9e d\'organisation insuffisante")\n    }\n\n    return nil\n}\n'})})}),(0,r.jsx)(s.A,{value:"organization-level-api-resources",label:"Ressources API au niveau de l\u2019organisation",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="auth_middleware.go"',children:'func verifyPayload(token jwt.Token) error {\n    // V\xe9rifier que la revendication d\'audience correspond \xe0 votre indicateur de ressource API\n    if !hasAudience(token, "https://your-api-resource-indicator") {\n        return NewAuthorizationError("Audience invalide pour les ressources API au niveau de l\'organisation")\n    }\n\n    // V\xe9rifier que l\'ID d\'organisation correspond au contexte (vous devrez peut-\xeatre l\'extraire du contexte de la requ\xeate)\n    expectedOrgID := "your-organization-id" // \xc0 extraire du contexte de la requ\xeate\n    if !hasMatchingOrganizationID(token, expectedOrgID) {\n        return NewAuthorizationError("ID d\'organisation non correspondant")\n    }\n\n    // V\xe9rifier les port\xe9es requises pour les ressources API au niveau de l\'organisation\n    requiredScopes := []string{"api:read", "api:write"} // Remplacez par vos port\xe9es requises\n    if !hasRequiredScopes(token, requiredScopes) {\n        return NewAuthorizationError("Port\xe9es API au niveau de l\'organisation insuffisantes")\n    }\n\n    return nil\n}\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"Ajoutez ces fonctions utilitaires pour la v\xe9rification du payload :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="auth_middleware.go"',children:'// hasAudience v\xe9rifie si le jeton poss\xe8de l\'audience sp\xe9cifi\xe9e\nfunc hasAudience(token jwt.Token, expectedAud string) bool {\n    audiences := token.Audience()\n    for _, aud := range audiences {\n        if aud == expectedAud {\n            return true\n        }\n    }\n    return false\n}\n\n// hasOrganizationAudience v\xe9rifie si le jeton poss\xe8de une audience au format organisation\nfunc hasOrganizationAudience(token jwt.Token) bool {\n    audiences := token.Audience()\n    for _, aud := range audiences {\n        if strings.HasPrefix(aud, "urn:logto:organization:") {\n            return true\n        }\n    }\n    return false\n}\n\n// hasRequiredScopes v\xe9rifie si le jeton poss\xe8de toutes les port\xe9es requises\nfunc hasRequiredScopes(token jwt.Token, requiredScopes []string) bool {\n    scopes := getScopesFromToken(token)\n    for _, required := range requiredScopes {\n        found := false\n        for _, scope := range scopes {\n            if scope == required {\n                found = true\n                break\n            }\n        }\n        if !found {\n            return false\n        }\n    }\n    return true\n}\n\n// hasMatchingOrganization v\xe9rifie si l\'audience du jeton correspond \xe0 l\'organisation attendue\nfunc hasMatchingOrganization(token jwt.Token, expectedOrgID string) bool {\n    expectedAud := fmt.Sprintf("urn:logto:organization:%s", expectedOrgID)\n    return hasAudience(token, expectedAud)\n}\n\n// hasMatchingOrganizationID v\xe9rifie si organization_id du jeton correspond \xe0 celui attendu\nfunc hasMatchingOrganizationID(token jwt.Token, expectedOrgID string) bool {\n    orgID := getStringClaim(token, "organization_id")\n    return orgID == expectedOrgID\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},67292:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="auth_middleware.go"',children:'package main\n\nimport (\n    "fmt"\n    "net/http"\n    "strings"\n)\n\nconst (\n    JWKS_URI = "https://your-tenant.logto.app/oidc/jwks"\n    ISSUER   = "https://your-tenant.logto.app/oidc"\n)\n\ntype AuthorizationError struct {\n    Message string\n    Status  int\n}\n\nfunc (e *AuthorizationError) Error() string {\n    return e.Message\n}\n\nfunc NewAuthorizationError(message string, status ...int) *AuthorizationError {\n    statusCode := http.StatusForbidden // Par d\xe9faut \xe0 403 Interdit\n    if len(status) > 0 {\n        statusCode = status[0]\n    }\n    return &AuthorizationError{\n        Message: message,\n        Status:  statusCode,\n    }\n}\n\nfunc extractBearerTokenFromHeaders(r *http.Request) (string, error) {\n    const bearerPrefix = "Bearer "\n\n    authorization := r.Header.Get("Authorization")\n    if authorization == "" {\n        return "", NewAuthorizationError("L\'en-t\xeate Authorization est manquant", http.StatusUnauthorized)\n    }\n\n    if !strings.HasPrefix(authorization, bearerPrefix) {\n        return "", NewAuthorizationError(fmt.Sprintf("L\'en-t\xeate Authorization doit commencer par \\"%s\\"", bearerPrefix), http.StatusUnauthorized)\n    }\n\n    return strings.TrimPrefix(authorization, bearerPrefix), nil\n}\n'})})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},33306:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="main.go"',children:'package main\n\nimport (\n    "encoding/json"\n    "net/http"\n\n    "github.com/go-chi/chi/v5"\n    "github.com/lestrrat-go/jwx/v3/jwt"\n)\n\nfunc main() {\n    r := chi.NewRouter()\n\n    // Appliquer le middleware aux routes prot\xe9g\xe9es\n    r.With(VerifyAccessToken).Get("/api/protected", func(w http.ResponseWriter, r *http.Request) {\n        // Informations du jeton d\u2019acc\xe8s (Access token) directement depuis le contexte\n        tokenInterface := r.Context().Value(AuthContextKey)\n        if tokenInterface == nil {\n            w.Header().Set("Content-Type", "application/json")\n            w.WriteHeader(http.StatusInternalServerError)\n            json.NewEncoder(w).Encode(map[string]string{"error": "Token not found"})\n            return\n        }\n\n        token := tokenInterface.(jwt.Token)\n\n        w.Header().Set("Content-Type", "application/json")\n        json.NewEncoder(w).Encode(map[string]interface{}{\n            "sub":             token.Subject(),\n            "client_id":       getStringClaim(token, "client_id"),\n            "organization_id": getStringClaim(token, "organization_id"),\n            "scopes":          getScopesFromToken(token),\n            "audience":        getAudienceFromToken(token),\n        })\n    })\n\n    http.ListenAndServe(":8080", r)\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Ou en utilisant des groupes de routes :"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="main.go"',children:'package main\n\nimport (\n    "encoding/json"\n    "net/http"\n\n    "github.com/go-chi/chi/v5"\n    "github.com/lestrrat-go/jwx/v3/jwt"\n)\n\nfunc main() {\n    r := chi.NewRouter()\n\n    // Cr\xe9er un groupe de routes prot\xe9g\xe9es\n    r.Route("/api", func(r chi.Router) {\n        r.Use(VerifyAccessToken)\n        r.Get("/protected", func(w http.ResponseWriter, r *http.Request) {\n            // Informations du jeton d\u2019acc\xe8s (Access token) directement depuis le contexte\n            token := r.Context().Value(AuthContextKey).(jwt.Token)\n\n            w.Header().Set("Content-Type", "application/json")\n            json.NewEncoder(w).Encode(map[string]interface{}{\n                "sub":             token.Subject(),\n                "client_id":       getStringClaim(token, "client_id"),\n                "organization_id": getStringClaim(token, "organization_id"),\n                "scopes":          getScopesFromToken(token),\n                "audience":        getAudienceFromToken(token),\n                "message":         "Donn\xe9es prot\xe9g\xe9es accessibles avec succ\xe8s",\n            })\n        })\n    })\n\n    http.ListenAndServe(":8080", r)\n}\n'})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},38937:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="main.go"',children:'package main\n\nimport (\n    "net/http"\n\n    "github.com/labstack/echo/v4"\n    "github.com/lestrrat-go/jwx/v3/jwt"\n)\n\nfunc main() {\n    e := echo.New()\n\n    // Appliquer le middleware aux routes prot\xe9g\xe9es\n    e.GET("/api/protected", func(c echo.Context) error {\n        // Informations du jeton d\u2019acc\xe8s (Access token) accessibles directement depuis le contexte\n        tokenInterface := c.Get("auth")\n        if tokenInterface == nil {\n            return c.JSON(http.StatusInternalServerError, echo.Map{"error": "Token not found"})\n        }\n\n        token := tokenInterface.(jwt.Token)\n\n        return c.JSON(http.StatusOK, echo.Map{\n            "sub":             token.Subject(),\n            "client_id":       getStringClaim(token, "client_id"),\n            "organization_id": getStringClaim(token, "organization_id"),\n            "scopes":          getScopesFromToken(token),\n            "audience":        getAudienceFromToken(token),\n        })\n    }, VerifyAccessToken)\n\n    e.Start(":8080")\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Ou en utilisant des groupes de routes :"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="main.go"',children:'package main\n\nimport (\n    "github.com/labstack/echo/v4"\n    "github.com/lestrrat-go/jwx/v3/jwt"\n)\n\nfunc main() {\n    e := echo.New()\n\n    // Cr\xe9er un groupe de routes prot\xe9g\xe9es\n    api := e.Group("/api", VerifyAccessToken)\n    api.GET("/protected", func(c echo.Context) error {\n        // Informations du jeton d\u2019acc\xe8s (Access token) accessibles directement depuis le contexte\n        token := c.Get("auth").(jwt.Token)\n\n        return c.JSON(200, echo.Map{\n            "sub":             token.Subject(),\n            "client_id":       getStringClaim(token, "client_id"),\n            "organization_id": getStringClaim(token, "organization_id"),\n            "scopes":          getScopesFromToken(token),\n            "audience":        getAudienceFromToken(token),\n            "message":         "Donn\xe9es prot\xe9g\xe9es accessibles avec succ\xe8s",\n        })\n    })\n\n    e.Start(":8080")\n}\n'})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},76766:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="main.go"',children:'package main\n\nimport (\n    "github.com/gofiber/fiber/v2"\n    "github.com/lestrrat-go/jwx/v3/jwt"\n)\n\nfunc main() {\n    app := fiber.New()\n\n    // Appliquer le middleware aux routes prot\xe9g\xe9es\n    app.Get("/api/protected", VerifyAccessToken, func(c *fiber.Ctx) error {\n        // Informations du jeton d\u2019acc\xe8s directement depuis locals\n        tokenInterface := c.Locals("auth")\n        if tokenInterface == nil {\n            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Token not found"})\n        }\n\n        token := tokenInterface.(jwt.Token)\n\n        return c.JSON(fiber.Map{\n            "sub":             token.Subject(),\n            "client_id":       getStringClaim(token, "client_id"),\n            "organization_id": getStringClaim(token, "organization_id"),\n            "scopes":          getScopesFromToken(token),\n            "audience":        getAudienceFromToken(token),\n        })\n    })\n\n    app.Listen(":8080")\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Ou en utilisant des groupes de routes :"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="main.go"',children:'package main\n\nimport (\n    "github.com/gofiber/fiber/v2"\n    "github.com/lestrrat-go/jwx/v3/jwt"\n)\n\nfunc main() {\n    app := fiber.New()\n\n    // Cr\xe9er un groupe de routes prot\xe9g\xe9es\n    api := app.Group("/api", VerifyAccessToken)\n    api.Get("/protected", func(c *fiber.Ctx) error {\n        // Informations du jeton d\u2019acc\xe8s directement depuis locals\n        token := c.Locals("auth").(jwt.Token)\n\n        return c.JSON(fiber.Map{\n            "sub":             token.Subject(),\n            "client_id":       getStringClaim(token, "client_id"),\n            "organization_id": getStringClaim(token, "organization_id"),\n            "scopes":          getScopesFromToken(token),\n            "audience":        getAudienceFromToken(token),\n            "message":         "Donn\xe9es prot\xe9g\xe9es accessibles avec succ\xe8s",\n        })\n    })\n\n    app.Listen(":8080")\n}\n'})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},45402:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="main.go"',children:'package main\n\nimport (\n    "net/http"\n\n    "github.com/gin-gonic/gin"\n    "github.com/lestrrat-go/jwx/v3/jwt"\n)\n\nfunc main() {\n    r := gin.Default()\n\n    // Appliquer le middleware aux routes prot\xe9g\xe9es\n    r.GET("/api/protected", VerifyAccessToken(), func(c *gin.Context) {\n        // Informations du jeton d\u2019acc\xe8s (Access token) directement depuis le contexte\n        tokenInterface, exists := c.Get("auth")\n        if !exists {\n            c.JSON(http.StatusInternalServerError, gin.H{"error": "Token not found"})\n            return\n        }\n\n        token := tokenInterface.(jwt.Token)\n\n        c.JSON(http.StatusOK, gin.H{\n            "sub":             token.Subject(),\n            "client_id":       getStringClaim(token, "client_id"),\n            "organization_id": getStringClaim(token, "organization_id"),\n            "scopes":          getScopesFromToken(token),\n            "audience":        getAudienceFromToken(token),\n        })\n    })\n\n    r.Run(":8080")\n}\n'})})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},57476:(e,n,t)=>{t.d(n,{Ay:()=>m,RM:()=>h});var r=t(25105),i=t(79621),o=t(33435),s=t(38552),a=t(22002);function c(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Ajoutez \xe0 votre ",(0,r.jsx)(n.code,{children:"pom.xml"})," :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>io.micronaut.security</groupId>\n    <artifactId>micronaut-security-jwt</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.micronaut</groupId>\n    <artifactId>micronaut-http-server-netty</artifactId>\n</dependency>\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="application.yml"',children:"micronaut:\n  security:\n    authentication: bearer\n    token:\n      jwt:\n        signatures:\n          jwks:\n            logto:\n              url: ${JWKS_URI:https://your-tenant.logto.app/oidc/jwks}\n        claims-validators:\n          issuer: ${JWT_ISSUER:https://your-tenant.logto.app/oidc}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="JwtClaimsValidator.java"',children:'import io.micronaut.security.token.Claims;\nimport io.micronaut.security.token.validator.TokenValidator;\nimport jakarta.inject.Singleton;\nimport org.reactivestreams.Publisher;\nimport reactor.core.publisher.Mono;\nimport java.util.Arrays;\nimport java.util.List;\n\n@Singleton\npublic class JwtClaimsValidator implements TokenValidator {\n\n    @Override\n    public Publisher<Boolean> validateToken(String token, Claims claims) {\n        try {\n            verifyPayload(claims);\n            return Mono.just(true);\n        } catch (AuthorizationException e) {\n            // Micronaut g\xe9rera le code de statut de mani\xe8re appropri\xe9e\n            return Mono.just(false);\n        }\n    }\n\n    private void verifyPayload(Claims claims) {\n        // La validation de l\u2019\xe9metteur (Issuer) est g\xe9r\xe9e automatiquement par la configuration JWT de Micronaut\n        // Impl\xe9mentez ici votre logique de v\xe9rification suppl\xe9mentaire bas\xe9e sur le mod\xe8le de permission (Permission)\n        // Utilisez les m\xe9thodes utilitaires ci-dessous pour l\u2019extraction des revendications (Claims)\n\n        // Exemple : throw new AuthorizationException("Permissions insuffisantes");\n    }\n\n    // M\xe9thodes utilitaires pour Micronaut JWT\n    @SuppressWarnings("unchecked")\n    private List<String> extractAudiences(Claims claims) {\n        Object aud = claims.get("aud");\n        if (aud instanceof List) {\n            return (List<String>) aud;\n        } else if (aud instanceof String) {\n            return Arrays.asList((String) aud);\n        }\n        return List.of();\n    }\n\n    private String extractScopes(Claims claims) {\n        return (String) claims.get("scope");\n    }\n\n    private String extractOrganizationId(Claims claims) {\n        return (String) claims.get("organization_id");\n    }\n}\n'})})]})}function u(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Ajoutez \xe0 votre ",(0,r.jsx)(n.code,{children:"pom.xml"})," :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-smallrye-jwt</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-resteasy-reactive</artifactId>\n</dependency>\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",metastring:'title="application.properties"',children:"# Configuration JWT (Jeton d\u2019identifiant)\nmp.jwt.verify.publickey.location=${JWKS_URI:https://your-tenant.logto.app/oidc/jwks}\nmp.jwt.verify.issuer=${JWT_ISSUER:https://your-tenant.logto.app/oidc}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="JwtVerificationFilter.java"',children:'import org.eclipse.microprofile.jwt.JsonWebToken;\nimport jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\nimport jakarta.ws.rs.container.ContainerRequestContext;\nimport jakarta.ws.rs.container.ContainerRequestFilter;\nimport jakarta.ws.rs.core.Response;\nimport jakarta.ws.rs.ext.Provider;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Provider\n@ApplicationScoped\npublic class JwtVerificationFilter implements ContainerRequestFilter {\n\n    @Inject\n    JsonWebToken jwt;\n\n    @Override\n    public void filter(ContainerRequestContext requestContext) {\n        if (requestContext.getUriInfo().getPath().startsWith("/api/protected")) {\n            try {\n                verifyPayload(jwt);\n                requestContext.setProperty("auth", jwt);\n            } catch (AuthorizationException e) {\n                requestContext.abortWith(\n                    Response.status(e.getStatusCode())\n                        .entity("{\\"error\\": \\"" + e.getMessage() + "\\"}")\n                        .build()\n                );\n            } catch (Exception e) {\n                requestContext.abortWith(\n                    Response.status(401)\n                        .entity("{\\"error\\": \\"Invalid token\\"}")\n                        .build()\n                );\n            }\n        }\n    }\n\n    private void verifyPayload(JsonWebToken jwt) {\n        // La validation de l\u2019\xe9metteur (Issuer) est g\xe9r\xe9e automatiquement par l\u2019extension Quarkus JWT\n        // Impl\xe9mentez ici votre logique de v\xe9rification suppl\xe9mentaire selon votre mod\xe8le de permission (Permission)\n        // Utilisez les m\xe9thodes utilitaires ci-dessous pour extraire les revendications (Claims)\n    }\n\n    // M\xe9thodes utilitaires pour Quarkus JWT\n    private List<String> extractAudiences(JsonWebToken jwt) {\n        return new ArrayList<>(jwt.getAudience());\n    }\n\n    private String extractScopes(JsonWebToken jwt) {\n        return jwt.getClaim("scope");\n    }\n\n    private String extractOrganizationId(JsonWebToken jwt) {\n        return jwt.getClaim("organization_id");\n    }\n}\n'})})]})}function l(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Ajoutez \xe0 votre ",(0,r.jsx)(n.code,{children:"pom.xml"})," :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.security</groupId>\n    <artifactId>spring-security-oauth2-resource-server</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.security</groupId>\n    <artifactId>spring-security-oauth2-jose</artifactId>\n</dependency>\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="JwtSecurityConfig.java"',children:'import org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\nimport org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\nimport org.springframework.security.web.SecurityFilterChain;\n\n@Configuration\n@EnableWebSecurity\npublic class JwtSecurityConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests(authz -> authz\n                .requestMatchers("/api/protected/**").authenticated()\n                .anyRequest().permitAll()\n            )\n            .oauth2ResourceServer(oauth2 -> oauth2\n                .jwt(jwt -> jwt.decoder(jwtDecoder()))\n            );\n        return http.build();\n    }\n\n    @Bean\n    public JwtDecoder jwtDecoder() {\n        // N\'oubliez pas de d\xe9finir ces variables d\'environnement dans votre d\xe9ploiement\n        String jwksUri = System.getenv("JWKS_URI");\n        String issuer = System.getenv("JWT_ISSUER");\n\n        return NimbusJwtDecoder.withJwkSetUri(jwksUri)\n            .issuer(issuer)\n            .build();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="JwtValidator.java"',children:'import org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.stereotype.Component;\nimport java.util.List;\n\n@Component\npublic class JwtValidator {\n\n    public void verifyPayload(Jwt jwt) {\n        // La validation de l\u2019\xe9metteur (Issuer) est g\xe9r\xe9e automatiquement par le d\xe9codeur JWT de Spring Security\n        // Impl\xe9mentez ici votre logique de v\xe9rification suppl\xe9mentaire bas\xe9e sur le mod\xe8le de permission (Permission)\n        // Utilisez les m\xe9thodes utilitaires ci-dessous pour extraire les revendications (Claims)\n\n        // Exemple : throw new AuthorizationException("Insufficient permissions");\n        // Le code de statut sera g\xe9r\xe9 par la gestion des exceptions de Spring Security\n    }\n\n    // M\xe9thodes utilitaires pour JWT avec Spring Boot\n    private List<String> extractAudiences(Jwt jwt) {\n        return jwt.getAudience();\n    }\n\n    private String extractScopes(Jwt jwt) {\n        return jwt.getClaimAsString("scope");\n    }\n\n    private String extractOrganizationId(Jwt jwt) {\n        return jwt.getClaimAsString("organization_id");\n    }\n}\n'})})]})}function d(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Ajoutez \xe0 votre ",(0,r.jsx)(n.code,{children:"pom.xml"})," :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>io.vertx</groupId>\n    <artifactId>vertx-web</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.vertx</groupId>\n    <artifactId>vertx-auth-jwt</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.vertx</groupId>\n    <artifactId>vertx-web-client</artifactId>\n</dependency>\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="JwtAuthHandler.java"',children:'import io.vertx.core.Future;\nimport io.vertx.core.Handler;\nimport io.vertx.core.Vertx;\nimport io.vertx.core.json.JsonArray;\nimport io.vertx.core.json.JsonObject;\nimport io.vertx.ext.auth.jwt.JWTAuth;\nimport io.vertx.ext.auth.jwt.JWTAuthOptions;\nimport io.vertx.ext.web.RoutingContext;\nimport io.vertx.ext.web.client.WebClient;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class JwtAuthHandler implements Handler<RoutingContext> {\n\n    private final JWTAuth jwtAuth;\n    private final WebClient webClient;\n    private final String expectedIssuer;\n    private final String jwksUri;\n\n    public JwtAuthHandler(Vertx vertx) {\n        this.webClient = WebClient.create(vertx);\n        this.jwtAuth = JWTAuth.create(vertx, new JWTAuthOptions());\n\n        // N\'oubliez pas de d\xe9finir ces variables d\'environnement dans votre d\xe9ploiement\n        this.expectedIssuer = System.getenv("JWT_ISSUER");\n        this.jwksUri = System.getenv("JWKS_URI");\n\n        // R\xe9cup\xe9rer le JWKS et configurer l\'authentification JWT\n        fetchJWKS().onSuccess(jwks -> {\n            // Configurer le JWKS (simplifi\xe9 - vous pourriez avoir besoin d\'un parseur JWKS appropri\xe9)\n        });\n    }\n\n    @Override\n    public void handle(RoutingContext context) {\n        String authHeader = context.request().getHeader("Authorization");\n        if (authHeader == null || !authHeader.startsWith("Bearer ")) {\n            context.response()\n                .setStatusCode(401)\n                .putHeader("Content-Type", "application/json")\n                .end("{\\"error\\": \\"Authorization header missing or invalid\\"}");\n            return;\n        }\n\n        String token = authHeader.substring(7);\n        jwtAuth.authenticate(new JsonObject().put("jwt", token))\n            .onSuccess(user -> {\n                try {\n                    JsonObject principal = user.principal();\n                    verifyPayload(principal);\n                    context.put("auth", principal);\n                    context.next();\n                } catch (AuthorizationException e) {\n                    context.response()\n                        .setStatusCode(e.getStatusCode())  // Utiliser le code d\'\xe9tat de l\'exception\n                        .putHeader("Content-Type", "application/json")\n                        .end("{\\"error\\": \\"" + e.getMessage() + "\\"}");\n                } catch (Exception e) {\n                    context.response()\n                        .setStatusCode(401)\n                        .putHeader("Content-Type", "application/json")\n                        .end("{\\"error\\": \\"Invalid token\\"}");\n                }\n            })\n            .onFailure(err -> {\n                context.response()\n                    .setStatusCode(401)\n                    .putHeader("Content-Type", "application/json")\n                    .end("{\\"error\\": \\"Invalid token: " + err.getMessage() + "\\"}");\n            });\n    }\n\n    private Future<JsonObject> fetchJWKS() {\n        return webClient.getAbs(this.jwksUri)\n            .send()\n            .map(response -> response.bodyAsJsonObject());\n    }\n\n    private void verifyPayload(JsonObject principal) {\n        // V\xe9rifier l\'\xe9metteur manuellement pour Vert.x\n        String issuer = principal.getString("iss");\n        if (issuer == null || !expectedIssuer.equals(issuer)) {\n            throw new AuthorizationException("Invalid issuer: " + issuer);\n        }\n\n        // Impl\xe9mentez ici votre logique de v\xe9rification suppl\xe9mentaire bas\xe9e sur le mod\xe8le de permission\n        // Utilisez les m\xe9thodes utilitaires ci-dessous pour l\'extraction des revendications\n    }\n\n    // M\xe9thodes utilitaires pour Vert.x JWT\n    private List<String> extractAudiences(JsonObject principal) {\n        JsonArray audiences = principal.getJsonArray("aud");\n        if (audiences != null) {\n            List<String> result = new ArrayList<>();\n            for (Object aud : audiences) {\n                result.add(aud.toString());\n            }\n            return result;\n        }\n        return List.of();\n    }\n\n    private String extractScopes(JsonObject principal) {\n        return principal.getString("scope");\n    }\n\n    private String extractOrganizationId(JsonObject principal) {\n        return principal.getString("organization_id");\n    }\n}\n'})})]})}const p=Object.freeze({"spring-boot":(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}),{}),quarkus:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}),{}),micronaut:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}),{}),"vertx-web":(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}),{})}),h=[];function g(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Nous utilisons diff\xe9rentes biblioth\xe8ques JWT selon le framework. Installez les d\xe9pendances requises :"}),"\n",e.framework?p[e.framework]:(0,r.jsx)(a.A,{groupId:"api-framework",children:Object.entries(p).map((([e,n])=>(0,r.jsx)(s.A,{value:e,label:(0,o.My)(e),children:n},e)))}),"\n",(0,r.jsx)(n.p,{children:"Selon votre mod\xe8le de permission (Permission), impl\xe9mentez la logique de v\xe9rification appropri\xe9e :"}),"\n",(0,r.jsxs)(a.A,{groupId:"permission-models",children:[(0,r.jsx)(s.A,{value:"global-api-resources",label:"Ressources API globales",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// V\xe9rifiez que la revendication d\'audience (Audience) correspond \xe0 votre indicateur de ressource API\nList<String> audiences = extractAudiences(token); // Extraction sp\xe9cifique au framework\nif (!audiences.contains("https://your-api-resource-indicator")) {\n    throw new AuthorizationException("Audience invalide");\n}\n\n// V\xe9rifiez les port\xe9es (Scopes) requises pour les ressources API globales\nList<String> requiredScopes = Arrays.asList("api:read", "api:write"); // Remplacez par vos port\xe9es requises r\xe9elles\nString scopes = extractScopes(token); // Extraction sp\xe9cifique au framework\nList<String> tokenScopes = scopes != null ? Arrays.asList(scopes.split(" ")) : List.of();\n\nif (!tokenScopes.containsAll(requiredScopes)) {\n    throw new AuthorizationException("Port\xe9e insuffisante");\n}\n'})})}),(0,r.jsx)(s.A,{value:"organization-permissions",label:"Permissions d'organisation (hors API)",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// V\xe9rifiez que la revendication d\'audience (Audience) correspond au format d\'organisation\nList<String> audiences = extractAudiences(token); // Extraction sp\xe9cifique au framework\nboolean hasOrgAudience = audiences.stream()\n    .anyMatch(aud -> aud.startsWith("urn:logto:organization:"));\n\nif (!hasOrgAudience) {\n    throw new AuthorizationException("Audience invalide pour les permissions d\'organisation");\n}\n\n// V\xe9rifiez que l\'ID d\'organisation correspond au contexte (vous devrez peut-\xeatre l\'extraire du contexte de la requ\xeate)\nString expectedOrgId = "your-organization-id"; // \xc0 extraire du contexte de la requ\xeate\nString expectedAud = "urn:logto:organization:" + expectedOrgId;\nif (!audiences.contains(expectedAud)) {\n    throw new AuthorizationException("ID d\'organisation non correspondant");\n}\n\n// V\xe9rifiez les port\xe9es (Scopes) d\'organisation requises\nList<String> requiredScopes = Arrays.asList("invite:users", "manage:settings"); // Remplacez par vos port\xe9es requises r\xe9elles\nString scopes = extractScopes(token); // Extraction sp\xe9cifique au framework\nList<String> tokenScopes = scopes != null ? Arrays.asList(scopes.split(" ")) : List.of();\n\nif (!tokenScopes.containsAll(requiredScopes)) {\n    throw new AuthorizationException("Port\xe9e d\'organisation insuffisante");\n}\n'})})}),(0,r.jsx)(s.A,{value:"organization-level-api-resources",label:"Ressources API au niveau de l'organisation",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// V\xe9rifiez que la revendication d\'audience (Audience) correspond \xe0 votre indicateur de ressource API\nList<String> audiences = extractAudiences(token); // Extraction sp\xe9cifique au framework\nif (!audiences.contains("https://your-api-resource-indicator")) {\n    throw new AuthorizationException("Audience invalide pour les ressources API au niveau de l\'organisation");\n}\n\n// V\xe9rifiez que l\'ID d\'organisation correspond au contexte (vous devrez peut-\xeatre l\'extraire du contexte de la requ\xeate)\nString expectedOrgId = "your-organization-id"; // \xc0 extraire du contexte de la requ\xeate\nString orgId = extractOrganizationId(token); // Extraction sp\xe9cifique au framework\nif (!expectedOrgId.equals(orgId)) {\n    throw new AuthorizationException("ID d\'organisation non correspondant");\n}\n\n// V\xe9rifiez les port\xe9es (Scopes) requises pour les ressources API au niveau de l\'organisation\nList<String> requiredScopes = Arrays.asList("api:read", "api:write"); // Remplacez par vos port\xe9es requises r\xe9elles\nString scopes = extractScopes(token); // Extraction sp\xe9cifique au framework\nList<String> tokenScopes = scopes != null ? Arrays.asList(scopes.split(" ")) : List.of();\n\nif (!tokenScopes.containsAll(requiredScopes)) {\n    throw new AuthorizationException("Port\xe9es API au niveau de l\'organisation insuffisantes");\n}\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"Les m\xe9thodes utilitaires pour extraire les revendications (Claims) sont sp\xe9cifiques au framework. Consultez les d\xe9tails d'impl\xe9mentation dans les fichiers de validation sp\xe9cifiques au framework ci-dessus."})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},20242:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="AuthorizationException.java"',children:"public class AuthorizationException extends RuntimeException {\n    private final int statusCode;\n\n    public AuthorizationException(String message) {\n        this(message, 403); // Par d\xe9faut \xe0 403 Interdit\n    }\n\n    public AuthorizationException(String message, int statusCode) {\n        super(message);\n        this.statusCode = statusCode;\n    }\n\n    public int getStatusCode() {\n        return statusCode;\n    }\n}\n"})})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},11982:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="ProtectedController.java"',children:'import io.micronaut.http.annotation.Controller;\nimport io.micronaut.http.annotation.Get;\nimport io.micronaut.security.annotation.Secured;\nimport io.micronaut.security.authentication.Authentication;\nimport io.micronaut.security.rules.SecurityRule;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\n@Controller("/api")\n@Secured(SecurityRule.IS_AUTHENTICATED)\npublic class ProtectedController {\n\n    @Get("/protected")\n    public Map<String, Object> protectedEndpoint(Authentication authentication) {\n        // Informations du jeton d\u2019acc\xe8s (Access token) directement depuis Authentication\n        String scopes = (String) authentication.getAttributes().get("scope");\n        List<String> scopeList = scopes != null ? Arrays.asList(scopes.split(" ")) : List.of();\n\n        return Map.of(\n            "sub", authentication.getName(),\n            "client_id", authentication.getAttributes().get("client_id"),\n            "organization_id", authentication.getAttributes().get("organization_id"),\n            "scopes", scopeList,\n            "audience", authentication.getAttributes().get("aud")\n        );\n    }\n}\n'})})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},37512:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="ProtectedResource.java"',children:'import org.eclipse.microprofile.jwt.JsonWebToken;\nimport jakarta.inject.Inject;\nimport jakarta.ws.rs.GET;\nimport jakarta.ws.rs.Path;\nimport jakarta.ws.rs.Produces;\nimport jakarta.ws.rs.core.MediaType;\nimport jakarta.ws.rs.core.Context;\nimport jakarta.ws.rs.container.ContainerRequestContext;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\n@Path("/api")\npublic class ProtectedResource {\n\n    @Inject\n    JsonWebToken jwt;\n\n    @GET\n    @Path("/protected")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Map<String, Object> protectedEndpoint(@Context ContainerRequestContext requestContext) {\n        // Acc\xe9der au JWT directement depuis l\'injection ou le contexte\n        JsonWebToken token = (JsonWebToken) requestContext.getProperty("auth");\n        if (token == null) {\n            token = jwt; // Repli sur le JWT inject\xe9\n        }\n\n        String scopes = token.getClaim("scope");\n        List<String> scopeList = scopes != null ? Arrays.asList(scopes.split(" ")) : List.of();\n\n        return Map.of(\n            "sub", token.getSubject(),\n            "client_id", token.<String>getClaim("client_id"),\n            "organization_id", token.<String>getClaim("organization_id"),\n            "scopes", scopeList,\n            "audience", token.getAudience()\n        );\n    }\n}\n'})})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},51198:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="ProtectedController.java"',children:'import org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\n@RestController\npublic class ProtectedController {\n\n    @GetMapping("/api/protected")\n    public Map<String, Object> protectedEndpoint(@AuthenticationPrincipal Jwt jwt) {\n        // Informations du jeton d\u2019acc\xe8s (Access token) directement depuis le JWT\n        String scopes = jwt.getClaimAsString("scope");\n        List<String> scopeList = scopes != null ? Arrays.asList(scopes.split(" ")) : List.of();\n\n        return Map.of(\n            "sub", jwt.getSubject(),\n            "client_id", jwt.getClaimAsString("client_id"),\n            "organization_id", jwt.getClaimAsString("organization_id"),\n            "scopes", scopeList,\n            "audience", jwt.getAudience()\n        );\n    }\n}\n'})})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},22312:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="MainVerticle.java"',children:'import io.vertx.core.AbstractVerticle;\nimport io.vertx.core.Promise;\nimport io.vertx.core.json.JsonObject;\nimport io.vertx.ext.web.Router;\nimport io.vertx.ext.web.RoutingContext;\n\npublic class MainVerticle extends AbstractVerticle {\n\n    @Override\n    public void start(Promise<Void> startPromise) throws Exception {\n        Router router = Router.router(vertx);\n\n        // Appliquer le middleware aux routes prot\xe9g\xe9es\n        router.route("/api/protected*").handler(new JwtAuthHandler(vertx));\n        router.get("/api/protected").handler(this::protectedEndpoint);\n\n        vertx.createHttpServer()\n            .requestHandler(router)\n            .listen(8080, result -> {\n                if (result.succeeded()) {\n                    startPromise.complete();\n                } else {\n                    startPromise.fail(result.cause());\n                }\n            });\n    }\n\n    private void protectedEndpoint(RoutingContext context) {\n        // Acc\xe9der au principal JWT directement depuis le contexte\n        JsonObject principal = context.get("auth");\n        if (principal == null) {\n            context.response()\n                .setStatusCode(500)\n                .putHeader("Content-Type", "application/json")\n                .end("{\\"error\\": \\"JWT principal not found\\"}");\n            return;\n        }\n\n        String scopes = principal.getString("scope");\n        JsonObject response = new JsonObject()\n            .put("sub", principal.getString("sub"))\n            .put("client_id", principal.getString("client_id"))\n            .put("organization_id", principal.getString("organization_id"))\n            .put("scopes", scopes != null ? scopes.split(" ") : new String[0])\n            .put("audience", principal.getJsonArray("aud"));\n\n        context.response()\n            .putHeader("Content-Type", "application/json")\n            .end(response.encode());\n    }\n}\n'})})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},40318:(e,n,t)=>{t.d(n,{Ay:()=>x,RM:()=>g});var r=t(25105),i=t(79621),o=t(33435),s=t(38552),a=t(22002);function c(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="auth-middleware.ts"',children:"import { Request, Response, NextFunction } from 'express';\nimport { validateJwt, createAuthInfo } from './jwt-validator.js';\n\n// \xc9tendre l'interface Request d'Express pour inclure auth\ndeclare global {\n  namespace Express {\n    interface Request {\n      auth?: AuthInfo;\n    }\n  }\n}\n\nexport async function verifyAccessToken(req: Request, res: Response, next: NextFunction) {\n  try {\n    const token = extractBearerTokenFromHeaders(req.headers);\n    const payload = await validateJwt(token);\n\n    // Stocker les informations d'authentification dans la requ\xeate pour un usage g\xe9n\xe9rique\n    req.auth = createAuthInfo(payload);\n\n    next();\n  } catch (err: any) {\n    return res.status(err.status ?? 401).json({ error: err.message });\n  }\n}\n"})})}function u(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="auth-middleware.ts"',children:"import { FastifyRequest, FastifyReply } from 'fastify';\nimport { validateJwt, createAuthInfo } from './jwt-validator.js';\n\n// \xc9tendre l'interface Fastify Request pour inclure auth\ndeclare module 'fastify' {\n  interface FastifyRequest {\n    auth?: AuthInfo;\n  }\n}\n\nexport async function fastifyVerifyAccessToken(request: FastifyRequest, reply: FastifyReply) {\n  try {\n    const token = extractBearerTokenFromHeaders(request.headers);\n    const payload = await validateJwt(token);\n\n    // Stocker les informations d'authentification dans la requ\xeate pour un usage g\xe9n\xe9rique\n    request.auth = createAuthInfo(payload);\n  } catch (err: any) {\n    reply.code(err.status ?? 401).send({ error: err.message });\n  }\n}\n"})})}function l(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="auth-middleware.ts"',children:"import { Request, ResponseToolkit } from '@hapi/hapi';\nimport { validateJwt, createAuthInfo } from './jwt-validator.js';\n\nexport async function hapiVerifyAccessToken(request: Request, h: ResponseToolkit) {\n  try {\n    const token = extractBearerTokenFromHeaders(request.headers);\n    const payload = await validateJwt(token);\n\n    // Stocker les informations d'authentification dans request.app pour une utilisation g\xe9n\xe9rique\n    request.app.auth = createAuthInfo(payload);\n\n    return h.continue;\n  } catch (err: any) {\n    return h\n      .response({ error: err.message })\n      .code(err.status ?? 401)\n      .takeover();\n  }\n}\n"})})}function d(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="auth-middleware.ts"',children:"import { Context, Next } from 'koa';\nimport { validateJwt, createAuthInfo } from './jwt-validator.js';\n\nexport async function koaVerifyAccessToken(ctx: Context, next: Next) {\n  try {\n    const token = extractBearerTokenFromHeaders(ctx.request.headers);\n    const payload = await validateJwt(token);\n\n    // Stocker les informations d'authentification dans l'\xe9tat pour une utilisation g\xe9n\xe9rique\n    ctx.state.auth = createAuthInfo(payload);\n\n    await next();\n  } catch (err: any) {\n    ctx.status = err.status ?? 401;\n    ctx.body = { error: err.message };\n  }\n}\n"})})}function p(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="access-token.guard.ts"',children:"import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  UnauthorizedException,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { validateJwt, createAuthInfo } from './jwt-validator.js';\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const req = context.switchToHttp().getRequest();\n\n    try {\n      const token = extractBearerTokenFromHeaders(req.headers);\n      const payload = await validateJwt(token);\n\n      // Stocker les informations d'authentification dans la requ\xeate pour un usage g\xe9n\xe9rique\n      req.auth = createAuthInfo(payload);\n\n      return true;\n    } catch (err: any) {\n      if (err.status === 401) throw new UnauthorizedException(err.message);\n      throw new ForbiddenException(err.message);\n    }\n  }\n}\n"})})}const h=Object.freeze({express:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}),{}),fastify:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}),{}),hapi:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}),{}),koa:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}),{}),nestjs:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}),{})}),g=[];function m(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Nous utilisons ",(0,r.jsx)(n.a,{href:"https://github.com/panva/jose",children:"jose"})," dans cet exemple pour valider le JWT. Installez-le si ce n'est pas d\xe9j\xe0 fait :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install jose\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Ou utilisez votre gestionnaire de paquets pr\xe9f\xe9r\xe9 (par exemple, ",(0,r.jsx)(n.code,{children:"pnpm"})," ou ",(0,r.jsx)(n.code,{children:"yarn"}),")."]}),"\n",(0,r.jsx)(n.p,{children:"Commencez par ajouter ces utilitaires partag\xe9s pour g\xe9rer la validation du JWT :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="jwt-validator.ts"',children:"import { createRemoteJWKSet, jwtVerify, JWTPayload } from 'jose';\nimport { AuthInfo, AuthorizationError } from './auth-middleware.js';\n\nconst jwks = createRemoteJWKSet(new URL(JWKS_URI));\n\nexport async function validateJwt(token: string): Promise<JWTPayload> {\n  const { payload } = await jwtVerify(token, jwks, {\n    issuer: ISSUER,\n  });\n\n  verifyPayload(payload);\n  return payload;\n}\n\nexport function createAuthInfo(payload: JWTPayload): AuthInfo {\n  const scopes = (payload.scope as string)?.split(' ') ?? [];\n  const audience = Array.isArray(payload.aud) ? payload.aud : payload.aud ? [payload.aud] : [];\n\n  return new AuthInfo(\n    payload.sub!,\n    payload.client_id as string,\n    payload.organization_id as string,\n    scopes,\n    audience\n  );\n}\n\nfunction verifyPayload(payload: JWTPayload): void {\n  // Impl\xe9mentez ici votre logique de v\xe9rification bas\xe9e sur le mod\xe8le de permission\n  // Ceci sera d\xe9taill\xe9 dans la section sur les mod\xe8les de permission ci-dessous\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Ensuite, impl\xe9mentez le middleware pour v\xe9rifier le jeton d\u2019acc\xe8s (Access token) :"}),"\n",e.framework?h[e.framework]:(0,r.jsx)(a.A,{groupId:"api-framework",children:Object.entries(h).map((([e,n])=>(0,r.jsx)(s.A,{value:e,label:(0,o.My)(e),children:n},e)))}),"\n",(0,r.jsxs)(n.p,{children:["Selon votre mod\xe8le de permission, impl\xe9mentez la logique de v\xe9rification appropri\xe9e dans ",(0,r.jsx)(n.code,{children:"jwt-validator.ts"})," :"]}),"\n",(0,r.jsxs)(a.A,{groupId:"permission-models",children:[(0,r.jsx)(s.A,{value:"global-api-resources",label:"Ressources API globales",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="jwt-validator.ts"',children:"function verifyPayload(payload: JWTPayload): void {\n  // V\xe9rifiez que la revendication d\u2019audience correspond \xe0 votre indicateur de ressource API\n  const audiences = Array.isArray(payload.aud) ? payload.aud : payload.aud ? [payload.aud] : [];\n  if (!audiences.includes('https://your-api-resource-indicator')) {\n    throw new AuthorizationError('Audience invalide');\n  }\n\n  // V\xe9rifiez les port\xe9es requises pour les ressources API globales\n  const requiredScopes = ['api:read', 'api:write']; // Remplacez par vos port\xe9es requises\n  const scopes = (payload.scope as string)?.split(' ') ?? [];\n  if (!requiredScopes.every((scope) => scopes.includes(scope))) {\n    throw new AuthorizationError('Port\xe9e insuffisante');\n  }\n}\n"})})}),(0,r.jsx)(s.A,{value:"organization-permissions",label:"Permissions d\u2019organisation (hors API)",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="jwt-validator.ts"',children:"function verifyPayload(payload: JWTPayload): void {\n  // V\xe9rifiez que la revendication d\u2019audience correspond au format d\u2019organisation\n  const audiences = Array.isArray(payload.aud) ? payload.aud : payload.aud ? [payload.aud] : [];\n  const hasOrgAudience = audiences.some((aud) => aud.startsWith('urn:logto:organization:'));\n\n  if (!hasOrgAudience) {\n    throw new AuthorizationError('Audience invalide pour les permissions d\u2019organisation');\n  }\n\n  // V\xe9rifiez que l\u2019ID d\u2019organisation correspond au contexte (vous devrez peut-\xeatre l\u2019extraire du contexte de la requ\xeate)\n  const expectedOrgId = 'your-organization-id'; // \xc0 extraire du contexte de la requ\xeate\n  const expectedAud = `urn:logto:organization:${expectedOrgId}`;\n  if (!audiences.includes(expectedAud)) {\n    throw new AuthorizationError('Incoh\xe9rence de l\u2019ID d\u2019organisation');\n  }\n\n  // V\xe9rifiez les port\xe9es requises pour l\u2019organisation\n  const requiredScopes = ['invite:users', 'manage:settings']; // Remplacez par vos port\xe9es requises\n  const scopes = (payload.scope as string)?.split(' ') ?? [];\n  if (!requiredScopes.every((scope) => scopes.includes(scope))) {\n    throw new AuthorizationError('Port\xe9e d\u2019organisation insuffisante');\n  }\n}\n"})})}),(0,r.jsx)(s.A,{value:"organization-level-api-resources",label:"Ressources API au niveau organisation",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="jwt-validator.ts"',children:"function verifyPayload(payload: JWTPayload): void {\n  // V\xe9rifiez que la revendication d\u2019audience correspond \xe0 votre indicateur de ressource API\n  const audiences = Array.isArray(payload.aud) ? payload.aud : payload.aud ? [payload.aud] : [];\n  if (!audiences.includes('https://your-api-resource-indicator')) {\n    throw new AuthorizationError(\n      'Audience invalide pour les ressources API au niveau organisation'\n    );\n  }\n\n  // V\xe9rifiez que l\u2019ID d\u2019organisation correspond au contexte (vous devrez peut-\xeatre l\u2019extraire du contexte de la requ\xeate)\n  const expectedOrgId = 'your-organization-id'; // \xc0 extraire du contexte de la requ\xeate\n  const orgId = payload.organization_id as string;\n  if (expectedOrgId !== orgId) {\n    throw new AuthorizationError('Incoh\xe9rence de l\u2019ID d\u2019organisation');\n  }\n\n  // V\xe9rifiez les port\xe9es requises pour les ressources API au niveau organisation\n  const requiredScopes = ['api:read', 'api:write']; // Remplacez par vos port\xe9es requises\n  const scopes = (payload.scope as string)?.split(' ') ?? [];\n  if (!requiredScopes.every((scope) => scopes.includes(scope))) {\n    throw new AuthorizationError('Port\xe9es API au niveau organisation insuffisantes');\n  }\n}\n"})})})]})]})}function x(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},73231:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="auth-middleware.ts"',children:"import { IncomingHttpHeaders } from 'http';\n\nconst JWKS_URI = 'https://your-tenant.logto.app/oidc/jwks';\nconst ISSUER = 'https://your-tenant.logto.app/oidc';\n\nexport class AuthInfo {\n  constructor(\n    public sub: string,\n    public clientId?: string,\n    public organizationId?: string,\n    public scopes: string[] = [],\n    public audience: string[] = []\n  ) {}\n}\n\nexport class AuthorizationError extends Error {\n  name = 'AuthorizationError';\n  constructor(\n    message: string,\n    public status = 403\n  ) {\n    super(message);\n  }\n}\n\nexport function extractBearerTokenFromHeaders({ authorization }: IncomingHttpHeaders): string {\n  const bearerPrefix = 'Bearer ';\n\n  if (!authorization) {\n    throw new AuthorizationError('L\u2019en-t\xeate Authorization est manquant', 401);\n  }\n\n  if (!authorization.startsWith(bearerPrefix)) {\n    throw new AuthorizationError(\n      `L\u2019en-t\xeate Authorization doit commencer par \"${bearerPrefix}\"`,\n      401\n    );\n  }\n\n  return authorization.slice(bearerPrefix.length);\n}\n"})})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},1532:(e,n,t)=>{t.d(n,{Ay:()=>g,RM:()=>p});var r=t(25105),i=t(79621),o=t(33435),s=t(38552),a=t(22002);function c(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="app/Http/Middleware/VerifyAccessToken.php"',children:"<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Response;\n\nclass VerifyAccessToken\n{\n    use AuthHelpers;\n\n    public function handle(Request $request, Closure $next): Response\n    {\n        try {\n            $token = $this->extractBearerToken($request->headers->all());\n            $payload = JwtValidator::validateJwt($token);\n\n            // Stocker les informations d'authentification dans les attributs de la requ\xeate pour une utilisation g\xe9n\xe9rique\n            $request->attributes->set('auth', JwtValidator::createAuthInfo($payload));\n\n            return $next($request);\n\n        } catch (AuthorizationException $e) {\n            return response()->json(['error' => $e->getMessage()], $e->statusCode);\n        }\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Enregistrez le middleware dans ",(0,r.jsx)(n.code,{children:"app/Http/Kernel.php"})," :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="app/Http/Kernel.php"',children:"protected $middlewareAliases = [\n    // ... autres middlewares\n    'auth.token' => \\App\\Http\\Middleware\\VerifyAccessToken::class,\n];\n"})})]})}function u(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="src/Middleware/JwtMiddleware.php"',children:"<?php\n\nnamespace App\\Middleware;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\nuse Slim\\Psr7\\Response;\n\nclass JwtMiddleware implements MiddlewareInterface\n{\n    use AuthHelpers;\n\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        try {\n            $headers = $request->getHeaders();\n            $token = $this->extractBearerToken($headers);\n            $payload = JwtValidator::validateJwt($token);\n\n            // Stocker les informations d'authentification dans les attributs de la requ\xeate pour une utilisation g\xe9n\xe9rique\n            $request = $request->withAttribute('auth', JwtValidator::createAuthInfo($payload));\n\n            return $handler->handle($request);\n\n        } catch (AuthorizationException $e) {\n            $response = new Response();\n            $response->getBody()->write(json_encode(['error' => $e->getMessage()]));\n            return $response\n                ->withHeader('Content-Type', 'application/json')\n                ->withStatus($e->statusCode);\n        }\n    }\n}\n"})})}function l(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="src/Security/JwtAuthenticator.php"',children:"<?php\n\nnamespace App\\Security;\n\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Security\\Http\\Authenticator\\AbstractAuthenticator;\nuse Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Badge\\UserBadge;\nuse Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Passport;\nuse Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\SelfValidatingPassport;\n\nclass JwtAuthenticator extends AbstractAuthenticator\n{\n    use AuthHelpers;\n\n    public function supports(Request $request): ?bool\n    {\n        return $request->headers->has('authorization');\n    }\n\n    public function authenticate(Request $request): Passport\n    {\n        try {\n            $token = $this->extractBearerToken($request->headers->all());\n            $payload = JwtValidator::validateJwt($token);\n            $authInfo = JwtValidator::createAuthInfo($payload);\n\n            // Stocker les informations d'authentification dans les attributs de la requ\xeate pour un usage g\xe9n\xe9rique\n            $request->attributes->set('auth', $authInfo);\n\n            return new SelfValidatingPassport(new UserBadge($payload['sub']));\n\n        } catch (AuthorizationException $e) {\n            throw new AuthenticationException($e->getMessage());\n        }\n    }\n\n    public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response\n    {\n        return null; // Continuer vers le contr\xf4leur\n    }\n\n    public function onAuthenticationFailure(Request $request, AuthenticationException $exception): ?Response\n    {\n        return new JsonResponse(['error' => $exception->getMessage()], Response::HTTP_UNAUTHORIZED);\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Configurez la s\xe9curit\xe9 dans ",(0,r.jsx)(n.code,{children:"config/packages/security.yaml"})," :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="config/packages/security.yaml"',children:"security:\n  firewalls:\n    api:\n      pattern: ^/api/protected\n      stateless: true\n      custom_authenticators:\n        - App\\Security\\JwtAuthenticator\n"})})]})}const d=Object.freeze({laravel:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}),{}),symfony:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}),{}),slim:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}),{})}),p=[];function h(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Nous utilisons ",(0,r.jsx)(n.a,{href:"https://github.com/firebase/php-jwt",children:"firebase/php-jwt"})," pour valider les JWT. Installez-le avec Composer :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"composer require firebase/php-jwt\n"})}),"\n",(0,r.jsx)(n.p,{children:"Commencez par ajouter ces utilitaires partag\xe9s pour g\xe9rer la validation des JWT :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="JwtValidator.php"',children:"<?php\n\nuse Firebase\\JWT\\JWT;\nuse Firebase\\JWT\\JWK;\nuse Firebase\\JWT\\Key;\n\nclass JwtValidator\n{\n    use AuthHelpers;\n\n    private static ?array $jwks = null;\n\n    public static function fetchJwks(): array\n    {\n        if (self::$jwks === null) {\n            $jwksData = file_get_contents(AuthConstants::JWKS_URI);\n            if ($jwksData === false) {\n                throw new AuthorizationException('\xc9chec de la r\xe9cup\xe9ration du JWKS', 401);\n            }\n\n            self::$jwks = json_decode($jwksData, true);\n        }\n\n        return self::$jwks;\n    }\n\n    public static function validateJwt(string $token): array\n    {\n        try {\n            $jwks = self::fetchJwks();\n            $keys = JWK::parseKeySet($jwks);\n\n            $decoded = JWT::decode($token, $keys);\n            $payload = (array) $decoded;\n\n            // V\xe9rifier l\u2019\xe9metteur\n            if (($payload['iss'] ?? '') !== AuthConstants::ISSUER) {\n                throw new AuthorizationException('\xc9metteur invalide', 401);\n            }\n\n            self::verifyPayload($payload);\n            return $payload;\n\n        } catch (AuthorizationException $e) {\n            throw $e;\n        } catch (Exception $e) {\n            throw new AuthorizationException('Jeton invalide : ' . $e->getMessage(), 401);\n        }\n    }\n\n    public static function createAuthInfo(array $payload): AuthInfo\n    {\n        $scopes = !empty($payload['scope']) ? explode(' ', $payload['scope']) : [];\n        $audience = $payload['aud'] ?? [];\n\n        if (is_string($audience)) {\n            $audience = [$audience];\n        }\n\n        return new AuthInfo(\n            sub: $payload['sub'],\n            clientId: $payload['client_id'] ?? null,\n            organizationId: $payload['organization_id'] ?? null,\n            scopes: $scopes,\n            audience: $audience\n        );\n    }\n\n    private static function verifyPayload(array $payload): void\n    {\n        // Impl\xe9mentez ici votre logique de v\xe9rification selon le mod\xe8le de permission\n        // Ceci sera d\xe9taill\xe9 dans la section sur les mod\xe8les de permission ci-dessous\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Ensuite, impl\xe9mentez le middleware pour v\xe9rifier le jeton d\u2019acc\xe8s :"}),"\n",e.framework?d[e.framework]:(0,r.jsx)(a.A,{groupId:"api-framework",children:Object.entries(d).map((([e,n])=>(0,r.jsx)(s.A,{value:e,label:(0,o.My)(e),children:n},e)))}),"\n",(0,r.jsxs)(n.p,{children:["Selon votre mod\xe8le de permission, impl\xe9mentez la logique de v\xe9rification appropri\xe9e dans ",(0,r.jsx)(n.code,{children:"JwtValidator"})," :"]}),"\n",(0,r.jsxs)(a.A,{groupId:"permission-models",children:[(0,r.jsx)(s.A,{value:"global-api-resources",label:"Ressources API globales",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="JwtValidator.php"',children:"private static function verifyPayload(array $payload): void\n{\n    // V\xe9rifier que la revendication d\u2019audience correspond \xe0 votre indicateur de ressource API\n    $audiences = $payload['aud'] ?? [];\n    if (is_string($audiences)) {\n        $audiences = [$audiences];\n    }\n\n    if (!in_array('https://your-api-resource-indicator', $audiences)) {\n        throw new AuthorizationException('Audience invalide');\n    }\n\n    // V\xe9rifier les port\xe9es requises pour les ressources API globales\n    $requiredScopes = ['api:read', 'api:write']; // Remplacez par vos port\xe9es requises\n    $scopes = !empty($payload['scope']) ? explode(' ', $payload['scope']) : [];\n\n    foreach ($requiredScopes as $scope) {\n        if (!in_array($scope, $scopes)) {\n            throw new AuthorizationException('Port\xe9e insuffisante');\n        }\n    }\n}\n"})})}),(0,r.jsx)(s.A,{value:"organization-permissions",label:"Permissions d\u2019organisation (hors API)",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="JwtValidator.php"',children:"private static function verifyPayload(array $payload): void\n{\n    // V\xe9rifier que la revendication d\u2019audience correspond au format d\u2019organisation\n    $audiences = $payload['aud'] ?? [];\n    if (is_string($audiences)) {\n        $audiences = [$audiences];\n    }\n\n    $hasOrgAudience = false;\n    foreach ($audiences as $aud) {\n        if (str_starts_with($aud, 'urn:logto:organization:')) {\n            $hasOrgAudience = true;\n            break;\n        }\n    }\n\n    if (!$hasOrgAudience) {\n        throw new AuthorizationException('Audience invalide pour les permissions d\u2019organisation');\n    }\n\n    // V\xe9rifier que l\u2019ID d\u2019organisation correspond au contexte (vous devrez peut-\xeatre l\u2019extraire du contexte de la requ\xeate)\n    $expectedOrgId = 'your-organization-id'; // \xc0 extraire du contexte de la requ\xeate\n    $expectedAud = \"urn:logto:organization:{$expectedOrgId}\";\n    if (!in_array($expectedAud, $audiences)) {\n        throw new AuthorizationException('Incoh\xe9rence de l\u2019ID d\u2019organisation');\n    }\n\n    // V\xe9rifier les port\xe9es requises pour l\u2019organisation\n    $requiredScopes = ['invite:users', 'manage:settings']; // Remplacez par vos port\xe9es requises\n    $scopes = !empty($payload['scope']) ? explode(' ', $payload['scope']) : [];\n\n    foreach ($requiredScopes as $scope) {\n        if (!in_array($scope, $scopes)) {\n            throw new AuthorizationException('Port\xe9e d\u2019organisation insuffisante');\n        }\n    }\n}\n"})})}),(0,r.jsx)(s.A,{value:"organization-level-api-resources",label:"Ressources API au niveau de l\u2019organisation",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="JwtValidator.php"',children:"private static function verifyPayload(array $payload): void\n{\n    // V\xe9rifier que la revendication d\u2019audience correspond \xe0 votre indicateur de ressource API\n    $audiences = $payload['aud'] ?? [];\n    if (is_string($audiences)) {\n        $audiences = [$audiences];\n    }\n\n    if (!in_array('https://your-api-resource-indicator', $audiences)) {\n        throw new AuthorizationException('Audience invalide pour les ressources API au niveau de l\u2019organisation');\n    }\n\n    // V\xe9rifier que l\u2019ID d\u2019organisation correspond au contexte (vous devrez peut-\xeatre l\u2019extraire du contexte de la requ\xeate)\n    $expectedOrgId = 'your-organization-id'; // \xc0 extraire du contexte de la requ\xeate\n    $orgId = $payload['organization_id'] ?? null;\n    if ($expectedOrgId !== $orgId) {\n        throw new AuthorizationException('Incoh\xe9rence de l\u2019ID d\u2019organisation');\n    }\n\n    // V\xe9rifier les port\xe9es requises pour les ressources API au niveau de l\u2019organisation\n    $requiredScopes = ['api:read', 'api:write']; // Remplacez par vos port\xe9es requises\n    $scopes = !empty($payload['scope']) ? explode(' ', $payload['scope']) : [];\n\n    foreach ($requiredScopes as $scope) {\n        if (!in_array($scope, $scopes)) {\n            throw new AuthorizationException('Port\xe9es API au niveau de l\u2019organisation insuffisantes');\n        }\n    }\n}\n"})})})]})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},81068:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="AuthConstants.php"',children:"<?php\n\nclass AuthConstants\n{\n    public const JWKS_URI = 'https://your-tenant.logto.app/oidc/jwks';\n    public const ISSUER = 'https://your-tenant.logto.app/oidc';\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="AuthInfo.php"',children:"<?php\n\nclass AuthInfo\n{\n    public function __construct(\n        public readonly string $sub,\n        public readonly ?string $clientId = null,\n        public readonly ?string $organizationId = null,\n        public readonly array $scopes = [],\n        public readonly array $audience = []\n    ) {}\n\n    public function toArray(): array\n    {\n        return [\n            'sub' => $this->sub,\n            'client_id' => $this->clientId,\n            'organization_id' => $this->organizationId,\n            'scopes' => $this->scopes,\n            'audience' => $this->audience,\n        ];\n    }\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="AuthorizationException.php"',children:"<?php\n\nclass AuthorizationException extends Exception\n{\n    public function __construct(\n        string $message,\n        public readonly int $statusCode = 403\n    ) {\n        parent::__construct($message);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="AuthHelpers.php"',children:"<?php\n\ntrait AuthHelpers\n{\n    protected function extractBearerToken(array $headers): string\n    {\n        $authorization = $headers['authorization'][0] ?? $headers['Authorization'][0] ?? null;\n\n        if (!$authorization) {\n            throw new AuthorizationException('L\u2019en-t\xeate Authorization est manquant', 401);\n        }\n\n        if (!str_starts_with($authorization, 'Bearer ')) {\n            throw new AuthorizationException('L\u2019en-t\xeate Authorization doit commencer par \"Bearer \"', 401);\n        }\n\n        return substr($authorization, 7); // Supprimer le pr\xe9fixe 'Bearer '\n    }\n}\n"})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},46309:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="routes/api.php"',children:"<?php\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::middleware('auth.token')->group(function () {\n    Route::get('/api/protected', function (Request $request) {\n        // Acc\xe9der aux informations d'authentification \xe0 partir des attributs de la requ\xeate\n        $auth = $request->attributes->get('auth');\n        return ['auth' => $auth->toArray()];\n    });\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Ou en utilisant des contr\xf4leurs :"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="app/Http/Controllers/Api/ProtectedController.php"',children:"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\n\nclass ProtectedController extends Controller\n{\n    public function __construct()\n    {\n        $this->middleware('auth.token');\n    }\n\n    public function index(Request $request)\n    {\n        // Acc\xe9der aux informations d'authentification \xe0 partir des attributs de la requ\xeate\n        $auth = $request->attributes->get('auth');\n        return ['auth' => $auth->toArray()];\n    }\n\n    public function show(Request $request)\n    {\n        // Votre logique de point de terminaison prot\xe9g\xe9\n        $auth = $request->attributes->get('auth');\n        return [\n            'auth' => $auth->toArray(),\n            'message' => 'Donn\xe9es prot\xe9g\xe9es accessibles avec succ\xe8s'\n        ];\n    }\n}\n"})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},40181:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="src/Controllers/ProtectedController.php"',children:"<?php\n\nnamespace App\\Controllers;\n\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nclass ProtectedController\n{\n    public function index(Request $request, Response $response): Response\n    {\n        // Acc\xe9der aux informations d'authentification \xe0 partir des attributs de la requ\xeate\n        $auth = $request->getAttribute('auth');\n        $response->getBody()->write(json_encode(['auth' => $auth->toArray()]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function detailed(Request $request, Response $response): Response\n    {\n        // Votre logique de point de terminaison prot\xe9g\xe9\n        $auth = $request->getAttribute('auth');\n        $data = [\n            'auth' => $auth->toArray(),\n            'message' => 'Donn\xe9es prot\xe9g\xe9es accessibles avec succ\xe8s'\n        ];\n        $response->getBody()->write(json_encode($data));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n}\n"})})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},56853:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="src/Controller/Api/ProtectedController.php"',children:"<?php\n\nnamespace App\\Controller\\Api;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Security\\Http\\Attribute\\IsGranted;\n\n#[Route('/api/protected')]\n#[IsGranted('IS_AUTHENTICATED_FULLY')]\nclass ProtectedController extends AbstractController\n{\n    #[Route('', methods: ['GET'])]\n    public function index(Request $request): JsonResponse\n    {\n        // Acc\xe9der aux informations d'authentification \xe0 partir des attributs de la requ\xeate\n        $auth = $request->attributes->get('auth');\n        return $this->json(['auth' => $auth->toArray()]);\n    }\n}\n"})})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},54580:(e,n,t)=>{t.d(n,{Ay:()=>m,RM:()=>h});var r=t(25105),i=t(79621),o=t(33435),s=t(38552),a=t(22002);function c(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="auth_middleware.py"',children:"from django.http import JsonResponse\nfrom jwt_validator import validate_jwt, create_auth_info\n\ndef require_access_token(view_func):\n    def wrapper(request, *args, **kwargs):\n        try:\n            headers = {key.replace('HTTP_', '').replace('_', '-').lower(): value\n                      for key, value in request.META.items() if key.startswith('HTTP_')}\n\n            token = extract_bearer_token_from_headers(headers)\n            payload = validate_jwt(token)\n\n            # Attacher les informations d'authentification \xe0 la requ\xeate pour une utilisation g\xe9n\xe9rique\n            request.auth = create_auth_info(payload)\n\n            return view_func(request, *args, **kwargs)\n\n        except AuthorizationError as e:\n            return JsonResponse({'error': str(e)}, status=e.status)\n\n    return wrapper\n"})})}function u(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="auth_middleware.py"',children:"from rest_framework.authentication import TokenAuthentication\nfrom rest_framework import exceptions\nfrom jwt_validator import validate_jwt, create_auth_info\n\nclass AccessTokenAuthentication(TokenAuthentication):\n    keyword = 'Bearer'  # Utiliser 'Bearer' au lieu de 'Token'\n\n    def authenticate_credentials(self, key):\n        \"\"\"\n        Authentifier le jeton en le validant comme un JWT.\n        \"\"\"\n        try:\n            payload = validate_jwt(key)\n            auth_info = create_auth_info(payload)\n\n            # Cr\xe9er un objet de type utilisateur qui contient les informations d'authentification pour un usage g\xe9n\xe9rique\n            user = type('User', (), {\n                'auth': auth_info,\n                'is_authenticated': True,\n                'is_anonymous': False,\n                'is_active': True,\n            })()\n\n            return (user, key)\n\n        except AuthorizationError as e:\n            if e.status == 401:\n                raise exceptions.AuthenticationFailed(str(e))\n            else:  # 403\n                raise exceptions.PermissionDenied(str(e))\n"})})}function l(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="auth_middleware.py"',children:"from fastapi import HTTPException, Depends\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom jwt_validator import validate_jwt, create_auth_info\n\nsecurity = HTTPBearer()\n\nasync def verify_access_token(credentials: HTTPAuthorizationCredentials = Depends(security)) -> AuthInfo:\n    try:\n        token = credentials.credentials\n        payload = validate_jwt(token)\n        return create_auth_info(payload)\n\n    except AuthorizationError as e:\n        raise HTTPException(status_code=e.status, detail=str(e))\n"})})}function d(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="auth_middleware.py"',children:"from functools import wraps\nfrom flask import request, jsonify, g\nfrom jwt_validator import validate_jwt, create_auth_info\n\ndef verify_access_token(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        try:\n            token = extract_bearer_token_from_headers(dict(request.headers))\n            payload = validate_jwt(token)\n\n            # Stocker les informations d'authentification dans l'objet g de Flask pour une utilisation g\xe9n\xe9rique\n            g.auth = create_auth_info(payload)\n\n            return f(*args, **kwargs)\n\n        except AuthorizationError as e:\n            return jsonify({'error': str(e)}), e.status\n\n    return decorated_function\n"})})}const p=Object.freeze({fastapi:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}),{}),flask:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}),{}),django:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}),{}),"django-rest":(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}),{})}),h=[];function g(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Nous utilisons ",(0,r.jsx)(n.a,{href:"https://github.com/jpadilla/pyjwt",children:"PyJWT"})," pour valider les JWT. Installez-le si ce n'est pas d\xe9j\xe0 fait :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install pyjwt[crypto]\n"})}),"\n",(0,r.jsx)(n.p,{children:"Commencez par ajouter ces utilitaires partag\xe9s pour g\xe9rer la validation des JWT :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="jwt_validator.py"',children:"import jwt\nfrom jwt import PyJWKClient\nfrom typing import Dict, Any\nfrom auth_middleware import AuthInfo, AuthorizationError, JWKS_URI, ISSUER\n\njwks_client = PyJWKClient(JWKS_URI)\n\ndef validate_jwt(token: str) -> Dict[str, Any]:\n    \"\"\"Valider le JWT et retourner le payload\"\"\"\n    try:\n        signing_key = jwks_client.get_signing_key_from_jwt(token)\n\n        payload = jwt.decode(\n            token,\n            signing_key.key,\n            algorithms=['RS256'],\n            issuer=ISSUER,\n            options={'verify_aud': False}  # Nous v\xe9rifierons l'audience manuellement\n        )\n\n        verify_payload(payload)\n        return payload\n\n    except jwt.InvalidTokenError as e:\n        raise AuthorizationError(f'Jeton invalide : {str(e)}', 401)\n    except Exception as e:\n        raise AuthorizationError(f'\xc9chec de la validation du jeton : {str(e)}', 401)\n\ndef create_auth_info(payload: Dict[str, Any]) -> AuthInfo:\n    \"\"\"Cr\xe9er AuthInfo \xe0 partir du payload JWT\"\"\"\n    scopes = payload.get('scope', '').split(' ') if payload.get('scope') else []\n    audience = payload.get('aud', [])\n    if isinstance(audience, str):\n        audience = [audience]\n\n    return AuthInfo(\n        sub=payload.get('sub'),\n        client_id=payload.get('client_id'),\n        organization_id=payload.get('organization_id'),\n        scopes=scopes,\n        audience=audience\n    )\n\ndef verify_payload(payload: Dict[str, Any]) -> None:\n    \"\"\"V\xe9rifier le payload selon le mod\xe8le de permission\"\"\"\n    # Impl\xe9mentez ici votre logique de v\xe9rification selon le mod\xe8le de permission\n    # Ceci sera d\xe9taill\xe9 dans la section sur les mod\xe8les de permission ci-dessous\n    pass\n"})}),"\n",(0,r.jsx)(n.p,{children:"Ensuite, impl\xe9mentez le middleware pour v\xe9rifier le jeton d\u2019acc\xe8s (Access token) :"}),"\n",e.framework?p[e.framework]:(0,r.jsx)(a.A,{groupId:"api-framework",children:Object.entries(p).map((([e,n])=>(0,r.jsx)(s.A,{value:e,label:(0,o.My)(e),children:n},e)))}),"\n",(0,r.jsxs)(n.p,{children:["Selon votre mod\xe8le de permission, impl\xe9mentez la logique de v\xe9rification appropri\xe9e dans ",(0,r.jsx)(n.code,{children:"jwt_validator.py"})," :"]}),"\n",(0,r.jsxs)(a.A,{groupId:"permission-models",children:[(0,r.jsx)(s.A,{value:"global-api-resources",label:"Ressources API globales",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="jwt_validator.py"',children:"def verify_payload(payload: Dict[str, Any]) -> None:\n    \"\"\"V\xe9rifier le payload pour les ressources API globales\"\"\"\n    # V\xe9rifier que la revendication d'audience correspond \xe0 votre indicateur de ressource API\n    audiences = payload.get('aud', [])\n    if isinstance(audiences, str):\n        audiences = [audiences]\n\n    if 'https://your-api-resource-indicator' not in audiences:\n        raise AuthorizationError('Audience invalide')\n\n    # V\xe9rifier les port\xe9es requises pour les ressources API globales\n    required_scopes = ['api:read', 'api:write']  # Remplacez par vos port\xe9es requises\n    scopes = payload.get('scope', '').split(' ') if payload.get('scope') else []\n    if not all(scope in scopes for scope in required_scopes):\n        raise AuthorizationError('Port\xe9e insuffisante')\n"})})}),(0,r.jsx)(s.A,{value:"organization-permissions",label:"Permissions d\u2019organisation (hors API)",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="jwt_validator.py"',children:"def verify_payload(payload: Dict[str, Any]) -> None:\n    \"\"\"V\xe9rifier le payload pour les permissions d\u2019organisation\"\"\"\n    # V\xe9rifier que la revendication d'audience correspond au format d\u2019organisation\n    audiences = payload.get('aud', [])\n    if isinstance(audiences, str):\n        audiences = [audiences]\n\n    has_org_audience = any(aud.startswith('urn:logto:organization:') for aud in audiences)\n    if not has_org_audience:\n        raise AuthorizationError('Audience invalide pour les permissions d\u2019organisation')\n\n    # V\xe9rifier que l\u2019ID d\u2019organisation correspond au contexte (vous devrez peut-\xeatre l\u2019extraire du contexte de la requ\xeate)\n    expected_org_id = 'your-organization-id'  # \xc0 extraire du contexte de la requ\xeate\n    expected_aud = f'urn:logto:organization:{expected_org_id}'\n    if expected_aud not in audiences:\n        raise AuthorizationError('Incoh\xe9rence de l\u2019ID d\u2019organisation')\n\n    # V\xe9rifier les port\xe9es requises pour l\u2019organisation\n    required_scopes = ['invite:users', 'manage:settings']  # Remplacez par vos port\xe9es requises\n    scopes = payload.get('scope', '').split(' ') if payload.get('scope') else []\n    if not all(scope in scopes for scope in required_scopes):\n        raise AuthorizationError('Port\xe9e d\u2019organisation insuffisante')\n"})})}),(0,r.jsx)(s.A,{value:"organization-level-api-resources",label:"Ressources API au niveau organisation",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="jwt_validator.py"',children:"def verify_payload(payload: Dict[str, Any]) -> None:\n    \"\"\"V\xe9rifier le payload pour les ressources API au niveau organisation\"\"\"\n    # V\xe9rifier que la revendication d'audience correspond \xe0 votre indicateur de ressource API\n    audiences = payload.get('aud', [])\n    if isinstance(audiences, str):\n        audiences = [audiences]\n\n    if 'https://your-api-resource-indicator' not in audiences:\n        raise AuthorizationError('Audience invalide pour les ressources API au niveau organisation')\n\n    # V\xe9rifier que l\u2019ID d\u2019organisation correspond au contexte (vous devrez peut-\xeatre l\u2019extraire du contexte de la requ\xeate)\n    expected_org_id = 'your-organization-id'  # \xc0 extraire du contexte de la requ\xeate\n    org_id = payload.get('organization_id')\n    if expected_org_id != org_id:\n        raise AuthorizationError('Incoh\xe9rence de l\u2019ID d\u2019organisation')\n\n    # V\xe9rifier les port\xe9es requises pour les ressources API au niveau organisation\n    required_scopes = ['api:read', 'api:write']  # Remplacez par vos port\xe9es requises\n    scopes = payload.get('scope', '').split(' ') if payload.get('scope') else []\n    if not all(scope in scopes for scope in required_scopes):\n        raise AuthorizationError('Port\xe9es API au niveau organisation insuffisantes')\n"})})})]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},97304:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="auth_middleware.py"',children:"JWKS_URI = 'https://your-tenant.logto.app/oidc/jwks'\nISSUER = 'https://your-tenant.logto.app/oidc'\n\nclass AuthInfo:\n    def __init__(self, sub: str, client_id: str = None, organization_id: str = None,\n                 scopes: list = None, audience: list = None):\n        self.sub = sub\n        self.client_id = client_id\n        self.organization_id = organization_id\n        self.scopes = scopes or []\n        self.audience = audience or []\n\n    def to_dict(self):\n        return {\n            'sub': self.sub,\n            'client_id': self.client_id,\n            'organization_id': self.organization_id,\n            'scopes': self.scopes,\n            'audience': self.audience\n        }\n\nclass AuthorizationError(Exception):\n    def __init__(self, message: str, status: int = 403):\n        self.message = message\n        self.status = status\n        super().__init__(self.message)\n\ndef extract_bearer_token_from_headers(headers: dict) -> str:\n    \"\"\"\n    Extraire le jeton bearer des en-t\xeates HTTP.\n\n    Remarque : FastAPI et Django REST Framework disposent d'une extraction de jeton int\xe9gr\xe9e,\n    donc cette fonction est principalement destin\xe9e \xe0 Flask et \xe0 d'autres frameworks.\n    \"\"\"\n    authorization = headers.get('authorization') or headers.get('Authorization')\n\n    if not authorization:\n        raise AuthorizationError('L\u2019en-t\xeate Authorization est manquant', 401)\n\n    if not authorization.startswith('Bearer '):\n        raise AuthorizationError('L\u2019en-t\xeate Authorization doit commencer par \"Bearer \"', 401)\n\n    return authorization[7:]  # Supprimer le pr\xe9fixe 'Bearer '\n"})})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},54372:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="views.py"',children:"from rest_framework.decorators import api_view, authentication_classes\nfrom rest_framework.response import Response\nfrom auth_middleware import AccessTokenAuthentication\n\n@api_view(['GET'])\n@authentication_classes([AccessTokenAuthentication])\ndef protected_view(request):\n    # Acc\xe9der aux informations d'authentification depuis request.user.auth\n    return Response({\"auth\": request.user.auth.to_dict()})\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Ou en utilisant des vues bas\xe9es sur les classes :"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="views.py"',children:'from rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom auth_middleware import AccessTokenAuthentication\n\nclass ProtectedView(APIView):\n    authentication_classes = [AccessTokenAuthentication]\n\n    def get(self, request):\n        # Acc\xe9der aux informations d\'authentification depuis request.user.auth\n        return Response({"auth": request.user.auth.to_dict()})\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="urls.py"',children:"from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('api/protected/', views.protected_view, name='protected'),\n    # Ou pour les vues bas\xe9es sur les classes :\n    # path('api/protected/', views.ProtectedView.as_view(), name='protected'),\n]\n"})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},71323:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="views.py"',children:'from django.http import JsonResponse\nfrom auth_middleware import require_access_token\n\n@require_access_token\ndef protected_view(request):\n    # Acc\xe9der aux informations d\'authentification depuis request.auth\n    return JsonResponse({"auth": request.auth.to_dict()})\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="urls.py"',children:"from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('api/protected/', views.protected_view, name='protected'),\n]\n"})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},94498:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="app.py"',children:'from fastapi import FastAPI, Depends\nfrom auth_middleware import verify_access_token, AuthInfo\n\napp = FastAPI()\n\n@app.get("/api/protected")\nasync def protected_endpoint(auth: AuthInfo = Depends(verify_access_token)):\n    # Acc\xe9dez directement aux informations d\'authentification depuis le param\xe8tre auth\n    return {"auth": auth.to_dict()}\n'})})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},74839:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="app.py"',children:"from flask import Flask, g, jsonify\nfrom auth_middleware import verify_access_token\n\napp = Flask(__name__)\n\n@app.route('/api/protected', methods=['GET'])\n@verify_access_token\ndef protected_endpoint():\n    # Acc\xe9der aux informations d'authentification depuis g.auth\n    return jsonify({\"auth\": g.auth.to_dict()})\n"})})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},85732:(e,n,t)=>{t.d(n,{Ay:()=>g,RM:()=>p});var r=t(25105),i=t(79621),o=t(33435),s=t(38552),a=t(22002);function c(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="auth_helpers.rb"',children:"module GrapeAuthHelpers\n  include AuthHelpers\n\n  def authenticate_user!\n    begin\n      token = extract_bearer_token(request)\n      decoded_token = JwtValidator.validate_jwt(token)\n\n      # Stocker les informations d'authentification pour une utilisation g\xe9n\xe9rique\n      @auth = JwtValidator.create_auth_info(decoded_token)\n\n    rescue AuthorizationError => e\n      error!({ error: e.message }, e.status)\n    rescue JWT::DecodeError, JWT::VerificationError, JWT::ExpiredSignature => e\n      error!({ error: 'Jeton invalide' }, 401)\n    end\n  end\n\n  def auth\n    @auth\n  end\nend\n"})})}function u(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="app/controllers/concerns/jwt_authentication.rb"',children:"module JwtAuthentication\n  extend ActiveSupport::Concern\n  include AuthHelpers\n\n  included do\n    before_action :verify_access_token, only: [:protected_action] # Ajouter des actions sp\xe9cifiques\n  end\n\n  private\n\n  def verify_access_token\n    begin\n      token = extract_bearer_token(request)\n      decoded_token = JwtValidator.validate_jwt(token)\n\n      # Stocker les informations d'authentification pour une utilisation g\xe9n\xe9rique\n      @auth = JwtValidator.create_auth_info(decoded_token)\n\n    rescue AuthorizationError => e\n      render json: { error: e.message }, status: e.status\n    rescue JWT::DecodeError, JWT::VerificationError, JWT::ExpiredSignature => e\n      render json: { error: 'Jeton invalide' }, status: 401\n    end\n  end\nend\n"})})}function l(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="auth_middleware.rb"',children:"class AuthMiddleware\n  include AuthHelpers\n\n  def initialize(app)\n    @app = app\n  end\n\n  def call(env)\n    request = Rack::Request.new(env)\n\n    # Prot\xe9ger uniquement des routes sp\xe9cifiques\n    if request.path.start_with?('/api/protected')\n      begin\n        token = extract_bearer_token(request)\n        decoded_token = JwtValidator.validate_jwt(token)\n\n        # Stocker les informations d'authentification dans env pour un usage g\xe9n\xe9rique\n        env['auth'] = JwtValidator.create_auth_info(decoded_token)\n\n      rescue AuthorizationError => e\n        return [e.status, { 'Content-Type' => 'application/json' }, [{ error: e.message }.to_json]]\n      rescue JWT::DecodeError, JWT::VerificationError, JWT::ExpiredSignature => e\n        return [401, { 'Content-Type' => 'application/json' }, [{ error: 'Invalid token' }.to_json]]\n      end\n    end\n\n    @app.call(env)\n  end\nend\n"})})}const d=Object.freeze({rails:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}),{}),sinatra:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}),{}),grape:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}),{})}),p=[];function h(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Nous utilisons la gem ",(0,r.jsx)(n.a,{href:"https://github.com/jwt/ruby-jwt",children:"jwt"})," pour valider les JWT. Ajoutez-la \xe0 votre Gemfile :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="Gemfile"',children:"gem 'jwt'\n# net-http fait partie de la biblioth\xe8que standard Ruby depuis Ruby 2.7, inutile de l\u2019ajouter explicitement\n"})}),"\n",(0,r.jsx)(n.p,{children:"Puis ex\xe9cutez :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bundle install\n"})}),"\n",(0,r.jsx)(n.p,{children:"Ajoutez d'abord ces utilitaires partag\xe9s pour g\xe9rer les JWKS et la validation des jetons :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="jwt_validator.rb"',children:"require 'jwt'\nrequire 'net/http'\nrequire 'json'\n\nclass JwtValidator\n  include AuthHelpers\n\n  def self.fetch_jwks\n    @jwks ||= begin\n      uri = URI(AuthConstants::JWKS_URI)\n      response = Net::HTTP.get_response(uri)\n      raise AuthorizationError.new('Failed to fetch JWKS', 401) unless response.is_a?(Net::HTTPSuccess)\n\n      jwks_data = JSON.parse(response.body)\n      JWT::JWK::Set.new(jwks_data)\n    end\n  end\n\n  def self.validate_jwt(token)\n    jwks = fetch_jwks\n\n    # Laissez la biblioth\xe8que JWT g\xe9rer la d\xe9tection de l\u2019algorithme \xe0 partir du JWKS\n    decoded_token = JWT.decode(token, nil, true, {\n      iss: AuthConstants::ISSUER,\n      verify_iss: true,\n      verify_aud: false, # Nous v\xe9rifierons l\u2019audience manuellement selon le mod\xe8le de permission\n      jwks: jwks\n    })[0]\n\n    verify_payload(decoded_token)\n    decoded_token\n  end\n\n  def self.create_auth_info(payload)\n    scopes = payload['scope']&.split(' ') || []\n    audience = payload['aud'] || []\n\n    AuthInfo.new(\n      payload['sub'],\n      payload['client_id'],\n      payload['organization_id'],\n      scopes,\n      audience\n    )\n  end\n\n  def self.verify_payload(payload)\n    # Impl\xe9mentez ici votre logique de v\xe9rification selon le mod\xe8le de permission\n    # Cela sera montr\xe9 dans la section sur les mod\xe8les de permission ci-dessous\n  end\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:"Ensuite, impl\xe9mentez le middleware pour v\xe9rifier le jeton d\u2019acc\xe8s (access token) :"}),"\n",e.framework?d[e.framework]:(0,r.jsx)(a.A,{groupId:"api-framework",children:Object.entries(d).map((([e,n])=>(0,r.jsx)(s.A,{value:e,label:(0,o.My)(e),children:n},e)))}),"\n",(0,r.jsxs)(n.p,{children:["Selon votre mod\xe8le de permission, impl\xe9mentez la logique de v\xe9rification appropri\xe9e dans ",(0,r.jsx)(n.code,{children:"JwtValidator"})," :"]}),"\n",(0,r.jsxs)(a.A,{groupId:"permission-models",children:[(0,r.jsx)(s.A,{value:"global-api-resources",label:"Ressources API globales",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="jwt_validator.rb"',children:"def self.verify_payload(payload)\n  # V\xe9rifiez que la revendication d\u2019audience correspond \xe0 votre indicateur de ressource API\n  audiences = payload['aud'] || []\n  unless audiences.include?('https://your-api-resource-indicator')\n    raise AuthorizationError.new('Invalid audience')\n  end\n\n  # V\xe9rifiez les port\xe9es requises pour les ressources API globales\n  required_scopes = ['api:read', 'api:write'] # Remplacez par vos port\xe9es requises\n  token_scopes = payload['scope']&.split(' ') || []\n\n  unless required_scopes.all? { |scope| token_scopes.include?(scope) }\n    raise AuthorizationError.new('Insufficient scope')\n  end\nend\n"})})}),(0,r.jsx)(s.A,{value:"organization-permissions",label:"Permissions d\u2019organisation (hors API)",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="jwt_validator.rb"',children:"def self.verify_payload(payload)\n  # V\xe9rifiez que la revendication d\u2019audience correspond au format d\u2019organisation\n  audiences = payload['aud'] || []\n  has_org_audience = audiences.any? { |aud| aud.start_with?('urn:logto:organization:') }\n\n  unless has_org_audience\n    raise AuthorizationError.new('Invalid audience for organization permissions')\n  end\n\n  # V\xe9rifiez que l\u2019ID d\u2019organisation correspond au contexte (vous devrez peut-\xeatre l\u2019extraire du contexte de la requ\xeate)\n  expected_org_id = 'your-organization-id' # \xc0 extraire du contexte de la requ\xeate\n  expected_aud = \"urn:logto:organization:#{expected_org_id}\"\n  unless audiences.include?(expected_aud)\n    raise AuthorizationError.new('Organization ID mismatch')\n  end\n\n  # V\xe9rifiez les port\xe9es requises pour l\u2019organisation\n  required_scopes = ['invite:users', 'manage:settings'] # Remplacez par vos port\xe9es requises\n  token_scopes = payload['scope']&.split(' ') || []\n\n  unless required_scopes.all? { |scope| token_scopes.include?(scope) }\n    raise AuthorizationError.new('Insufficient organization scope')\n  end\nend\n"})})}),(0,r.jsx)(s.A,{value:"organization-level-api-resources",label:"Ressources API au niveau de l\u2019organisation",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="jwt_validator.rb"',children:"def self.verify_payload(payload)\n  # V\xe9rifiez que la revendication d\u2019audience correspond \xe0 votre indicateur de ressource API\n  audiences = payload['aud'] || []\n  unless audiences.include?('https://your-api-resource-indicator')\n    raise AuthorizationError.new('Invalid audience for organization-level API resources')\n  end\n\n  # V\xe9rifiez que l\u2019ID d\u2019organisation correspond au contexte (vous devrez peut-\xeatre l\u2019extraire du contexte de la requ\xeate)\n  expected_org_id = 'your-organization-id' # \xc0 extraire du contexte de la requ\xeate\n  org_id = payload['organization_id']\n  unless expected_org_id == org_id\n    raise AuthorizationError.new('Organization ID mismatch')\n  end\n\n  # V\xe9rifiez les port\xe9es requises pour les ressources API au niveau de l\u2019organisation\n  required_scopes = ['api:read', 'api:write'] # Remplacez par vos port\xe9es requises\n  token_scopes = payload['scope']&.split(' ') || []\n\n  unless required_scopes.all? { |scope| token_scopes.include?(scope) }\n    raise AuthorizationError.new('Insufficient organization-level API scopes')\n  end\nend\n"})})})]})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},29714:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="auth_constants.rb"',children:"module AuthConstants\n  JWKS_URI = 'https://your-tenant.logto.app/oidc/jwks'\n  ISSUER = 'https://your-tenant.logto.app/oidc'\nend\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="auth_info.rb"',children:"class AuthInfo\n  attr_accessor :sub, :client_id, :organization_id, :scopes, :audience\n\n  def initialize(sub, client_id = nil, organization_id = nil, scopes = [], audience = [])\n    @sub = sub\n    @client_id = client_id\n    @organization_id = organization_id\n    @scopes = scopes\n    @audience = audience\n  end\n\n  def to_h\n    {\n      sub: @sub,\n      client_id: @client_id,\n      organization_id: @organization_id,\n      scopes: @scopes,\n      audience: @audience\n    }\n  end\nend\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="authorization_error.rb"',children:"class AuthorizationError < StandardError\n  attr_reader :status\n\n  def initialize(message, status = 403)\n    super(message)\n    @status = status\n  end\nend\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="auth_helpers.rb"',children:"module AuthHelpers\n  def extract_bearer_token(request)\n    authorization = request.headers['Authorization']\n\n    raise AuthorizationError.new('Authorization header is missing', 401) unless authorization\n    raise AuthorizationError.new('Authorization header must start with \"Bearer \"', 401) unless authorization.start_with?('Bearer ')\n\n    authorization[7..-1] # Supprimer le pr\xe9fixe 'Bearer '\n  end\nend\n"})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},93081:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="api.rb"',children:"require 'grape'\nrequire_relative 'auth_helpers'\nrequire_relative 'auth_constants'\nrequire_relative 'auth_info'\nrequire_relative 'authorization_error'\nrequire_relative 'jwt_validator'\n\nclass API < Grape::API\n  format :json\n\n  helpers GrapeAuthHelpers\n\n  namespace :api do\n    namespace :protected do\n      before do\n        authenticate_user!\n      end\n\n      get do\n        # Acc\xe9der aux informations d'authentification depuis l'assistant d'authentification\n        { auth: auth.to_h }\n      end\n    end\n  end\n\n  # Point de terminaison public (non prot\xe9g\xe9)\n  get :public do\n    { message: \"Point de terminaison public\" }\n  end\nend\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="config.ru"',children:"require_relative 'api'\n\nrun API\n"})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},16315:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="app/controllers/application_controller.rb"',children:"class ApplicationController < ActionController::API # Pour les applications API uniquement\n# class ApplicationController < ActionController::Base # Pour les applications Rails compl\xe8tes\n  include JwtAuthentication\nend\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="app/controllers/api/protected_controller.rb"',children:"class Api::ProtectedController < ApplicationController\n  before_action :verify_access_token\n\n  def index\n    # Acc\xe9der aux informations d'authentification depuis @auth\n    render json: { auth: @auth.to_h }\n  end\nend\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="config/routes.rb"',children:"Rails.application.routes.draw do\n  namespace :api do\n    resources :protected, only: [:index]\n  end\nend\n"})})]})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},11972:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="app.rb"',children:"require 'sinatra'\nrequire 'json'\nrequire_relative 'auth_middleware'\nrequire_relative 'auth_constants'\nrequire_relative 'auth_info'\nrequire_relative 'authorization_error'\nrequire_relative 'auth_helpers'\nrequire_relative 'jwt_validator'\n\n# Appliquer le middleware\nuse AuthMiddleware\n\nget '/api/protected' do\n  content_type :json\n\n  # Acc\xe9der aux informations d'authentification depuis env\n  auth = env['auth']\n  { auth: auth.to_h }.to_json\nend\n\n# Point de terminaison public (non prot\xe9g\xe9 par le middleware)\nget '/' do\n  content_type :json\n  { message: \"Point de terminaison public\" }.to_json\nend\n"})})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},45651:(e,n,t)=>{t.d(n,{Ay:()=>g,RM:()=>p});var r=t(25105),i=t(79621),o=t(33435),s=t(38552),a=t(22002);function c(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="middleware.rs"',children:"use crate::{AuthInfo, AuthorizationError, extract_bearer_token};\nuse crate::jwt_validator::JwtValidator;\nuse actix_web::{\n    dev::{forward_ready, Service, ServiceRequest, ServiceResponse, Transform},\n    web, Error, HttpMessage, HttpResponse,\n};\nuse futures::future::{ok, Ready};\nuse std::sync::Arc;\n\npub struct JwtMiddleware {\n    validator: Arc<JwtValidator>,\n}\n\nimpl JwtMiddleware {\n    pub fn new(validator: Arc<JwtValidator>) -> Self {\n        Self { validator }\n    }\n}\n\nimpl<S, B> Transform<S, ServiceRequest> for JwtMiddleware\nwhere\n    S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error>,\n    S::Future: 'static,\n    B: 'static,\n{\n    type Response = ServiceResponse<B>;\n    type Error = Error;\n    type InitError = ();\n    type Transform = JwtMiddlewareService<S>;\n    type Future = Ready<Result<Self::Transform, Self::InitError>>;\n\n    fn new_transform(&self, service: S) -> Self::Future {\n        ok(JwtMiddlewareService {\n            service,\n            validator: self.validator.clone(),\n        })\n    }\n}\n\npub struct JwtMiddlewareService<S> {\n    service: S,\n    validator: Arc<JwtValidator>,\n}\n\nimpl<S, B> Service<ServiceRequest> for JwtMiddlewareService<S>\nwhere\n    S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error>,\n    S::Future: 'static,\n    B: 'static,\n{\n    type Response = ServiceResponse<B>;\n    type Error = Error;\n    type Future = futures::future::LocalBoxFuture<'static, Result<Self::Response, Self::Error>>;\n\n    forward_ready!(service);\n\n    fn call(&self, req: ServiceRequest) -> Self::Future {\n        let validator = self.validator.clone();\n\n        Box::pin(async move {\n            let authorization = req\n                .headers()\n                .get(\"authorization\")\n                .and_then(|h| h.to_str().ok());\n\n            match extract_bearer_token(authorization)\n                .and_then(|token| validator.validate_jwt(token))\n            {\n                Ok(auth_info) => {\n                    // Stocker les informations d'authentification dans les extensions de la requ\xeate pour un usage g\xe9n\xe9rique\n                    req.extensions_mut().insert(auth_info);\n                    let fut = self.service.call(req);\n                    fut.await\n                }\n                Err(e) => {\n                    let response = HttpResponse::build(\n                        actix_web::http::StatusCode::from_u16(e.status_code)\n                            .unwrap_or(actix_web::http::StatusCode::FORBIDDEN),\n                    )\n                    .json(serde_json::json!({ \"error\": e.message }));\n\n                    Ok(req.into_response(response))\n                }\n            }\n        })\n    }\n}\n"})})}function u(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="middleware.rs"',children:'use crate::{AuthInfo, AuthorizationError, extract_bearer_token};\nuse crate::jwt_validator::JwtValidator;\nuse axum::{\n    extract::Request,\n    http::{HeaderMap, StatusCode},\n    middleware::Next,\n    response::{IntoResponse, Response},\n    Extension, Json,\n};\nuse serde_json::json;\nuse std::sync::Arc;\n\n// Middleware JWT pour la v\xe9rification de l\'autorisation (Authorization)\npub async fn jwt_middleware(\n    Extension(validator): Extension<Arc<JwtValidator>>,\n    headers: HeaderMap,\n    mut request: Request,\n    next: Next,\n) -> Result<Response, AuthorizationError> {\n    let authorization = headers\n        .get("authorization")\n        .and_then(|h| h.to_str().ok());\n\n    let token = extract_bearer_token(authorization)?;\n    let auth_info = validator.validate_jwt(token)?;\n\n    // Stocker les informations d\'authentification (Authentication) dans les extensions de la requ\xeate pour un usage g\xe9n\xe9rique\n    request.extensions_mut().insert(auth_info);\n\n    Ok(next.run(request).await)\n}\n\nimpl IntoResponse for AuthorizationError {\n    fn into_response(self) -> Response {\n        let status = StatusCode::from_u16(self.status_code).unwrap_or(StatusCode::FORBIDDEN);\n        (status, Json(json!({ "error": self.message }))).into_response()\n    }\n}\n'})})}function l(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="guards.rs"',children:"use crate::{AuthInfo, AuthorizationError, extract_bearer_token};\nuse crate::jwt_validator::JwtValidator;\nuse rocket::{\n    http::Status,\n    outcome::Outcome,\n    request::{self, FromRequest, Request},\n    State,\n};\n\n#[rocket::async_trait]\nimpl<'r> FromRequest<'r> for AuthInfo {\n    type Error = AuthorizationError;\n\n    async fn from_request(req: &'r Request<'_>) -> request::Outcome<Self, Self::Error> {\n        let validator = match req.guard::<&State<JwtValidator>>().await {\n            Outcome::Success(validator) => validator,\n            Outcome::Failure((status, _)) => {\n                return Outcome::Failure((\n                    status,\n                    AuthorizationError::with_status(\"JWT validator not found\", 500),\n                ))\n            }\n            Outcome::Forward(()) => {\n                return Outcome::Forward(())\n            }\n        };\n\n        let authorization = req.headers().get_one(\"authorization\");\n\n        match extract_bearer_token(authorization)\n            .and_then(|token| validator.validate_jwt(token))\n        {\n            Ok(auth_info) => Outcome::Success(auth_info),\n            Err(e) => {\n                let status = Status::from_code(e.status_code).unwrap_or(Status::Forbidden);\n                Outcome::Failure((status, e))\n            }\n        }\n    }\n}\n"})})}const d=Object.freeze({axum:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}),{}),"actix-web":(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}),{}),rocket:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}),{})}),p=[];function h(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Nous utilisons ",(0,r.jsx)(n.a,{href:"https://github.com/Keats/jsonwebtoken",children:"jsonwebtoken"})," pour valider les JWT. Ajoutez les d\xe9pendances requises \xe0 votre ",(0,r.jsx)(n.code,{children:"Cargo.toml"})," :"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",metastring:'title="Cargo.toml"',children:'[dependencies]\njsonwebtoken = "9.0"\nserde = { version = "1.0", features = ["derive"] }\nserde_json = "1.0"\nreqwest = { version = "0.11", features = ["json"] }\ntokio = { version = "1.0", features = ["full"] }\n'})}),"\n",(0,r.jsx)(n.p,{children:"Commencez par ajouter ces utilitaires partag\xe9s pour g\xe9rer la validation des JWT :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="jwt_validator.rs"',children:'use crate::{AuthInfo, AuthorizationError, ISSUER, JWKS_URI};\nuse jsonwebtoken::{decode, decode_header, Algorithm, DecodingKey, Validation};\nuse serde_json::Value;\nuse std::collections::HashMap;\n\npub struct JwtValidator {\n    jwks: HashMap<String, DecodingKey>,\n}\n\nimpl JwtValidator {\n    pub async fn new() -> Result<Self, AuthorizationError> {\n        let jwks = Self::fetch_jwks().await?;\n        Ok(Self { jwks })\n    }\n\n    async fn fetch_jwks() -> Result<HashMap<String, DecodingKey>, AuthorizationError> {\n        let response = reqwest::get(JWKS_URI).await.map_err(|e| {\n            AuthorizationError::with_status(format!("Failed to fetch JWKS: {}", e), 401)\n        })?;\n\n        let jwks: Value = response.json().await.map_err(|e| {\n            AuthorizationError::with_status(format!("Failed to parse JWKS: {}", e), 401)\n        })?;\n\n        let mut keys = HashMap::new();\n\n        if let Some(keys_array) = jwks["keys"].as_array() {\n            for key in keys_array {\n                if let (Some(kid), Some(kty), Some(n), Some(e)) = (\n                    key["kid"].as_str(),\n                    key["kty"].as_str(),\n                    key["n"].as_str(),\n                    key["e"].as_str(),\n                ) {\n                    if kty == "RSA" {\n                        if let Ok(decoding_key) = DecodingKey::from_rsa_components(n, e) {\n                            keys.insert(kid.to_string(), decoding_key);\n                        }\n                    }\n                }\n            }\n        }\n\n        if keys.is_empty() {\n            return Err(AuthorizationError::with_status("No valid keys found in JWKS", 401));\n        }\n\n        Ok(keys)\n    }\n\n    pub fn validate_jwt(&self, token: &str) -> Result<AuthInfo, AuthorizationError> {\n        let header = decode_header(token).map_err(|e| {\n            AuthorizationError::with_status(format!("Invalid token header: {}", e), 401)\n        })?;\n\n        let kid = header.kid.ok_or_else(|| {\n            AuthorizationError::with_status("Token missing kid claim", 401)\n        })?;\n\n        let key = self.jwks.get(&kid).ok_or_else(|| {\n            AuthorizationError::with_status("Unknown key ID", 401)\n        })?;\n\n        let mut validation = Validation::new(Algorithm::RS256);\n        validation.set_issuer(&[ISSUER]);\n        validation.validate_aud = false; // Nous v\xe9rifierons l\'audience manuellement\n\n        let token_data = decode::<Value>(token, key, &validation).map_err(|e| {\n            AuthorizationError::with_status(format!("Invalid token: {}", e), 401)\n        })?;\n\n        let claims = token_data.claims;\n        self.verify_payload(&claims)?;\n\n        Ok(self.create_auth_info(claims))\n    }\n\n    fn verify_payload(&self, claims: &Value) -> Result<(), AuthorizationError> {\n        // Impl\xe9mentez ici votre logique de v\xe9rification bas\xe9e sur le mod\xe8le de permission\n        // Ceci sera d\xe9taill\xe9 dans la section sur les mod\xe8les de permission ci-dessous\n        Ok(())\n    }\n\n    fn create_auth_info(&self, claims: Value) -> AuthInfo {\n        let scopes = claims["scope"]\n            .as_str()\n            .map(|s| s.split(\' \').map(|s| s.to_string()).collect())\n            .unwrap_or_default();\n\n        let audience = match &claims["aud"] {\n            Value::Array(arr) => arr.iter().filter_map(|v| v.as_str().map(|s| s.to_string())).collect(),\n            Value::String(s) => vec![s.clone()],\n            _ => vec![],\n        };\n\n        AuthInfo::new(\n            claims["sub"].as_str().unwrap_or_default().to_string(),\n            claims["client_id"].as_str().map(|s| s.to_string()),\n            claims["organization_id"].as_str().map(|s| s.to_string()),\n            scopes,\n            audience,\n        )\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Ensuite, impl\xe9mentez le middleware pour v\xe9rifier le jeton d\u2019acc\xe8s (Access token) :"}),"\n",e.framework?d[e.framework]:(0,r.jsx)(a.A,{groupId:"api-framework",children:Object.entries(d).map((([e,n])=>(0,r.jsx)(s.A,{value:e,label:(0,o.My)(e),children:n},e)))}),"\n",(0,r.jsxs)(n.p,{children:["Selon votre mod\xe8le de permission, impl\xe9mentez la logique de v\xe9rification appropri\xe9e dans ",(0,r.jsx)(n.code,{children:"JwtValidator"})," :"]}),"\n",(0,r.jsxs)(a.A,{groupId:"permission-models",children:[(0,r.jsx)(s.A,{value:"global-api-resources",label:"Ressources API globales",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="jwt_validator.rs"',children:'fn verify_payload(&self, claims: &Value) -> Result<(), AuthorizationError> {\n    // V\xe9rifiez que la revendication d\'audience correspond \xe0 votre indicateur de ressource API\n    let audiences = match &claims["aud"] {\n        Value::Array(arr) => arr.iter().filter_map(|v| v.as_str()).collect::<Vec<_>>(),\n        Value::String(s) => vec![s.as_str()],\n        _ => vec![],\n    };\n\n    if !audiences.contains(&"https://your-api-resource-indicator") {\n        return Err(AuthorizationError::new("Invalid audience"));\n    }\n\n    // V\xe9rifiez les port\xe9es requises pour les ressources API globales\n    let required_scopes = vec!["api:read", "api:write"]; // Remplacez par vos port\xe9es requises\n    let scopes = claims["scope"]\n        .as_str()\n        .map(|s| s.split(\' \').collect::<Vec<_>>())\n        .unwrap_or_default();\n\n    for required_scope in &required_scopes {\n        if !scopes.contains(required_scope) {\n            return Err(AuthorizationError::new("Insufficient scope"));\n        }\n    }\n\n    Ok(())\n}\n'})})}),(0,r.jsx)(s.A,{value:"organization-permissions",label:"Permissions d\u2019organisation (hors API)",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="jwt_validator.rs"',children:'fn verify_payload(&self, claims: &Value) -> Result<(), AuthorizationError> {\n    // V\xe9rifiez que la revendication d\'audience correspond au format d\'organisation\n    let audiences = match &claims["aud"] {\n        Value::Array(arr) => arr.iter().filter_map(|v| v.as_str()).collect::<Vec<_>>(),\n        Value::String(s) => vec![s.as_str()],\n        _ => vec![],\n    };\n\n    let has_org_audience = audiences.iter().any(|aud| aud.starts_with("urn:logto:organization:"));\n    if !has_org_audience {\n        return Err(AuthorizationError::new("Invalid audience for organization permissions"));\n    }\n\n    // V\xe9rifiez que l\u2019ID d\u2019organisation correspond au contexte (vous devrez peut-\xeatre l\u2019extraire du contexte de la requ\xeate)\n    let expected_org_id = "your-organization-id"; // \xc0 extraire du contexte de la requ\xeate\n    let expected_aud = format!("urn:logto:organization:{}", expected_org_id);\n    if !audiences.contains(&expected_aud.as_str()) {\n        return Err(AuthorizationError::new("Organization ID mismatch"));\n    }\n\n    // V\xe9rifiez les port\xe9es requises pour l\u2019organisation\n    let required_scopes = vec!["invite:users", "manage:settings"]; // Remplacez par vos port\xe9es requises\n    let scopes = claims["scope"]\n        .as_str()\n        .map(|s| s.split(\' \').collect::<Vec<_>>())\n        .unwrap_or_default();\n\n    for required_scope in &required_scopes {\n        if !scopes.contains(required_scope) {\n            return Err(AuthorizationError::new("Insufficient organization scope"));\n        }\n    }\n\n    Ok(())\n}\n'})})}),(0,r.jsx)(s.A,{value:"organization-level-api-resources",label:"Ressources API au niveau de l\u2019organisation",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="jwt_validator.rs"',children:'fn verify_payload(&self, claims: &Value) -> Result<(), AuthorizationError> {\n    // V\xe9rifiez que la revendication d\'audience correspond \xe0 votre indicateur de ressource API\n    let audiences = match &claims["aud"] {\n        Value::Array(arr) => arr.iter().filter_map(|v| v.as_str()).collect::<Vec<_>>(),\n        Value::String(s) => vec![s.as_str()],\n        _ => vec![],\n    };\n\n    if !audiences.contains(&"https://your-api-resource-indicator") {\n        return Err(AuthorizationError::new("Invalid audience for organization-level API resources"));\n    }\n\n    // V\xe9rifiez que l\u2019ID d\u2019organisation correspond au contexte (vous devrez peut-\xeatre l\u2019extraire du contexte de la requ\xeate)\n    let expected_org_id = "your-organization-id"; // \xc0 extraire du contexte de la requ\xeate\n    let org_id = claims["organization_id"].as_str().unwrap_or_default();\n    if expected_org_id != org_id {\n        return Err(AuthorizationError::new("Organization ID mismatch"));\n    }\n\n    // V\xe9rifiez les port\xe9es requises pour les ressources API au niveau de l\u2019organisation\n    let required_scopes = vec!["api:read", "api:write"]; // Remplacez par vos port\xe9es requises\n    let scopes = claims["scope"]\n        .as_str()\n        .map(|s| s.split(\' \').collect::<Vec<_>>())\n        .unwrap_or_default();\n\n    for required_scope in &required_scopes {\n        if !scopes.contains(required_scope) {\n            return Err(AuthorizationError::new("Insufficient organization-level API scopes"));\n        }\n    }\n\n    Ok(())\n}\n'})})})]})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},21688:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="lib.rs"',children:'use serde::{Deserialize, Serialize};\nuse std::fmt;\n\npub const JWKS_URI: &str = "https://your-tenant.logto.app/oidc/jwks";\npub const ISSUER: &str = "https://your-tenant.logto.app/oidc";\n\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub struct AuthInfo {\n    pub sub: String,\n    pub client_id: Option<String>,\n    pub organization_id: Option<String>,\n    pub scopes: Vec<String>,\n    pub audience: Vec<String>,\n}\n\nimpl AuthInfo {\n    pub fn new(\n        sub: String,\n        client_id: Option<String>,\n        organization_id: Option<String>,\n        scopes: Vec<String>,\n        audience: Vec<String>,\n    ) -> Self {\n        Self {\n            sub,\n            client_id,\n            organization_id,\n            scopes,\n            audience,\n        }\n    }\n}\n\n#[derive(Debug)]\npub struct AuthorizationError {\n    pub message: String,\n    pub status_code: u16,\n}\n\nimpl AuthorizationError {\n    pub fn new(message: impl Into<String>) -> Self {\n        Self {\n            message: message.into(),\n            status_code: 403,\n        }\n    }\n\n    pub fn with_status(message: impl Into<String>, status_code: u16) -> Self {\n        Self {\n            message: message.into(),\n            status_code,\n        }\n    }\n}\n\nimpl fmt::Display for AuthorizationError {\n    fn fmt(&self, f: &mut fmt::Formatter<\'_>) -> fmt::Result {\n        write!(f, "{}", self.message)\n    }\n}\n\nimpl std::error::Error for AuthorizationError {}\n\npub fn extract_bearer_token(authorization: Option<&str>) -> Result<&str, AuthorizationError> {\n    let auth_header = authorization.ok_or_else(|| {\n        AuthorizationError::with_status("Le header Authorization est manquant (Authorization header is missing)", 401)\n    })?;\n\n    if !auth_header.starts_with("Bearer ") {\n        return Err(AuthorizationError::with_status(\n            "Le header Authorization doit commencer par \\"Bearer \\" (Authorization header must start with \\"Bearer \\")",\n            401,\n        ));\n    }\n\n    Ok(&auth_header[7..]) // Supprime le pr\xe9fixe \'Bearer \' (Remove \'Bearer \' prefix)\n}\n'})})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},28342:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="main.rs"',children:'use actix_web::{middleware::Logger, web, App, HttpRequest, HttpServer, Result};\nuse serde_json::{json, Value};\nuse std::sync::Arc;\n\nmod lib;\nmod jwt_validator;\nmod middleware as jwt_middleware;\n\nuse lib::AuthInfo;\nuse jwt_validator::JwtValidator;\nuse jwt_middleware::JwtMiddleware;\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    let validator = Arc::new(JwtValidator::new().await.expect("\xc9chec de l\'initialisation du validateur JWT"));\n\n    HttpServer::new(move || {\n        App::new()\n            .app_data(web::Data::new(validator.clone()))\n            .wrap(Logger::default())\n            .service(\n                web::scope("/api/protected")\n                    .wrap(JwtMiddleware::new(validator.clone()))\n                    .route("", web::get().to(protected_handler))\n            )\n    })\n    .bind("127.0.0.1:8080")?\n    .run()\n    .await\n}\n\nasync fn protected_handler(req: HttpRequest) -> Result<web::Json<Value>> {\n    // Acc\xe9der aux informations d\'authentification \xe0 partir des extensions de la requ\xeate\n    let auth = req.extensions().get::<AuthInfo>().unwrap();\n    Ok(web::Json(json!({ "auth": auth })))\n}\n'})})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},86947:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="main.rs"',children:'use axum::{\n    extract::Extension,\n    http::StatusCode,\n    middleware,\n    response::Json,\n    routing::get,\n    Router,\n};\nuse serde_json::{json, Value};\nuse std::sync::Arc;\nuse tower_http::cors::CorsLayer;\n\nmod lib;\nmod jwt_validator;\nmod middleware as jwt_middleware;\n\nuse lib::AuthInfo;\nuse jwt_validator::JwtValidator;\n\n#[tokio::main]\nasync fn main() {\n    let validator = Arc::new(JwtValidator::new().await.expect("\xc9chec de l\'initialisation du validateur JWT"));\n\n    let app = Router::new()\n        .route("/api/protected", get(protected_handler))\n        .layer(middleware::from_fn(jwt_middleware::jwt_middleware))\n        .layer(Extension(validator))\n        .layer(CorsLayer::permissive());\n\n    let listener = tokio::net::TcpListener::bind("0.0.0.0:3000").await.unwrap();\n    axum::serve(listener, app).await.unwrap();\n}\n\nasync fn protected_handler(Extension(auth): Extension<AuthInfo>) -> Json<Value> {\n    // Acc\xe9dez directement aux informations d\'authentification depuis Extension\n    Json(json!({ "auth": auth }))\n}\n'})})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},34228:(e,n,t)=>{t.d(n,{Ay:()=>a,RM:()=>o});var r=t(25105),i=t(79621);const o=[];function s(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="main.rs"',children:'use rocket::{get, launch, routes, serde::json::Json};\nuse serde_json::{json, Value};\n\nmod lib;\nmod jwt_validator;\nmod guards;\n\nuse lib::AuthInfo;\nuse jwt_validator::JwtValidator;\n\n#[get("/api/protected")]\nfn protected_handler(auth: AuthInfo) -> Json<Value> {\n    // Acc\xe9dez directement aux informations d\'authentification depuis le request guard (Access auth information directly from request guard)\n    Json(json!({ "auth": auth }))\n}\n\n#[launch]\nasync fn rocket() -> _ {\n    let validator = JwtValidator::new().await.expect("\xc9chec de l\'initialisation du validateur JWT (Failed to initialize JWT validator)");\n\n    rocket::build()\n        .manage(validator)\n        .mount("/", routes![protected_handler])\n}\n'})})}function a(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(s,{...e})}):s(e)}},38552:(e,n,t)=>{t.d(n,{A:()=>s});t(58101);var r=t(13526);const i={tabItem:"tabItem_dgSZ"};var o=t(25105);function s(e){let{children:n,hidden:t,className:s}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,s),hidden:t,children:n})}},22002:(e,n,t)=>{t.d(n,{A:()=>w});var r=t(58101),i=t(13526),o=t(60755),s=t(55234),a=t(6635),c=t(4100),u=t(35661),l=t(42752);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return d(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:i}}=e;return{value:n,label:t,attributes:r,default:i}}))}(t);return function(e){const n=(0,u.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:t}=e;const i=(0,s.W6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c.aZ)(o),(0,r.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(i.location.search);n.set(o,e),i.replace({...i.location,search:n.toString()})}),[o,i])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,o=p(e),[s,c]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:o}))),[u,d]=g({queryString:t,groupId:i}),[m,x]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,o]=(0,l.Dv)(t);return[i,(0,r.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:i}),f=(()=>{const e=u??m;return h({value:e,tabValues:o})?e:null})();(0,a.A)((()=>{f&&c(f)}),[f]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);c(e),d(e),x(e)}),[d,x,o]),tabValues:o}}var x=t(21929);const f={tabList:"tabList_osvQ",tabItem:"tabItem_dc4O"};var j=t(25105);function v(e){let{className:n,block:t,selectedValue:r,selectValue:s,tabValues:a}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,o.a_)(),l=e=>{const n=e.currentTarget,t=c.indexOf(n),i=a[t].value;i!==r&&(u(n),s(i))},d=e=>{let n=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},n),children:a.map((e=>{let{value:n,label:t,attributes:o}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>{c.push(e)},onKeyDown:d,onClick:l,...o,className:(0,i.A)("tabs__item",f.tabItem,o?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function A(e){let{lazy:n,children:t,selectedValue:o}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===o));return e?(0,r.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function y(e){const n=m(e);return(0,j.jsxs)("div",{className:(0,i.A)("tabs-container",f.tabList),children:[(0,j.jsx)(v,{...n,...e}),(0,j.jsx)(A,{...n,...e})]})}function w(e){const n=(0,x.A)();return(0,j.jsx)(y,{...e,children:d(e.children)},String(n))}},33435:(e,n,t)=>{t.d(n,{Id:()=>s,My:()=>o});const r=Object.freeze({dotnet:{name:".NET"},go:{name:"Go"},java:{name:"Java"},nodejs:{name:"Node.js"},php:{name:"PHP"},python:{name:"Python"},ruby:{name:"Ruby"},rust:{name:"Rust"}}),i=Object.freeze({express:{name:"Express.js",language:"nodejs"},koa:{name:"Koa.js",language:"nodejs"},fastify:{name:"Fastify",language:"nodejs"},hapi:{name:"Hapi.js",language:"nodejs"},nestjs:{name:"NestJS",language:"nodejs"},gin:{name:"Gin",language:"go"},fiber:{name:"Fiber",language:"go"},echo:{name:"Echo",language:"go"},chi:{name:"Chi",language:"go"},"spring-boot":{name:"Spring Boot",language:"java"},quarkus:{name:"Quarkus",language:"java"},micronaut:{name:"Micronaut",language:"java"},"vertx-web":{name:"Vert.x Web",language:"java"},laravel:{name:"Laravel",language:"php"},symfony:{name:"Symfony",language:"php"},slim:{name:"Slim",language:"php"},rails:{name:"Ruby on Rails",language:"ruby"},sinatra:{name:"Sinatra",language:"ruby"},grape:{name:"Grape",language:"ruby"},fastapi:{name:"FastAPI",language:"python"},flask:{name:"Flask",language:"python"},django:{name:"Django",language:"python"},"django-rest":{name:"Django REST Framework",language:"python"},axum:{name:"Axum",language:"rust"},"actix-web":{name:"Actix Web",language:"rust"},rocket:{name:"Rocket",language:"rust"},"aspnet-core":{name:"ASP.NET Core",language:"dotnet"}}),o=e=>i[e].name,s=e=>r[i[e].language].name},79621:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(58101);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);