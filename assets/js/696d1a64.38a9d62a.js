"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[4046],{38598:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>_e,contentTitle:()=>be,default:()=>ze,frontMatter:()=>ke,metadata:()=>r,toc:()=>Se});const r=JSON.parse('{"id":"authorization/validate-access-tokens/README","title":"How to validate access tokens in your API service or backend","description":"Validating access tokens is a critical part of enforcing role-based access control (RBAC) in Logto. This guide walks you through verifying Logto-issued JWTs in your backend/API, checking for signature, issuer, audience, expiration, permissions (scopes), and organization context.","source":"@site/docs/authorization/validate-access-tokens/README.mdx","sourceDirName":"authorization/validate-access-tokens","slug":"/authorization/validate-access-tokens/","permalink":"/authorization/validate-access-tokens/","draft":false,"unlisted":false,"editUrl":"https://github.com/logto-io/docs/tree/master/docs/authorization/validate-access-tokens/README.mdx","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6,"sidebar_label":"Validate access tokens in API"},"sidebar":"docsSidebar","previous":{"title":"Protect organization-level API resources","permalink":"/authorization/organization-level-api-resources"},"next":{"title":"Authorization","permalink":"/authorization/"}}');var o=t(25105),i=t(79621),a=t(38552),s=t(22002),c=t(25767),l=t(6376),d=t(62395),u=t(97551),p=t(2920),h=t(17975),m=t(24685),g=t(11592),f=t(73359),x=t(51526),j=t(96195),y=t(47919);const w=[...y.RM,...x.RM,...j.RM,...f.RM];function A(e){return(0,o.jsxs)(s.A,{groupId:"go-framework",children:[(0,o.jsx)(a.A,{value:"gin",label:"Gin",children:(0,o.jsx)(y.Ay,{})}),(0,o.jsx)(a.A,{value:"echo",label:"Echo",children:(0,o.jsx)(x.Ay,{})}),(0,o.jsx)(a.A,{value:"fiber",label:"Fiber",children:(0,o.jsx)(j.Ay,{})}),(0,o.jsx)(a.A,{value:"chi",label:"Chi",children:(0,o.jsx)(f.Ay,{})})]})}function v(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(A,{...e})}):A()}var k=t(78783),b=t(19473),_=t(44431),S=t(94745),I=t(21963),z=t(41333);const R=[...I.RM,...S.RM,..._.RM,...z.RM];function q(e){return(0,o.jsxs)(s.A,{groupId:"api-framework",children:[(0,o.jsx)(a.A,{value:"spring-boot",label:"Spring Boot",children:(0,o.jsx)(I.Ay,{})}),(0,o.jsx)(a.A,{value:"quarkus",label:"Quarkus",children:(0,o.jsx)(S.Ay,{})}),(0,o.jsx)(a.A,{value:"micronaut",label:"Micronaut",children:(0,o.jsx)(_.Ay,{})}),(0,o.jsx)(a.A,{value:"vertx-web",label:"Vert.x Web",children:(0,o.jsx)(z.Ay,{})})]})}function E(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(q,{...e})}):q()}var C=t(10149),T=t(71320),J=t(76840),P=t(80068),N=t(69100),M=t(85149),$=t(66165);const V=[...J.RM,...M.RM,...P.RM,...N.RM,...$.RM];function O(e){return(0,o.jsxs)(s.A,{groupId:"api-framework",children:[(0,o.jsx)(a.A,{value:"express",label:"Express.js",children:(0,o.jsx)(J.Ay,{})}),(0,o.jsx)(a.A,{value:"koa",label:"Koa.js",children:(0,o.jsx)(M.Ay,{})}),(0,o.jsx)(a.A,{value:"fastify",label:"Fastify",children:(0,o.jsx)(P.Ay,{})}),(0,o.jsx)(a.A,{value:"hapi",label:"Hapi.js",children:(0,o.jsx)(N.Ay,{})}),(0,o.jsx)(a.A,{value:"nestjs",label:"NestJS",children:(0,o.jsx)($.Ay,{})})]})}function F(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(O,{...e})}):O()}var W=t(80232),H=t(66937),D=t(33435),L=t(31234),U=t(15560),B=t(30386);const G=[...L.RM,...B.RM,...U.RM];function K(e){return(0,o.jsxs)(s.A,{groupId:"api-framework",children:[(0,o.jsx)(a.A,{value:"laravel",label:(0,D.My)("laravel"),children:(0,o.jsx)(L.Ay,{})}),(0,o.jsx)(a.A,{value:"symfony",label:(0,D.My)("symfony"),children:(0,o.jsx)(B.Ay,{})}),(0,o.jsx)(a.A,{value:"slim",label:(0,D.My)("slim"),children:(0,o.jsx)(U.Ay,{})})]})}function Y(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(K,{...e})}):K()}var Q=t(70257),X=t(4714),Z=t(29184),ee=t(79665),ne=t(82223),te=t(68374);const re=[...ne.RM,...te.RM,...Z.RM,...ee.RM];function oe(e){return(0,o.jsxs)(s.A,{groupId:"api-framework",children:[(0,o.jsx)(a.A,{value:"fastapi",label:(0,D.My)("fastapi"),children:(0,o.jsx)(ne.Ay,{})}),(0,o.jsx)(a.A,{value:"flask",label:(0,D.My)("flask"),children:(0,o.jsx)(te.Ay,{})}),(0,o.jsx)(a.A,{value:"django",label:(0,D.My)("django"),children:(0,o.jsx)(Z.Ay,{})}),(0,o.jsx)(a.A,{value:"django-rest",label:(0,D.My)("django-rest"),children:(0,o.jsx)(ee.Ay,{})})]})}function ie(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(oe,{...e})}):oe()}var ae=t(83),se=t(67418),ce=t(35528),le=t(54178),de=t(1829);const ue=[...le.RM,...de.RM,...ce.RM];function pe(e){return(0,o.jsxs)(s.A,{groupId:"api-framework",children:[(0,o.jsx)(a.A,{value:"rails",label:(0,D.My)("rails"),children:(0,o.jsx)(le.Ay,{})}),(0,o.jsx)(a.A,{value:"sinatra",label:(0,D.My)("sinatra"),children:(0,o.jsx)(de.Ay,{})}),(0,o.jsx)(a.A,{value:"grape",label:(0,D.My)("grape"),children:(0,o.jsx)(ce.Ay,{})})]})}function he(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(pe,{...e})}):pe()}var me=t(76877),ge=t(84923),fe=t(19011),xe=t(50744),je=t(37975);const ye=[...xe.RM,...fe.RM,...je.RM];function we(e){return(0,o.jsxs)(s.A,{groupId:"api-framework",children:[(0,o.jsx)(a.A,{value:"axum",label:(0,D.My)("axum"),children:(0,o.jsx)(xe.Ay,{})}),(0,o.jsx)(a.A,{value:"actix-web",label:(0,D.My)("actix-web"),children:(0,o.jsx)(fe.Ay,{})}),(0,o.jsx)(a.A,{value:"rocket",label:(0,D.My)("rocket"),children:(0,o.jsx)(je.Ay,{})})]})}function Ae(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(we,{...e})}):we()}var ve=t(46079);const ke={sidebar_position:6,sidebar_label:"Validate access tokens in API"},be="How to validate access tokens in your API service or backend",_e={},Se=[{value:"Before you start",id:"before-you-start",level:2},{value:"Step 1: Initialize constants and utilities",id:"step-1-initialize-constants-and-utilities",level:2},...u.RM,...W.RM,...ae.RM,...k.RM,...C.RM,...d.RM,...Q.RM,...me.RM,...ve.RM,{value:"Step 2: Retrieve info about your Logto tenant",id:"step-2-retrieve-info-about-your-logto-tenant",level:2},...p.RM,{value:"Step 3: Validate the token and permissions",id:"step-3-validate-the-token-and-permissions",level:2},...m.RM,{value:"Add the validation logic",id:"add-the-validation-logic",level:3},...T.RM,...X.RM,...g.RM,...b.RM,...c.RM,...H.RM,...se.RM,...ge.RM,{value:"Step 4: Apply middleware to your API",id:"step-4-apply-middleware-to-your-api",level:2},...V,...re,...w,...R,...l.RM,...G,...ue,...ye,{value:"Step 5: Test your implementation",id:"step-5-test-your-implementation",level:2},...h.RM,{value:"Related resources",id:"related-resources",level:2}];function Ie(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components},{Url:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Url",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"how-to-validate-access-tokens-in-your-api-service-or-backend",children:"How to validate access tokens in your API service or backend"})}),"\n",(0,o.jsxs)(n.p,{children:["Validating access tokens is a critical part of enforcing ",(0,o.jsx)(n.a,{href:"/authorization/role-based-access-control",children:"role-based access control (RBAC)"})," in Logto. This guide walks you through verifying Logto-issued JWTs in your backend/API, checking for signature, issuer, audience, expiration, permissions (scopes), and organization context."]}),"\n",(0,o.jsx)(n.h2,{id:"before-you-start",children:"Before you start"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"This guide assumes you are familiar with Logto\u2019s RBAC concepts."}),"\n",(0,o.jsxs)(n.li,{children:["If you are protecting API resources, this guide assumes you have gone through the ",(0,o.jsx)(n.a,{href:"/authorization/global-api-resources",children:"Protect global API resources"})," guide."]}),"\n",(0,o.jsxs)(n.li,{children:["If you are protecting in-app features or workflows (non-API permissions), this guide assumes you have gone through the ",(0,o.jsx)(n.a,{href:"/authorization/organization-permissions",children:"Protect organization (non-API) permissions"})," guide."]}),"\n",(0,o.jsxs)(n.li,{children:["If you are protecting organization-level API resources, this guide assumes you have gone through the ",(0,o.jsx)(n.a,{href:"/authorization/organization-level-api-resources",children:"Protect organization-level API resources"})," guide."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"step-1-initialize-constants-and-utilities",children:"Step 1: Initialize constants and utilities"}),"\n",(0,o.jsx)(u.Ay,{}),"\n",(0,o.jsxs)(s.A,{groupId:"api-language",children:[(0,o.jsx)(a.A,{value:"node",label:"Node.js",children:(0,o.jsx)(W.Ay,{})}),(0,o.jsx)(a.A,{value:"python",label:"Python",children:(0,o.jsx)(ae.Ay,{})}),(0,o.jsx)(a.A,{value:"go",label:"Go",children:(0,o.jsx)(k.Ay,{})}),(0,o.jsx)(a.A,{value:"java",label:"Java",children:(0,o.jsx)(C.Ay,{})}),(0,o.jsx)(a.A,{value:"dotnet",label:".NET",children:(0,o.jsx)(d.Ay,{})}),(0,o.jsx)(a.A,{value:"php",label:"PHP",children:(0,o.jsx)(Q.Ay,{})}),(0,o.jsx)(a.A,{value:"ruby",label:"Ruby",children:(0,o.jsx)(me.Ay,{})}),(0,o.jsx)(a.A,{value:"rust",label:"Rust",children:(0,o.jsx)(ve.Ay,{})})]}),"\n",(0,o.jsx)(n.h2,{id:"step-2-retrieve-info-about-your-logto-tenant",children:"Step 2: Retrieve info about your Logto tenant"}),"\n",(0,o.jsx)(p.Ay,{}),"\n",(0,o.jsx)(n.h2,{id:"step-3-validate-the-token-and-permissions",children:"Step 3: Validate the token and permissions"}),"\n",(0,o.jsx)(m.Ay,{}),"\n",(0,o.jsx)(n.h3,{id:"add-the-validation-logic",children:"Add the validation logic"}),"\n",(0,o.jsxs)(s.A,{groupId:"api-language",children:[(0,o.jsx)(a.A,{value:"node",label:"Node.js",children:(0,o.jsx)(T.Ay,{})}),(0,o.jsx)(a.A,{value:"python",label:"Python",children:(0,o.jsx)(X.Ay,{})}),(0,o.jsx)(a.A,{value:"go",label:"Go",children:(0,o.jsx)(g.Ay,{})}),(0,o.jsx)(a.A,{value:"java",label:"Java",children:(0,o.jsx)(b.Ay,{})}),(0,o.jsx)(a.A,{value:"dotnet",label:".NET",children:(0,o.jsx)(c.Ay,{})}),(0,o.jsx)(a.A,{value:"php",label:"PHP",children:(0,o.jsx)(H.Ay,{})}),(0,o.jsx)(a.A,{value:"ruby",label:"Ruby",children:(0,o.jsx)(se.Ay,{})}),(0,o.jsx)(a.A,{value:"rust",label:"Rust",children:(0,o.jsx)(ge.Ay,{})})]}),"\n",(0,o.jsx)(n.h2,{id:"step-4-apply-middleware-to-your-api",children:"Step 4: Apply middleware to your API"}),"\n",(0,o.jsx)(n.p,{children:"Apply the middleware your protected API routes."}),"\n",(0,o.jsxs)(s.A,{groupId:"api-language",children:[(0,o.jsx)(a.A,{value:"node",label:"Node.js",children:(0,o.jsx)(F,{})}),(0,o.jsx)(a.A,{value:"python",label:"Python",children:(0,o.jsx)(ie,{})}),(0,o.jsx)(a.A,{value:"go",label:"Go",children:(0,o.jsx)(v,{})}),(0,o.jsx)(a.A,{value:"java",label:"Java",children:(0,o.jsx)(E,{})}),(0,o.jsx)(a.A,{value:"dotnet",label:".NET",children:(0,o.jsx)(l.Ay,{})}),(0,o.jsx)(a.A,{value:"php",label:"PHP",children:(0,o.jsx)(Y,{})}),(0,o.jsx)(a.A,{value:"ruby",label:"Ruby",children:(0,o.jsx)(he,{})}),(0,o.jsx)(a.A,{value:"rust",label:"Rust",children:(0,o.jsx)(Ae,{})})]}),"\n",(0,o.jsx)(n.h2,{id:"step-5-test-your-implementation",children:"Step 5: Test your implementation"}),"\n",(0,o.jsx)(h.Ay,{}),"\n",(0,o.jsx)(n.h2,{id:"related-resources",children:"Related resources"}),"\n",(0,o.jsx)(t,{href:"/developers/custom-token-claims",children:"Customizing token claims"}),"\n",(0,o.jsx)(t,{href:"https://auth.wiki/jwt",children:"JSON Web Token (JWT)"}),"\n",(0,o.jsx)(t,{href:"https://openid.net/specs/openid-connect-discovery-1_0.html",children:(0,o.jsx)(n.p,{children:"OpenID Connect Discovery"})}),"\n",(0,o.jsx)(t,{href:"https://www.rfc-editor.org/rfc/rfc8707.html",children:"RFC 8707: Resource Indicators"})]})}function ze(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(Ie,{...e})}):Ie(e)}},25767:(e,n,t)=>{t.d(n,{Ay:()=>l,RM:()=>s});var r=t(25105),o=t(79621),i=t(38552),a=t(22002);const s=[];function c(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Add the required NuGet package for JWT authentication:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="8.0.0" />\n'})}),"\n",(0,r.jsx)(n.p,{children:"Create a validation service to handle token validation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="JwtValidationService.cs"',children:'using System.Security.Claims;\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\nusing YourApiNamespace.Exceptions;\n\nnamespace YourApiNamespace.Services\n{\n    public interface IJwtValidationService\n    {\n        Task ValidateTokenAsync(TokenValidatedContext context);\n    }\n\n    public class JwtValidationService : IJwtValidationService\n    {\n        public async Task ValidateTokenAsync(TokenValidatedContext context)\n        {\n            var principal = context.Principal!;\n\n            try\n            {\n                // Add your validation logic here based on permission model\n                ValidatePayload(principal);\n            }\n            catch (AuthorizationException)\n            {\n                throw; // Re-throw authorization exceptions\n            }\n            catch (Exception ex)\n            {\n                throw new AuthorizationException($"Token validation failed: {ex.Message}", 401);\n            }\n        }\n\n        private void ValidatePayload(ClaimsPrincipal principal)\n        {\n            // Implement your verification logic here based on permission model\n            // This will be shown in the permission models section below\n        }\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Configure JWT authentication in your ",(0,r.jsx)(n.code,{children:"Program.cs"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="Program.cs"',children:'using Microsoft.AspNetCore.Authentication.JwtBearer;\nusing Microsoft.IdentityModel.Tokens;\nusing YourApiNamespace.Services;\nusing YourApiNamespace.Exceptions;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container\nbuilder.Services.AddControllers();\nbuilder.Services.AddScoped<IJwtValidationService, JwtValidationService>();\n\n// Configure JWT authentication\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddJwtBearer(options =>\n    {\n        options.Authority = AuthConstants.Issuer;\n        options.MetadataAddress = $"{AuthConstants.Issuer}/.well-known/openid_configuration";\n        options.RequireHttpsMetadata = true;\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            ValidateIssuer = true,\n            ValidIssuer = AuthConstants.Issuer,\n            ValidateAudience = false, // We\'ll validate audience manually based on permission model\n            ValidateLifetime = true,\n            ValidateIssuerSigningKey = true,\n            ClockSkew = TimeSpan.FromMinutes(5)\n        };\n\n        options.Events = new JwtBearerEvents\n        {\n            OnTokenValidated = async context =>\n            {\n                var validationService = context.HttpContext.RequestServices\n                    .GetRequiredService<IJwtValidationService>();\n\n                await validationService.ValidateTokenAsync(context);\n            },\n            OnAuthenticationFailed = context =>\n            {\n                // Handle JWT library errors as 401\n                context.Response.StatusCode = 401;\n                context.Response.ContentType = "application/json";\n                context.Response.WriteAsync($"{{\\"error\\": \\"Invalid token\\"}}");\n                context.HandleResponse();\n                return Task.CompletedTask;\n            }\n        };\n    });\n\nbuilder.Services.AddAuthorization();\n\nvar app = builder.Build();\n\n// Global error handling for authentication/authorization failures\napp.Use(async (context, next) =>\n{\n    try\n    {\n        await next();\n    }\n    catch (AuthorizationException ex)\n    {\n        context.Response.StatusCode = ex.StatusCode;\n        context.Response.ContentType = "application/json";\n        await context.Response.WriteAsync($"{{\\"error\\": \\"{ex.Message}\\"}}");\n    }\n});\n\n// Configure the HTTP request pipeline\napp.UseAuthentication();\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["According to your permission model, implement the appropriate validation logic in ",(0,r.jsx)(n.code,{children:"JwtValidationService"}),":"]}),"\n",(0,r.jsxs)(a.A,{groupId:"permission-models",children:[(0,r.jsx)(i.A,{value:"global-api-resources",label:"Global API resources",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="JwtValidationService.cs"',children:'private void ValidatePayload(ClaimsPrincipal principal)\n{\n    // Check audience claim matches your API resource indicator\n    var audiences = principal.FindAll("aud").Select(c => c.Value).ToList();\n    if (!audiences.Contains("https://your-api-resource-indicator"))\n    {\n        throw new AuthorizationException("Invalid audience");\n    }\n\n    // Check required scopes for global API resources\n    var requiredScopes = new[] { "api:read", "api:write" }; // Replace with your actual required scopes\n    var tokenScopes = principal.FindFirst("scope")?.Value?.Split(\' \') ?? Array.Empty<string>();\n\n    if (!requiredScopes.All(scope => tokenScopes.Contains(scope)))\n    {\n        throw new AuthorizationException("Insufficient scope");\n    }\n}\n'})})}),(0,r.jsx)(i.A,{value:"organization-permissions",label:"Organization (non-API) permissions",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="JwtValidationService.cs"',children:'private void ValidatePayload(ClaimsPrincipal principal)\n{\n    // Check audience claim matches organization format\n    var audiences = principal.FindAll("aud").Select(c => c.Value).ToList();\n    var hasOrgAudience = audiences.Any(aud => aud.StartsWith("urn:logto:organization:"));\n\n    if (!hasOrgAudience)\n    {\n        throw new AuthorizationException("Invalid audience for organization permissions");\n    }\n\n    // Check organization ID matches the context (you may need to extract this from request context)\n    var expectedOrgId = "your-organization-id"; // Extract from request context\n    var expectedAud = $"urn:logto:organization:{expectedOrgId}";\n    if (!audiences.Contains(expectedAud))\n    {\n        throw new AuthorizationException("Organization ID mismatch");\n    }\n\n    // Check required organization scopes\n    var requiredScopes = new[] { "invite:users", "manage:settings" }; // Replace with your actual required scopes\n    var tokenScopes = principal.FindFirst("scope")?.Value?.Split(\' \') ?? Array.Empty<string>();\n\n    if (!requiredScopes.All(scope => tokenScopes.Contains(scope)))\n    {\n        throw new AuthorizationException("Insufficient organization scope");\n    }\n}\n'})})}),(0,r.jsx)(i.A,{value:"organization-level-api-resources",label:"Organization-level API resources",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="JwtValidationService.cs"',children:'private void ValidatePayload(ClaimsPrincipal principal)\n{\n    // Check audience claim matches your API resource indicator\n    var audiences = principal.FindAll("aud").Select(c => c.Value).ToList();\n    if (!audiences.Contains("https://your-api-resource-indicator"))\n    {\n        throw new AuthorizationException("Invalid audience for organization-level API resources");\n    }\n\n    // Check organization ID matches the context (you may need to extract this from request context)\n    var expectedOrgId = "your-organization-id"; // Extract from request context\n    var orgId = principal.FindFirst("organization_id")?.Value;\n    if (!expectedOrgId.Equals(orgId))\n    {\n        throw new AuthorizationException("Organization ID mismatch");\n    }\n\n    // Check required scopes for organization-level API resources\n    var requiredScopes = new[] { "api:read", "api:write" }; // Replace with your actual required scopes\n    var tokenScopes = principal.FindFirst("scope")?.Value?.Split(\' \') ?? Array.Empty<string>();\n\n    if (!requiredScopes.All(scope => tokenScopes.Contains(scope)))\n    {\n        throw new AuthorizationException("Insufficient organization-level API scopes");\n    }\n}\n'})})})]})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},6376:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"We've already set up the authentication and authorization middleware in the previous sections. Now we can create a protected controller that validates access tokens and extracts claims from authenticated requests."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="ProtectedController.cs"',children:'using Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing System.Security.Claims;\n\nnamespace YourApiNamespace.Controllers\n{\n    [ApiController]\n    [Route("api/[controller]")]\n    [Authorize] // Require authentication for all actions in this controller\n    public class ProtectedController : ControllerBase\n    {\n        [HttpGet]\n        public IActionResult GetProtectedData()\n        {\n            // Access token information directly from User claims\n            var sub = User.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? User.FindFirst("sub")?.Value;\n            var clientId = User.FindFirst("client_id")?.Value;\n            var organizationId = User.FindFirst("organization_id")?.Value;\n            var scopes = User.FindFirst("scope")?.Value?.Split(\' \') ?? Array.Empty<string>();\n            var audience = User.FindAll("aud").Select(c => c.Value).ToArray();\n\n            return Ok(new {\n                sub,\n                client_id = clientId,\n                organization_id = organizationId,\n                scopes,\n                audience\n            });\n        }\n\n        [HttpGet("claims")]\n        public IActionResult GetAllClaims()\n        {\n            // Return all claims for debugging/inspection\n            var claims = User.Claims.Select(c => new { c.Type, c.Value }).ToList();\n            return Ok(new { claims });\n        }\n    }\n}\n'})})]})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},62395:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="AuthConstants.cs"',children:'namespace YourApiNamespace\n{\n    public static class AuthConstants\n    {\n        public const string Issuer = "https://your-tenant.logto.app/oidc";\n    }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:'title="AuthenticationExceptions.cs"',children:"namespace YourApiNamespace.Exceptions\n{\n    public class AuthorizationException : Exception\n    {\n        public int StatusCode { get; }\n\n        public AuthorizationException(string message, int statusCode = 403) : base(message)\n        {\n            StatusCode = statusCode;\n        }\n    }\n}\n"})})]})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},97551:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",p:"p",...(0,o.R)(),...e.components};return(0,r.jsxs)(n.p,{children:["Define necessary constants and utilities in your code to handle token extraction and validation. A valid request must include an ",(0,r.jsx)(n.code,{children:"Authorization"})," header in the form ",(0,r.jsx)(n.code,{children:"Bearer <access_token>"}),"."]})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},2920:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[{value:"Fetch from OpenID Connect discovery endpoint",id:"fetch-from-openid-connect-discovery-endpoint",level:3},{value:"Hardcode in your code (not recommended)",id:"hardcode-in-your-code-not-recommended",level:3}];function a(e){const n={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"You\u2019ll need the following values to validate Logto-issued tokens:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"JSON Web Key Set (JWKS) URI: The URL to Logto\u2019s public keys, used to verify JWT signatures."}),"\n",(0,r.jsx)(n.li,{children:"Issuer: The expected issuer value (Logto\u2019s OIDC URL)."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"First, find your Logto tenant\u2019s endpoint. You can find it in various places:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["In the Logto Console, under ",(0,r.jsx)(n.strong,{children:"Settings"})," \u2192 ",(0,r.jsx)(n.strong,{children:"Domains"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["In any application settings where you configured in Logto, ",(0,r.jsx)(n.strong,{children:"Settings"})," \u2192 ",(0,r.jsx)(n.strong,{children:"Endpoints & Credentials"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"fetch-from-openid-connect-discovery-endpoint",children:"Fetch from OpenID Connect discovery endpoint"}),"\n",(0,r.jsx)(n.p,{children:"These values can be retrieved from Logto\u2019s OpenID Connect discovery endpoint:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"https://<your-logto-endpoint>/oidc/.well-known/openid-configuration\n"})}),"\n",(0,r.jsx)(n.p,{children:"Here\u2019s an example response (other fields omitted for brevity):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "jwks_uri": "https://your-tenant.logto.app/oidc/jwks",\n  "issuer": "https://your-tenant.logto.app/oidc"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"hardcode-in-your-code-not-recommended",children:"Hardcode in your code (not recommended)"}),"\n",(0,r.jsx)(n.p,{children:"Since Logto doesn't allow customizing the JWKS URI or issuer, you can hardcode these values in your code. However, this is not recommended for production applications as it may increase maintenance overhead if some configuration changes in the future."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["JWKS URI: ",(0,r.jsx)(n.code,{children:"https://<your-logto-endpoint>/oidc/jwks"})]}),"\n",(0,r.jsxs)(n.li,{children:["Issuer: ",(0,r.jsx)(n.code,{children:"https://<your-logto-endpoint>/oidc"})]}),"\n"]})]})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},17975:(e,n,t)=>{t.d(n,{Ay:()=>l,RM:()=>s});var r=t(25105),o=t(79621),i=t(38552),a=t(22002);const s=[{value:"Get access tokens",id:"get-access-tokens",level:3},{value:"Test protected endpoints",id:"test-protected-endpoints",level:3},{value:"Permission model-specific testing",id:"permission-model-specific-testing",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"get-access-tokens",children:"Get access tokens"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"From your client application:"}),"\nIf you've set up a client integration, your app can obtain tokens automatically. Extract the access token and use it in API requests."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"For testing with curl/Postman:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"User tokens:"})," Use your client app's developer tools to copy the access token from localStorage or the network tab"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Machine-to-machine tokens:"})," Use the client credentials flow. Here's a non-normative example using curl:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -X POST https://your-tenant.logto.app/oidc/token \\\n  -H "Content-Type: application/x-www-form-urlencoded" \\\n  -d "grant_type=client_credentials" \\\n  -d "client_id=your-m2m-client-id" \\\n  -d "client_secret=your-m2m-client-secret" \\\n  -d "resource=https://your-api-resource-indicator" \\\n  -d "scope=api:read api:write"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You may need to adjust the ",(0,r.jsx)(n.code,{children:"resource"})," and ",(0,r.jsx)(n.code,{children:"scope"})," parameters based on your API resource and permissions; an ",(0,r.jsx)(n.code,{children:"organization_id"})," parameter may also be required if your API is organization-scoped."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:["Need to inspect the token contents? Use our ",(0,r.jsx)(n.a,{href:"https://logto.io/jwt-decoder",children:"JWT decoder"})," to decode and verify your JWTs."]})}),"\n",(0,r.jsx)(n.h3,{id:"test-protected-endpoints",children:"Test protected endpoints"}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)(n.strong,{children:"Valid token request"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -H "Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9..." \\\n  http://localhost:3000/api/protected\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Expected response:"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "auth": {\n    "sub": "user123",\n    "clientId": "app456",\n    "organizationId": "org789",\n    "scopes": ["api:read", "api:write"],\n    "audience": ["https://your-api-resource-indicator"]\n  }\n}\n'})})]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)(n.strong,{children:"Missing token"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"curl http://localhost:3000/api/protected\n"})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Expected response (401):"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Authorization header is missing"\n}\n'})})]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:(0,r.jsx)(n.strong,{children:"Invalid token"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -H "Authorization: Bearer invalid-token" \\\n  http://localhost:3000/api/protected\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Expected response (401):"})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "error": "Invalid token"\n}\n'})})]}),"\n",(0,r.jsx)(n.h3,{id:"permission-model-specific-testing",children:"Permission model-specific testing"}),"\n",(0,r.jsxs)(a.A,{groupId:"permission-models",children:[(0,r.jsxs)(i.A,{value:"global-api-resources",label:"Global API resources",children:[(0,r.jsx)(n.p,{children:"Test scenarios for APIs protected with global scopes:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Valid scopes:"})," Test with tokens that include your required API scopes (e.g., ",(0,r.jsx)(n.code,{children:"api:read"}),", ",(0,r.jsx)(n.code,{children:"api:write"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Missing scopes:"})," Expect ",(0,r.jsx)(n.strong,{children:"403 Forbidden"})," when token lacks required scopes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Wrong audience:"})," Expect ",(0,r.jsx)(n.strong,{children:"403 Forbidden"})," when audience does not match the API resource"]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Token with missing scopes - expect 403\ncurl -H "Authorization: Bearer token-without-required-scopes" \\\n  http://localhost:3000/api/protected\n'})})]}),(0,r.jsxs)(i.A,{value:"organization-permissions",label:"Organization (non-API) permissions",children:[(0,r.jsx)(n.p,{children:"Test scenarios for organization-specific access control:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Valid organization token:"})," Test with tokens that include correct organization context (organization ID and scopes)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Missing scopes:"})," Expect ",(0,r.jsx)(n.strong,{children:"403 Forbidden"})," when user doesn't have permissions for the requested action"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Wrong organization:"})," Expect ",(0,r.jsx)(n.strong,{children:"403 Forbidden"})," when audience does not match the organization context (",(0,r.jsx)(n.code,{children:"urn:logto:organization:<organization_id>"}),")"]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Token for wrong organization - expect 403\ncurl -H "Authorization: Bearer token-for-different-organization" \\\n  http://localhost:3000/api/protected\n'})})]}),(0,r.jsxs)(i.A,{value:"organization-level-api-resources",label:"Organization-level API resources",children:[(0,r.jsx)(n.p,{children:"Test scenarios combining API resource validation with organization context:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Valid organization + API scopes:"})," Test with tokens that have both organization context and required API scopes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Missing API scopes:"})," Expect ",(0,r.jsx)(n.strong,{children:"403 Forbidden"})," when organization token lacks required API permissions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Wrong organization:"})," Expect ",(0,r.jsx)(n.strong,{children:"403 Forbidden"})," when accessing API with token from different organization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Wrong audience:"})," Expect ",(0,r.jsx)(n.strong,{children:"403 Forbidden"})," when audience does not match the organization-level API resource"]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Organization token without API scopes - expect 403\ncurl -H "Authorization: Bearer organization-token-without-api-scopes" \\\n  http://localhost:3000/api/protected\n'})})]})]})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},24685:(e,n,t)=>{t.d(n,{Ay:()=>l,RM:()=>s});var r=t(25105),o=t(79621),i=t(38552),a=t(22002);const s=[{value:"What to check for each permission model",id:"what-to-check-for-each-permission-model",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"After extracting the token and fetching the OIDC config, validate the following:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Signature:"})," JWT must be valid and signed by Logto (via JWKS)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Issuer:"})," Must match your Logto tenant\u2019s issuer."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Audience:"})," Must match the API\u2019s resource indicator registered in Logto, or the organization context if applicable."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Expiration:"})," Token must not be expired."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Permissions (scopes):"})," Token must include required scopes for your API/action. Scopes are space-separated strings in the ",(0,r.jsx)(n.code,{children:"scope"})," claim."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Organization context:"})," If protecting organization-level API resources, validate the ",(0,r.jsx)(n.code,{children:"organization_id"})," claim."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"https://auth.wiki/jwt",children:"JSON Web Token"})," to learn more about JWT structure and claims."]}),"\n",(0,r.jsx)(n.h3,{id:"what-to-check-for-each-permission-model",children:"What to check for each permission model"}),"\n",(0,r.jsx)(n.p,{children:"The claims and validation rules differ by permission model:"}),"\n",(0,r.jsxs)(a.A,{groupId:"permission-models",children:[(0,r.jsx)(i.A,{value:"global-api-resources",label:"Global API resources",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Audience claim (",(0,r.jsx)(n.code,{children:"aud"}),"):"]})," API resource indicator"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Organization claim (",(0,r.jsx)(n.code,{children:"organization_id"}),"):"]})," ",(0,r.jsx)(n.em,{children:"Not present"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Scopes (permissions) to check (",(0,r.jsx)(n.code,{children:"scope"}),"):"]})," API resource permissions"]}),"\n"]})}),(0,r.jsx)(i.A,{value:"organization-permissions",label:"Organization (non-API) permissions",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Audience claim (",(0,r.jsx)(n.code,{children:"aud"}),"):"]})," ",(0,r.jsx)(n.code,{children:"urn:logto:organization:<id>"})," (organization context is in ",(0,r.jsx)(n.code,{children:"aud"})," claim)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Organization claim (",(0,r.jsx)(n.code,{children:"organization_id"}),"):"]})," ",(0,r.jsx)(n.em,{children:"Not present"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Scopes (permissions) to check (",(0,r.jsx)(n.code,{children:"scope"}),"):"]})," Organization permissions"]}),"\n"]})}),(0,r.jsx)(i.A,{value:"organization-level-api-resources",label:"Organization-level API resources",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Audience claim (",(0,r.jsx)(n.code,{children:"aud"}),"):"]})," API resource indicator"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Organization claim (",(0,r.jsx)(n.code,{children:"organization_id"}),"):"]})," Organization ID (must match request)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Scopes (permissions) to check (",(0,r.jsx)(n.code,{children:"scope"}),"):"]})," API resource permissions"]}),"\n"]})})]}),"\n",(0,r.jsx)("small",{children:(0,r.jsxs)(n.p,{children:["For non-API organization permissions, the organization context is represented by the ",(0,r.jsx)(n.code,{children:"aud"})," claim\n(e.g., ",(0,r.jsx)(n.code,{children:"urn:logto:organization:abc123"}),"). The ",(0,r.jsx)(n.code,{children:"organization_id"})," claim is only present for\norganization-level API resource tokens."]})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"Always validate both permissions (scopes) and context (audience, organization) for secure multi-tenant APIs."})})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},11592:(e,n,t)=>{t.d(n,{Ay:()=>g,RM:()=>h});var r=t(25105),o=t(79621),i=t(33435),a=t(38552),s=t(22002);function c(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="auth_middleware.go"',children:'import (\n    "context"\n    "encoding/json"\n    "net/http"\n)\n\ntype contextKey string\n\nconst AuthContextKey contextKey = "auth"\n\nfunc VerifyAccessToken(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        tokenString, err := extractBearerTokenFromHeaders(r)\n        if err != nil {\n            authErr := err.(*AuthorizationError)\n            w.Header().Set("Content-Type", "application/json")\n            w.WriteHeader(authErr.Status)\n            json.NewEncoder(w).Encode(map[string]string{"error": authErr.Message})\n            return\n        }\n\n        token, err := validateJWT(tokenString)\n        if err != nil {\n            authErr := err.(*AuthorizationError)\n            w.Header().Set("Content-Type", "application/json")\n            w.WriteHeader(authErr.Status)\n            json.NewEncoder(w).Encode(map[string]string{"error": authErr.Message})\n            return\n        }\n\n        // Store token in context for generic use\n        ctx := context.WithValue(r.Context(), AuthContextKey, token)\n        next.ServeHTTP(w, r.WithContext(ctx))\n    })\n}\n'})})}function l(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="auth_middleware.go"',children:'import "github.com/labstack/echo/v4"\n\nfunc VerifyAccessToken(next echo.HandlerFunc) echo.HandlerFunc {\n    return func(c echo.Context) error {\n        tokenString, err := extractBearerTokenFromHeaders(c.Request())\n        if err != nil {\n            authErr := err.(*AuthorizationError)\n            return c.JSON(authErr.Status, echo.Map{"error": authErr.Message})\n        }\n\n        token, err := validateJWT(tokenString)\n        if err != nil {\n            authErr := err.(*AuthorizationError)\n            return c.JSON(authErr.Status, echo.Map{"error": authErr.Message})\n        }\n\n        // Store token in context for generic use\n        c.Set("auth", token)\n        return next(c)\n    }\n}\n'})})}function d(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="auth_middleware.go"',children:'import (\n    "net/http"\n    "github.com/gofiber/fiber/v2"\n)\n\nfunc VerifyAccessToken(c *fiber.Ctx) error {\n    // Convert fiber request to http.Request for compatibility\n    req := &http.Request{\n        Header: make(http.Header),\n    }\n    req.Header.Set("Authorization", c.Get("Authorization"))\n\n    tokenString, err := extractBearerTokenFromHeaders(req)\n    if err != nil {\n        authErr := err.(*AuthorizationError)\n        return c.Status(authErr.Status).JSON(fiber.Map{"error": authErr.Message})\n    }\n\n    token, err := validateJWT(tokenString)\n    if err != nil {\n        authErr := err.(*AuthorizationError)\n        return c.Status(authErr.Status).JSON(fiber.Map{"error": authErr.Message})\n    }\n\n    // Store token in locals for generic use\n    c.Locals("auth", token)\n    return c.Next()\n}\n'})})}function u(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="auth_middleware.go"',children:'import "github.com/gin-gonic/gin"\n\nfunc VerifyAccessToken() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        tokenString, err := extractBearerTokenFromHeaders(c.Request)\n        if err != nil {\n            authErr := err.(*AuthorizationError)\n            c.JSON(authErr.Status, gin.H{"error": authErr.Message})\n            c.Abort()\n            return\n        }\n\n        token, err := validateJWT(tokenString)\n        if err != nil {\n            authErr := err.(*AuthorizationError)\n            c.JSON(authErr.Status, gin.H{"error": authErr.Message})\n            c.Abort()\n            return\n        }\n\n        // Store token in context for generic use\n        c.Set("auth", token)\n        c.Next()\n    }\n}\n'})})}const p=Object.freeze({gin:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}),{}),fiber:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}),{}),echo:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}),{}),chi:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}),{})}),h=[];function m(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["We use ",(0,r.jsx)(n.a,{href:"https://github.com/lestrrat-go/jwx",children:"github.com/lestrrat-go/jwx"})," to validate JWTs. Install it if you haven't already:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"go mod init your-project\ngo get github.com/lestrrat-go/jwx/v3\n"})}),"\n",(0,r.jsxs)(n.p,{children:["First, add these shared components to your ",(0,r.jsx)(n.code,{children:"auth_middleware.go"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="auth_middleware.go"',children:'import (\n    "context"\n    "strings"\n    "time"\n\n    "github.com/lestrrat-go/jwx/v3/jwk"\n    "github.com/lestrrat-go/jwx/v3/jwt"\n)\n\nvar jwkSet jwk.Set\n\nfunc init() {\n    // Initialize JWKS cache\n    ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n    defer cancel()\n\n    var err error\n    jwkSet, err = jwk.Fetch(ctx, JWKS_URI)\n    if err != nil {\n        panic("Failed to fetch JWKS: " + err.Error())\n    }\n}\n\n// validateJWT validates the JWT and returns the parsed token\nfunc validateJWT(tokenString string) (jwt.Token, error) {\n    token, err := jwt.Parse([]byte(tokenString), jwt.WithKeySet(jwkSet))\n    if err != nil {\n        return nil, NewAuthorizationError("Invalid token: "+err.Error(), http.StatusUnauthorized)\n    }\n\n    // Verify issuer\n    if token.Issuer() != ISSUER {\n        return nil, NewAuthorizationError("Invalid issuer", http.StatusUnauthorized)\n    }\n\n    if err := verifyPayload(token); err != nil {\n        return nil, err\n    }\n\n    return token, nil\n}\n\n// Helper functions to extract token data\nfunc getStringClaim(token jwt.Token, key string) string {\n    if val, ok := token.Get(key); ok {\n        if str, ok := val.(string); ok {\n            return str\n        }\n    }\n    return ""\n}\n\nfunc getScopesFromToken(token jwt.Token) []string {\n    if val, ok := token.Get("scope"); ok {\n        if scope, ok := val.(string); ok && scope != "" {\n            return strings.Split(scope, " ")\n        }\n    }\n    return []string{}\n}\n\nfunc getAudienceFromToken(token jwt.Token) []string {\n    return token.Audience()\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Then, implement the middleware to verify the access token:"}),"\n",e.framework?p[e.framework]:(0,r.jsx)(s.A,{groupId:"api-framework",children:Object.entries(p).map((([e,n])=>(0,r.jsx)(a.A,{value:e,label:(0,i.My)(e),children:n},e)))}),"\n",(0,r.jsxs)(n.p,{children:["According to your permission model, you may need to adopt different ",(0,r.jsx)(n.code,{children:"verifyPayload"})," logic:"]}),"\n",(0,r.jsxs)(s.A,{groupId:"permission-models",children:[(0,r.jsx)(a.A,{value:"global-api-resources",label:"Global API resources",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="auth_middleware.go"',children:'func verifyPayload(token jwt.Token) error {\n    // Check audience claim matches your API resource indicator\n    if !hasAudience(token, "https://your-api-resource-indicator") {\n        return NewAuthorizationError("Invalid audience")\n    }\n\n    // Check required scopes for global API resources\n    requiredScopes := []string{"api:read", "api:write"} // Replace with your actual required scopes\n    if !hasRequiredScopes(token, requiredScopes) {\n        return NewAuthorizationError("Insufficient scope")\n    }\n\n    return nil\n}\n'})})}),(0,r.jsx)(a.A,{value:"organization-permissions",label:"Organization (non-API) permissions",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="auth_middleware.go"',children:'func verifyPayload(token jwt.Token) error {\n    // Check audience claim matches organization format\n    if !hasOrganizationAudience(token) {\n        return NewAuthorizationError("Invalid audience for organization permissions")\n    }\n\n    // Check organization ID matches the context (you may need to extract this from request context)\n    expectedOrgID := "your-organization-id" // Extract from request context\n    if !hasMatchingOrganization(token, expectedOrgID) {\n        return NewAuthorizationError("Organization ID mismatch")\n    }\n\n    // Check required organization scopes\n    requiredScopes := []string{"invite:users", "manage:settings"} // Replace with your actual required scopes\n    if !hasRequiredScopes(token, requiredScopes) {\n        return NewAuthorizationError("Insufficient organization scope")\n    }\n\n    return nil\n}\n'})})}),(0,r.jsx)(a.A,{value:"organization-level-api-resources",label:"Organization-level API resources",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="auth_middleware.go"',children:'func verifyPayload(token jwt.Token) error {\n    // Check audience claim matches your API resource indicator\n    if !hasAudience(token, "https://your-api-resource-indicator") {\n        return NewAuthorizationError("Invalid audience for organization-level API resources")\n    }\n\n    // Check organization ID matches the context (you may need to extract this from request context)\n    expectedOrgID := "your-organization-id" // Extract from request context\n    if !hasMatchingOrganizationID(token, expectedOrgID) {\n        return NewAuthorizationError("Organization ID mismatch")\n    }\n\n    // Check required scopes for organization-level API resources\n    requiredScopes := []string{"api:read", "api:write"} // Replace with your actual required scopes\n    if !hasRequiredScopes(token, requiredScopes) {\n        return NewAuthorizationError("Insufficient organization-level API scopes")\n    }\n\n    return nil\n}\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"Add these helper functions for payload verification:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="auth_middleware.go"',children:'// hasAudience checks if the token has the specified audience\nfunc hasAudience(token jwt.Token, expectedAud string) bool {\n    audiences := token.Audience()\n    for _, aud := range audiences {\n        if aud == expectedAud {\n            return true\n        }\n    }\n    return false\n}\n\n// hasOrganizationAudience checks if the token has organization audience format\nfunc hasOrganizationAudience(token jwt.Token) bool {\n    audiences := token.Audience()\n    for _, aud := range audiences {\n        if strings.HasPrefix(aud, "urn:logto:organization:") {\n            return true\n        }\n    }\n    return false\n}\n\n// hasRequiredScopes checks if the token has all required scopes\nfunc hasRequiredScopes(token jwt.Token, requiredScopes []string) bool {\n    scopes := getScopesFromToken(token)\n    for _, required := range requiredScopes {\n        found := false\n        for _, scope := range scopes {\n            if scope == required {\n                found = true\n                break\n            }\n        }\n        if !found {\n            return false\n        }\n    }\n    return true\n}\n\n// hasMatchingOrganization checks if the token audience matches the expected organization\nfunc hasMatchingOrganization(token jwt.Token, expectedOrgID string) bool {\n    expectedAud := fmt.Sprintf("urn:logto:organization:%s", expectedOrgID)\n    return hasAudience(token, expectedAud)\n}\n\n// hasMatchingOrganizationID checks if the token organization_id matches the expected one\nfunc hasMatchingOrganizationID(token jwt.Token, expectedOrgID string) bool {\n    orgID := getStringClaim(token, "organization_id")\n    return orgID == expectedOrgID\n}\n'})})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},78783:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="auth_middleware.go"',children:'package main\n\nimport (\n    "fmt"\n    "net/http"\n    "strings"\n)\n\nconst (\n    JWKS_URI = "https://your-tenant.logto.app/oidc/jwks"\n    ISSUER   = "https://your-tenant.logto.app/oidc"\n)\n\ntype AuthorizationError struct {\n    Message string\n    Status  int\n}\n\nfunc (e *AuthorizationError) Error() string {\n    return e.Message\n}\n\nfunc NewAuthorizationError(message string, status ...int) *AuthorizationError {\n    statusCode := http.StatusForbidden // Default to 403 Forbidden\n    if len(status) > 0 {\n        statusCode = status[0]\n    }\n    return &AuthorizationError{\n        Message: message,\n        Status:  statusCode,\n    }\n}\n\nfunc extractBearerTokenFromHeaders(r *http.Request) (string, error) {\n    const bearerPrefix = "Bearer "\n\n    authorization := r.Header.Get("Authorization")\n    if authorization == "" {\n        return "", NewAuthorizationError("Authorization header is missing", http.StatusUnauthorized)\n    }\n\n    if !strings.HasPrefix(authorization, bearerPrefix) {\n        return "", NewAuthorizationError(fmt.Sprintf("Authorization header must start with \\"%s\\"", bearerPrefix), http.StatusUnauthorized)\n    }\n\n    return strings.TrimPrefix(authorization, bearerPrefix), nil\n}\n'})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},73359:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="main.go"',children:'package main\n\nimport (\n    "encoding/json"\n    "net/http"\n\n    "github.com/go-chi/chi/v5"\n    "github.com/lestrrat-go/jwx/v3/jwt"\n)\n\nfunc main() {\n    r := chi.NewRouter()\n\n    // Apply middleware to protected routes\n    r.With(VerifyAccessToken).Get("/api/protected", func(w http.ResponseWriter, r *http.Request) {\n        // Access token information directly from context\n        tokenInterface := r.Context().Value(AuthContextKey)\n        if tokenInterface == nil {\n            w.Header().Set("Content-Type", "application/json")\n            w.WriteHeader(http.StatusInternalServerError)\n            json.NewEncoder(w).Encode(map[string]string{"error": "Token not found"})\n            return\n        }\n\n        token := tokenInterface.(jwt.Token)\n\n        w.Header().Set("Content-Type", "application/json")\n        json.NewEncoder(w).Encode(map[string]interface{}{\n            "sub":             token.Subject(),\n            "client_id":       getStringClaim(token, "client_id"),\n            "organization_id": getStringClaim(token, "organization_id"),\n            "scopes":          getScopesFromToken(token),\n            "audience":        getAudienceFromToken(token),\n        })\n    })\n\n    http.ListenAndServe(":8080", r)\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Or using route groups:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="main.go"',children:'package main\n\nimport (\n    "encoding/json"\n    "net/http"\n\n    "github.com/go-chi/chi/v5"\n    "github.com/lestrrat-go/jwx/v3/jwt"\n)\n\nfunc main() {\n    r := chi.NewRouter()\n\n    // Create protected route group\n    r.Route("/api", func(r chi.Router) {\n        r.Use(VerifyAccessToken)\n        r.Get("/protected", func(w http.ResponseWriter, r *http.Request) {\n            // Access token information directly from context\n            token := r.Context().Value(AuthContextKey).(jwt.Token)\n\n            w.Header().Set("Content-Type", "application/json")\n            json.NewEncoder(w).Encode(map[string]interface{}{\n                "sub":             token.Subject(),\n                "client_id":       getStringClaim(token, "client_id"),\n                "organization_id": getStringClaim(token, "organization_id"),\n                "scopes":          getScopesFromToken(token),\n                "audience":        getAudienceFromToken(token),\n                "message":         "Protected data accessed successfully",\n            })\n        })\n    })\n\n    http.ListenAndServe(":8080", r)\n}\n'})})]})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},51526:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="main.go"',children:'package main\n\nimport (\n    "net/http"\n\n    "github.com/labstack/echo/v4"\n    "github.com/lestrrat-go/jwx/v3/jwt"\n)\n\nfunc main() {\n    e := echo.New()\n\n    // Apply middleware to protected routes\n    e.GET("/api/protected", func(c echo.Context) error {\n        // Access token information directly from context\n        tokenInterface := c.Get("auth")\n        if tokenInterface == nil {\n            return c.JSON(http.StatusInternalServerError, echo.Map{"error": "Token not found"})\n        }\n\n        token := tokenInterface.(jwt.Token)\n\n        return c.JSON(http.StatusOK, echo.Map{\n            "sub":             token.Subject(),\n            "client_id":       getStringClaim(token, "client_id"),\n            "organization_id": getStringClaim(token, "organization_id"),\n            "scopes":          getScopesFromToken(token),\n            "audience":        getAudienceFromToken(token),\n        })\n    }, VerifyAccessToken)\n\n    e.Start(":8080")\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Or using route groups:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="main.go"',children:'package main\n\nimport (\n    "github.com/labstack/echo/v4"\n    "github.com/lestrrat-go/jwx/v3/jwt"\n)\n\nfunc main() {\n    e := echo.New()\n\n    // Create protected route group\n    api := e.Group("/api", VerifyAccessToken)\n    api.GET("/protected", func(c echo.Context) error {\n        // Access token information directly from context\n        token := c.Get("auth").(jwt.Token)\n\n        return c.JSON(200, echo.Map{\n            "sub":             token.Subject(),\n            "client_id":       getStringClaim(token, "client_id"),\n            "organization_id": getStringClaim(token, "organization_id"),\n            "scopes":          getScopesFromToken(token),\n            "audience":        getAudienceFromToken(token),\n            "message":         "Protected data accessed successfully",\n        })\n    })\n\n    e.Start(":8080")\n}\n'})})]})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},96195:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="main.go"',children:'package main\n\nimport (\n    "github.com/gofiber/fiber/v2"\n    "github.com/lestrrat-go/jwx/v3/jwt"\n)\n\nfunc main() {\n    app := fiber.New()\n\n    // Apply middleware to protected routes\n    app.Get("/api/protected", VerifyAccessToken, func(c *fiber.Ctx) error {\n        // Access token information directly from locals\n        tokenInterface := c.Locals("auth")\n        if tokenInterface == nil {\n            return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": "Token not found"})\n        }\n\n        token := tokenInterface.(jwt.Token)\n\n        return c.JSON(fiber.Map{\n            "sub":             token.Subject(),\n            "client_id":       getStringClaim(token, "client_id"),\n            "organization_id": getStringClaim(token, "organization_id"),\n            "scopes":          getScopesFromToken(token),\n            "audience":        getAudienceFromToken(token),\n        })\n    })\n\n    app.Listen(":8080")\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Or using route groups:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="main.go"',children:'package main\n\nimport (\n    "github.com/gofiber/fiber/v2"\n    "github.com/lestrrat-go/jwx/v3/jwt"\n)\n\nfunc main() {\n    app := fiber.New()\n\n    // Create protected route group\n    api := app.Group("/api", VerifyAccessToken)\n    api.Get("/protected", func(c *fiber.Ctx) error {\n        // Access token information directly from locals\n        token := c.Locals("auth").(jwt.Token)\n\n        return c.JSON(fiber.Map{\n            "sub":             token.Subject(),\n            "client_id":       getStringClaim(token, "client_id"),\n            "organization_id": getStringClaim(token, "organization_id"),\n            "scopes":          getScopesFromToken(token),\n            "audience":        getAudienceFromToken(token),\n            "message":         "Protected data accessed successfully",\n        })\n    })\n\n    app.Listen(":8080")\n}\n'})})]})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},47919:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="main.go"',children:'package main\n\nimport (\n    "net/http"\n\n    "github.com/gin-gonic/gin"\n    "github.com/lestrrat-go/jwx/v3/jwt"\n)\n\nfunc main() {\n    r := gin.Default()\n\n    // Apply middleware to protected routes\n    r.GET("/api/protected", VerifyAccessToken(), func(c *gin.Context) {\n        // Access token information directly from context\n        tokenInterface, exists := c.Get("auth")\n        if !exists {\n            c.JSON(http.StatusInternalServerError, gin.H{"error": "Token not found"})\n            return\n        }\n\n        token := tokenInterface.(jwt.Token)\n\n        c.JSON(http.StatusOK, gin.H{\n            "sub":             token.Subject(),\n            "client_id":       getStringClaim(token, "client_id"),\n            "organization_id": getStringClaim(token, "organization_id"),\n            "scopes":          getScopesFromToken(token),\n            "audience":        getAudienceFromToken(token),\n        })\n    })\n\n    r.Run(":8080")\n}\n'})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},19473:(e,n,t)=>{t.d(n,{Ay:()=>g,RM:()=>h});var r=t(25105),o=t(79621),i=t(33435),a=t(38552),s=t(22002);function c(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Add to your ",(0,r.jsx)(n.code,{children:"pom.xml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>io.micronaut.security</groupId>\n    <artifactId>micronaut-security-jwt</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.micronaut</groupId>\n    <artifactId>micronaut-http-server-netty</artifactId>\n</dependency>\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="application.yml"',children:"micronaut:\n  security:\n    authentication: bearer\n    token:\n      jwt:\n        signatures:\n          jwks:\n            logto:\n              url: ${JWKS_URI:https://your-tenant.logto.app/oidc/jwks}\n        claims-validators:\n          issuer: ${JWT_ISSUER:https://your-tenant.logto.app/oidc}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="JwtClaimsValidator.java"',children:'import io.micronaut.security.token.Claims;\nimport io.micronaut.security.token.validator.TokenValidator;\nimport jakarta.inject.Singleton;\nimport org.reactivestreams.Publisher;\nimport reactor.core.publisher.Mono;\nimport java.util.Arrays;\nimport java.util.List;\n\n@Singleton\npublic class JwtClaimsValidator implements TokenValidator {\n\n    @Override\n    public Publisher<Boolean> validateToken(String token, Claims claims) {\n        try {\n            verifyPayload(claims);\n            return Mono.just(true);\n        } catch (AuthorizationException e) {\n            // Micronaut will handle the status code appropriately\n            return Mono.just(false);\n        }\n    }\n\n    private void verifyPayload(Claims claims) {\n        // Issuer validation is handled automatically by Micronaut JWT configuration\n        // Implement your additional verification logic here based on permission model\n        // Use the helper methods below for claim extraction\n\n        // Example: throw new AuthorizationException("Insufficient permissions");\n    }\n\n    // Helper methods for Micronaut JWT\n    @SuppressWarnings("unchecked")\n    private List<String> extractAudiences(Claims claims) {\n        Object aud = claims.get("aud");\n        if (aud instanceof List) {\n            return (List<String>) aud;\n        } else if (aud instanceof String) {\n            return Arrays.asList((String) aud);\n        }\n        return List.of();\n    }\n\n    private String extractScopes(Claims claims) {\n        return (String) claims.get("scope");\n    }\n\n    private String extractOrganizationId(Claims claims) {\n        return (String) claims.get("organization_id");\n    }\n}\n'})})]})}function l(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Add to your ",(0,r.jsx)(n.code,{children:"pom.xml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-smallrye-jwt</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-resteasy-reactive</artifactId>\n</dependency>\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-properties",metastring:'title="application.properties"',children:"# JWT configuration\nmp.jwt.verify.publickey.location=${JWKS_URI:https://your-tenant.logto.app/oidc/jwks}\nmp.jwt.verify.issuer=${JWT_ISSUER:https://your-tenant.logto.app/oidc}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="JwtVerificationFilter.java"',children:'import org.eclipse.microprofile.jwt.JsonWebToken;\nimport jakarta.enterprise.context.ApplicationScoped;\nimport jakarta.inject.Inject;\nimport jakarta.ws.rs.container.ContainerRequestContext;\nimport jakarta.ws.rs.container.ContainerRequestFilter;\nimport jakarta.ws.rs.core.Response;\nimport jakarta.ws.rs.ext.Provider;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Provider\n@ApplicationScoped\npublic class JwtVerificationFilter implements ContainerRequestFilter {\n\n    @Inject\n    JsonWebToken jwt;\n\n    @Override\n    public void filter(ContainerRequestContext requestContext) {\n        if (requestContext.getUriInfo().getPath().startsWith("/api/protected")) {\n            try {\n                verifyPayload(jwt);\n                requestContext.setProperty("auth", jwt);\n            } catch (AuthorizationException e) {\n                requestContext.abortWith(\n                    Response.status(e.getStatusCode())\n                        .entity("{\\"error\\": \\"" + e.getMessage() + "\\"}")\n                        .build()\n                );\n            } catch (Exception e) {\n                requestContext.abortWith(\n                    Response.status(401)\n                        .entity("{\\"error\\": \\"Invalid token\\"}")\n                        .build()\n                );\n            }\n        }\n    }\n\n    private void verifyPayload(JsonWebToken jwt) {\n        // Issuer validation is handled automatically by Quarkus JWT extension\n        // Implement your additional verification logic here based on permission model\n        // Use the helper methods below for claim extraction\n    }\n\n    // Helper methods for Quarkus JWT\n    private List<String> extractAudiences(JsonWebToken jwt) {\n        return new ArrayList<>(jwt.getAudience());\n    }\n\n    private String extractScopes(JsonWebToken jwt) {\n        return jwt.getClaim("scope");\n    }\n\n    private String extractOrganizationId(JsonWebToken jwt) {\n        return jwt.getClaim("organization_id");\n    }\n}\n'})})]})}function d(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Add to your ",(0,r.jsx)(n.code,{children:"pom.xml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.security</groupId>\n    <artifactId>spring-security-oauth2-resource-server</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.security</groupId>\n    <artifactId>spring-security-oauth2-jose</artifactId>\n</dependency>\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="JwtSecurityConfig.java"',children:'import org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\nimport org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\nimport org.springframework.security.web.SecurityFilterChain;\n\n@Configuration\n@EnableWebSecurity\npublic class JwtSecurityConfig {\n\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n            .authorizeHttpRequests(authz -> authz\n                .requestMatchers("/api/protected/**").authenticated()\n                .anyRequest().permitAll()\n            )\n            .oauth2ResourceServer(oauth2 -> oauth2\n                .jwt(jwt -> jwt.decoder(jwtDecoder()))\n            );\n        return http.build();\n    }\n\n    @Bean\n    public JwtDecoder jwtDecoder() {\n        // Remember to set these environment variables in your deployment\n        String jwksUri = System.getenv("JWKS_URI");\n        String issuer = System.getenv("JWT_ISSUER");\n\n        return NimbusJwtDecoder.withJwkSetUri(jwksUri)\n            .issuer(issuer)\n            .build();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="JwtValidator.java"',children:'import org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.stereotype.Component;\nimport java.util.List;\n\n@Component\npublic class JwtValidator {\n\n    public void verifyPayload(Jwt jwt) {\n        // Issuer validation is handled automatically by Spring Security JWT decoder\n        // Implement your additional verification logic here based on permission model\n        // Use the helper methods below for claim extraction\n\n        // Example: throw new AuthorizationException("Insufficient permissions");\n        // The status code will be handled by Spring Security\'s exception handling\n    }\n\n    // Helper methods for Spring Boot JWT\n    private List<String> extractAudiences(Jwt jwt) {\n        return jwt.getAudience();\n    }\n\n    private String extractScopes(Jwt jwt) {\n        return jwt.getClaimAsString("scope");\n    }\n\n    private String extractOrganizationId(Jwt jwt) {\n        return jwt.getClaimAsString("organization_id");\n    }\n}\n'})})]})}function u(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["Add to your ",(0,r.jsx)(n.code,{children:"pom.xml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>io.vertx</groupId>\n    <artifactId>vertx-web</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.vertx</groupId>\n    <artifactId>vertx-auth-jwt</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.vertx</groupId>\n    <artifactId>vertx-web-client</artifactId>\n</dependency>\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="JwtAuthHandler.java"',children:'import io.vertx.core.Future;\nimport io.vertx.core.Handler;\nimport io.vertx.core.Vertx;\nimport io.vertx.core.json.JsonArray;\nimport io.vertx.core.json.JsonObject;\nimport io.vertx.ext.auth.jwt.JWTAuth;\nimport io.vertx.ext.auth.jwt.JWTAuthOptions;\nimport io.vertx.ext.web.RoutingContext;\nimport io.vertx.ext.web.client.WebClient;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class JwtAuthHandler implements Handler<RoutingContext> {\n\n    private final JWTAuth jwtAuth;\n    private final WebClient webClient;\n    private final String expectedIssuer;\n    private final String jwksUri;\n\n    public JwtAuthHandler(Vertx vertx) {\n        this.webClient = WebClient.create(vertx);\n        this.jwtAuth = JWTAuth.create(vertx, new JWTAuthOptions());\n\n        // Remember to set these environment variables in your deployment\n        this.expectedIssuer = System.getenv("JWT_ISSUER");\n        this.jwksUri = System.getenv("JWKS_URI");\n\n        // Fetch JWKS and configure JWT auth\n        fetchJWKS().onSuccess(jwks -> {\n            // Configure JWKS (simplified - you may need a proper JWKS parser)\n        });\n    }\n\n    @Override\n    public void handle(RoutingContext context) {\n        String authHeader = context.request().getHeader("Authorization");\n        if (authHeader == null || !authHeader.startsWith("Bearer ")) {\n            context.response()\n                .setStatusCode(401)\n                .putHeader("Content-Type", "application/json")\n                .end("{\\"error\\": \\"Authorization header missing or invalid\\"}");\n            return;\n        }\n\n        String token = authHeader.substring(7);\n        jwtAuth.authenticate(new JsonObject().put("jwt", token))\n            .onSuccess(user -> {\n                try {\n                    JsonObject principal = user.principal();\n                    verifyPayload(principal);\n                    context.put("auth", principal);\n                    context.next();\n                } catch (AuthorizationException e) {\n                    context.response()\n                        .setStatusCode(e.getStatusCode())  // Use the exception\'s status code\n                        .putHeader("Content-Type", "application/json")\n                        .end("{\\"error\\": \\"" + e.getMessage() + "\\"}");\n                } catch (Exception e) {\n                    context.response()\n                        .setStatusCode(401)\n                        .putHeader("Content-Type", "application/json")\n                        .end("{\\"error\\": \\"Invalid token\\"}");\n                }\n            })\n            .onFailure(err -> {\n                context.response()\n                    .setStatusCode(401)\n                    .putHeader("Content-Type", "application/json")\n                    .end("{\\"error\\": \\"Invalid token: " + err.getMessage() + "\\"}");\n            });\n    }\n\n    private Future<JsonObject> fetchJWKS() {\n        return webClient.getAbs(this.jwksUri)\n            .send()\n            .map(response -> response.bodyAsJsonObject());\n    }\n\n    private void verifyPayload(JsonObject principal) {\n        // Verify issuer manually for Vert.x\n        String issuer = principal.getString("iss");\n        if (issuer == null || !expectedIssuer.equals(issuer)) {\n            throw new AuthorizationException("Invalid issuer: " + issuer);\n        }\n\n        // Implement your additional verification logic here based on permission model\n        // Use the helper methods below for claim extraction\n    }\n\n    // Helper methods for Vert.x JWT\n    private List<String> extractAudiences(JsonObject principal) {\n        JsonArray audiences = principal.getJsonArray("aud");\n        if (audiences != null) {\n            List<String> result = new ArrayList<>();\n            for (Object aud : audiences) {\n                result.add(aud.toString());\n            }\n            return result;\n        }\n        return List.of();\n    }\n\n    private String extractScopes(JsonObject principal) {\n        return principal.getString("scope");\n    }\n\n    private String extractOrganizationId(JsonObject principal) {\n        return principal.getString("organization_id");\n    }\n}\n'})})]})}const p=Object.freeze({"spring-boot":(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}),{}),quarkus:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}),{}),micronaut:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}),{}),"vertx-web":(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}),{})}),h=[];function m(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"We use different JWT libraries depending on the framework. Install the required dependencies:"}),"\n",e.framework?p[e.framework]:(0,r.jsx)(s.A,{groupId:"api-framework",children:Object.entries(p).map((([e,n])=>(0,r.jsx)(a.A,{value:e,label:(0,i.My)(e),children:n},e)))}),"\n",(0,r.jsx)(n.p,{children:"According to your permission model, implement the appropriate verification logic:"}),"\n",(0,r.jsxs)(s.A,{groupId:"permission-models",children:[(0,r.jsx)(a.A,{value:"global-api-resources",label:"Global API resources",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Check audience claim matches your API resource indicator\nList<String> audiences = extractAudiences(token); // Framework-specific extraction\nif (!audiences.contains("https://your-api-resource-indicator")) {\n    throw new AuthorizationException("Invalid audience");\n}\n\n// Check required scopes for global API resources\nList<String> requiredScopes = Arrays.asList("api:read", "api:write"); // Replace with your actual required scopes\nString scopes = extractScopes(token); // Framework-specific extraction\nList<String> tokenScopes = scopes != null ? Arrays.asList(scopes.split(" ")) : List.of();\n\nif (!tokenScopes.containsAll(requiredScopes)) {\n    throw new AuthorizationException("Insufficient scope");\n}\n'})})}),(0,r.jsx)(a.A,{value:"organization-permissions",label:"Organization (non-API) permissions",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Check audience claim matches organization format\nList<String> audiences = extractAudiences(token); // Framework-specific extraction\nboolean hasOrgAudience = audiences.stream()\n    .anyMatch(aud -> aud.startsWith("urn:logto:organization:"));\n\nif (!hasOrgAudience) {\n    throw new AuthorizationException("Invalid audience for organization permissions");\n}\n\n// Check organization ID matches the context (you may need to extract this from request context)\nString expectedOrgId = "your-organization-id"; // Extract from request context\nString expectedAud = "urn:logto:organization:" + expectedOrgId;\nif (!audiences.contains(expectedAud)) {\n    throw new AuthorizationException("Organization ID mismatch");\n}\n\n// Check required organization scopes\nList<String> requiredScopes = Arrays.asList("invite:users", "manage:settings"); // Replace with your actual required scopes\nString scopes = extractScopes(token); // Framework-specific extraction\nList<String> tokenScopes = scopes != null ? Arrays.asList(scopes.split(" ")) : List.of();\n\nif (!tokenScopes.containsAll(requiredScopes)) {\n    throw new AuthorizationException("Insufficient organization scope");\n}\n'})})}),(0,r.jsx)(a.A,{value:"organization-level-api-resources",label:"Organization-level API resources",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Check audience claim matches your API resource indicator\nList<String> audiences = extractAudiences(token); // Framework-specific extraction\nif (!audiences.contains("https://your-api-resource-indicator")) {\n    throw new AuthorizationException("Invalid audience for organization-level API resources");\n}\n\n// Check organization ID matches the context (you may need to extract this from request context)\nString expectedOrgId = "your-organization-id"; // Extract from request context\nString orgId = extractOrganizationId(token); // Framework-specific extraction\nif (!expectedOrgId.equals(orgId)) {\n    throw new AuthorizationException("Organization ID mismatch");\n}\n\n// Check required scopes for organization-level API resources\nList<String> requiredScopes = Arrays.asList("api:read", "api:write"); // Replace with your actual required scopes\nString scopes = extractScopes(token); // Framework-specific extraction\nList<String> tokenScopes = scopes != null ? Arrays.asList(scopes.split(" ")) : List.of();\n\nif (!tokenScopes.containsAll(requiredScopes)) {\n    throw new AuthorizationException("Insufficient organization-level API scopes");\n}\n'})})})]}),"\n",(0,r.jsx)(n.p,{children:"The helper methods for extracting claims are framework-specific. See the implementation details in the framework-specific validation files above."})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},10149:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="AuthorizationException.java"',children:"public class AuthorizationException extends RuntimeException {\n    private final int statusCode;\n\n    public AuthorizationException(String message) {\n        this(message, 403); // Default to 403 Forbidden\n    }\n\n    public AuthorizationException(String message, int statusCode) {\n        super(message);\n        this.statusCode = statusCode;\n    }\n\n    public int getStatusCode() {\n        return statusCode;\n    }\n}\n"})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},44431:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="ProtectedController.java"',children:'import io.micronaut.http.annotation.Controller;\nimport io.micronaut.http.annotation.Get;\nimport io.micronaut.security.annotation.Secured;\nimport io.micronaut.security.authentication.Authentication;\nimport io.micronaut.security.rules.SecurityRule;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\n@Controller("/api")\n@Secured(SecurityRule.IS_AUTHENTICATED)\npublic class ProtectedController {\n\n    @Get("/protected")\n    public Map<String, Object> protectedEndpoint(Authentication authentication) {\n        // Access token information directly from Authentication\n        String scopes = (String) authentication.getAttributes().get("scope");\n        List<String> scopeList = scopes != null ? Arrays.asList(scopes.split(" ")) : List.of();\n\n        return Map.of(\n            "sub", authentication.getName(),\n            "client_id", authentication.getAttributes().get("client_id"),\n            "organization_id", authentication.getAttributes().get("organization_id"),\n            "scopes", scopeList,\n            "audience", authentication.getAttributes().get("aud")\n        );\n    }\n}\n'})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},94745:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="ProtectedResource.java"',children:'import org.eclipse.microprofile.jwt.JsonWebToken;\nimport jakarta.inject.Inject;\nimport jakarta.ws.rs.GET;\nimport jakarta.ws.rs.Path;\nimport jakarta.ws.rs.Produces;\nimport jakarta.ws.rs.core.MediaType;\nimport jakarta.ws.rs.core.Context;\nimport jakarta.ws.rs.container.ContainerRequestContext;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\n@Path("/api")\npublic class ProtectedResource {\n\n    @Inject\n    JsonWebToken jwt;\n\n    @GET\n    @Path("/protected")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Map<String, Object> protectedEndpoint(@Context ContainerRequestContext requestContext) {\n        // Access JWT directly from injection or context\n        JsonWebToken token = (JsonWebToken) requestContext.getProperty("auth");\n        if (token == null) {\n            token = jwt; // Fallback to injected JWT\n        }\n\n        String scopes = token.getClaim("scope");\n        List<String> scopeList = scopes != null ? Arrays.asList(scopes.split(" ")) : List.of();\n\n        return Map.of(\n            "sub", token.getSubject(),\n            "client_id", token.<String>getClaim("client_id"),\n            "organization_id", token.<String>getClaim("organization_id"),\n            "scopes", scopeList,\n            "audience", token.getAudience()\n        );\n    }\n}\n'})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},21963:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="ProtectedController.java"',children:'import org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\n\n@RestController\npublic class ProtectedController {\n\n    @GetMapping("/api/protected")\n    public Map<String, Object> protectedEndpoint(@AuthenticationPrincipal Jwt jwt) {\n        // Access token information directly from JWT\n        String scopes = jwt.getClaimAsString("scope");\n        List<String> scopeList = scopes != null ? Arrays.asList(scopes.split(" ")) : List.of();\n\n        return Map.of(\n            "sub", jwt.getSubject(),\n            "client_id", jwt.getClaimAsString("client_id"),\n            "organization_id", jwt.getClaimAsString("organization_id"),\n            "scopes", scopeList,\n            "audience", jwt.getAudience()\n        );\n    }\n}\n'})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},41333:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",metastring:'title="MainVerticle.java"',children:'import io.vertx.core.AbstractVerticle;\nimport io.vertx.core.Promise;\nimport io.vertx.core.json.JsonObject;\nimport io.vertx.ext.web.Router;\nimport io.vertx.ext.web.RoutingContext;\n\npublic class MainVerticle extends AbstractVerticle {\n\n    @Override\n    public void start(Promise<Void> startPromise) throws Exception {\n        Router router = Router.router(vertx);\n\n        // Apply middleware to protected routes\n        router.route("/api/protected*").handler(new JwtAuthHandler(vertx));\n        router.get("/api/protected").handler(this::protectedEndpoint);\n\n        vertx.createHttpServer()\n            .requestHandler(router)\n            .listen(8080, result -> {\n                if (result.succeeded()) {\n                    startPromise.complete();\n                } else {\n                    startPromise.fail(result.cause());\n                }\n            });\n    }\n\n    private void protectedEndpoint(RoutingContext context) {\n        // Access JWT principal directly from context\n        JsonObject principal = context.get("auth");\n        if (principal == null) {\n            context.response()\n                .setStatusCode(500)\n                .putHeader("Content-Type", "application/json")\n                .end("{\\"error\\": \\"JWT principal not found\\"}");\n            return;\n        }\n\n        String scopes = principal.getString("scope");\n        JsonObject response = new JsonObject()\n            .put("sub", principal.getString("sub"))\n            .put("client_id", principal.getString("client_id"))\n            .put("organization_id", principal.getString("organization_id"))\n            .put("scopes", scopes != null ? scopes.split(" ") : new String[0])\n            .put("audience", principal.getJsonArray("aud"));\n\n        context.response()\n            .putHeader("Content-Type", "application/json")\n            .end(response.encode());\n    }\n}\n'})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},71320:(e,n,t)=>{t.d(n,{Ay:()=>f,RM:()=>m});var r=t(25105),o=t(79621),i=t(33435),a=t(38552),s=t(22002);function c(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="auth-middleware.ts"',children:"import { Request, Response, NextFunction } from 'express';\nimport { validateJwt, createAuthInfo } from './jwt-validator.js';\n\n// Extend Express Request interface to include auth\ndeclare global {\n  namespace Express {\n    interface Request {\n      auth?: AuthInfo;\n    }\n  }\n}\n\nexport async function verifyAccessToken(req: Request, res: Response, next: NextFunction) {\n  try {\n    const token = extractBearerTokenFromHeaders(req.headers);\n    const payload = await validateJwt(token);\n\n    // Store auth info in request for generic use\n    req.auth = createAuthInfo(payload);\n\n    next();\n  } catch (err: any) {\n    return res.status(err.status ?? 401).json({ error: err.message });\n  }\n}\n"})})}function l(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="auth-middleware.ts"',children:"import { FastifyRequest, FastifyReply } from 'fastify';\nimport { validateJwt, createAuthInfo } from './jwt-validator.js';\n\n// Extend Fastify Request interface to include auth\ndeclare module 'fastify' {\n  interface FastifyRequest {\n    auth?: AuthInfo;\n  }\n}\n\nexport async function fastifyVerifyAccessToken(request: FastifyRequest, reply: FastifyReply) {\n  try {\n    const token = extractBearerTokenFromHeaders(request.headers);\n    const payload = await validateJwt(token);\n\n    // Store auth info in request for generic use\n    request.auth = createAuthInfo(payload);\n  } catch (err: any) {\n    reply.code(err.status ?? 401).send({ error: err.message });\n  }\n}\n"})})}function d(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="auth-middleware.ts"',children:"import { Request, ResponseToolkit } from '@hapi/hapi';\nimport { validateJwt, createAuthInfo } from './jwt-validator.js';\n\nexport async function hapiVerifyAccessToken(request: Request, h: ResponseToolkit) {\n  try {\n    const token = extractBearerTokenFromHeaders(request.headers);\n    const payload = await validateJwt(token);\n\n    // Store auth info in request.app for generic use\n    request.app.auth = createAuthInfo(payload);\n\n    return h.continue;\n  } catch (err: any) {\n    return h\n      .response({ error: err.message })\n      .code(err.status ?? 401)\n      .takeover();\n  }\n}\n"})})}function u(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="auth-middleware.ts"',children:"import { Context, Next } from 'koa';\nimport { validateJwt, createAuthInfo } from './jwt-validator.js';\n\nexport async function koaVerifyAccessToken(ctx: Context, next: Next) {\n  try {\n    const token = extractBearerTokenFromHeaders(ctx.request.headers);\n    const payload = await validateJwt(token);\n\n    // Store auth info in state for generic use\n    ctx.state.auth = createAuthInfo(payload);\n\n    await next();\n  } catch (err: any) {\n    ctx.status = err.status ?? 401;\n    ctx.body = { error: err.message };\n  }\n}\n"})})}function p(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="access-token.guard.ts"',children:"import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  UnauthorizedException,\n  ForbiddenException,\n} from '@nestjs/common';\nimport { validateJwt, createAuthInfo } from './jwt-validator.js';\n\n@Injectable()\nexport class AccessTokenGuard implements CanActivate {\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const req = context.switchToHttp().getRequest();\n\n    try {\n      const token = extractBearerTokenFromHeaders(req.headers);\n      const payload = await validateJwt(token);\n\n      // Store auth info in request for generic use\n      req.auth = createAuthInfo(payload);\n\n      return true;\n    } catch (err: any) {\n      if (err.status === 401) throw new UnauthorizedException(err.message);\n      throw new ForbiddenException(err.message);\n    }\n  }\n}\n"})})}const h=Object.freeze({express:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}),{}),fastify:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}),{}),hapi:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}),{}),koa:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}),{}),nestjs:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}),{})}),m=[];function g(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["We use ",(0,r.jsx)(n.a,{href:"https://github.com/panva/jose",children:"jose"})," in this example to validate the JWT. Install it if you haven't already:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm install jose\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Or use your preferred package manager (e.g., ",(0,r.jsx)(n.code,{children:"pnpm"})," or ",(0,r.jsx)(n.code,{children:"yarn"}),")."]}),"\n",(0,r.jsx)(n.p,{children:"First, add these shared utilities to handle JWT validation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="jwt-validator.ts"',children:"import { createRemoteJWKSet, jwtVerify, JWTPayload } from 'jose';\nimport { AuthInfo, AuthorizationError } from './auth-middleware.js';\n\nconst jwks = createRemoteJWKSet(new URL(JWKS_URI));\n\nexport async function validateJwt(token: string): Promise<JWTPayload> {\n  const { payload } = await jwtVerify(token, jwks, {\n    issuer: ISSUER,\n  });\n\n  verifyPayload(payload);\n  return payload;\n}\n\nexport function createAuthInfo(payload: JWTPayload): AuthInfo {\n  const scopes = (payload.scope as string)?.split(' ') ?? [];\n  const audience = Array.isArray(payload.aud) ? payload.aud : payload.aud ? [payload.aud] : [];\n\n  return new AuthInfo(\n    payload.sub!,\n    payload.client_id as string,\n    payload.organization_id as string,\n    scopes,\n    audience\n  );\n}\n\nfunction verifyPayload(payload: JWTPayload): void {\n  // Implement your verification logic here based on permission model\n  // This will be shown in the permission models section below\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then, implement the middleware to verify the access token:"}),"\n",e.framework?h[e.framework]:(0,r.jsx)(s.A,{groupId:"api-framework",children:Object.entries(h).map((([e,n])=>(0,r.jsx)(a.A,{value:e,label:(0,i.My)(e),children:n},e)))}),"\n",(0,r.jsxs)(n.p,{children:["According to your permission model, implement the appropriate verification logic in ",(0,r.jsx)(n.code,{children:"jwt-validator.ts"}),":"]}),"\n",(0,r.jsxs)(s.A,{groupId:"permission-models",children:[(0,r.jsx)(a.A,{value:"global-api-resources",label:"Global API resources",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="jwt-validator.ts"',children:"function verifyPayload(payload: JWTPayload): void {\n  // Check audience claim matches your API resource indicator\n  const audiences = Array.isArray(payload.aud) ? payload.aud : payload.aud ? [payload.aud] : [];\n  if (!audiences.includes('https://your-api-resource-indicator')) {\n    throw new AuthorizationError('Invalid audience');\n  }\n\n  // Check required scopes for global API resources\n  const requiredScopes = ['api:read', 'api:write']; // Replace with your actual required scopes\n  const scopes = (payload.scope as string)?.split(' ') ?? [];\n  if (!requiredScopes.every((scope) => scopes.includes(scope))) {\n    throw new AuthorizationError('Insufficient scope');\n  }\n}\n"})})}),(0,r.jsx)(a.A,{value:"organization-permissions",label:"Organization (non-API) permissions",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="jwt-validator.ts"',children:"function verifyPayload(payload: JWTPayload): void {\n  // Check audience claim matches organization format\n  const audiences = Array.isArray(payload.aud) ? payload.aud : payload.aud ? [payload.aud] : [];\n  const hasOrgAudience = audiences.some((aud) => aud.startsWith('urn:logto:organization:'));\n\n  if (!hasOrgAudience) {\n    throw new AuthorizationError('Invalid audience for organization permissions');\n  }\n\n  // Check organization ID matches the context (you may need to extract this from request context)\n  const expectedOrgId = 'your-organization-id'; // Extract from request context\n  const expectedAud = `urn:logto:organization:${expectedOrgId}`;\n  if (!audiences.includes(expectedAud)) {\n    throw new AuthorizationError('Organization ID mismatch');\n  }\n\n  // Check required organization scopes\n  const requiredScopes = ['invite:users', 'manage:settings']; // Replace with your actual required scopes\n  const scopes = (payload.scope as string)?.split(' ') ?? [];\n  if (!requiredScopes.every((scope) => scopes.includes(scope))) {\n    throw new AuthorizationError('Insufficient organization scope');\n  }\n}\n"})})}),(0,r.jsx)(a.A,{value:"organization-level-api-resources",label:"Organization-level API resources",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="jwt-validator.ts"',children:"function verifyPayload(payload: JWTPayload): void {\n  // Check audience claim matches your API resource indicator\n  const audiences = Array.isArray(payload.aud) ? payload.aud : payload.aud ? [payload.aud] : [];\n  if (!audiences.includes('https://your-api-resource-indicator')) {\n    throw new AuthorizationError('Invalid audience for organization-level API resources');\n  }\n\n  // Check organization ID matches the context (you may need to extract this from request context)\n  const expectedOrgId = 'your-organization-id'; // Extract from request context\n  const orgId = payload.organization_id as string;\n  if (expectedOrgId !== orgId) {\n    throw new AuthorizationError('Organization ID mismatch');\n  }\n\n  // Check required scopes for organization-level API resources\n  const requiredScopes = ['api:read', 'api:write']; // Replace with your actual required scopes\n  const scopes = (payload.scope as string)?.split(' ') ?? [];\n  if (!requiredScopes.every((scope) => scopes.includes(scope))) {\n    throw new AuthorizationError('Insufficient organization-level API scopes');\n  }\n}\n"})})})]})]})}function f(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},80232:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="auth-middleware.ts"',children:"import { IncomingHttpHeaders } from 'http';\n\nconst JWKS_URI = 'https://your-tenant.logto.app/oidc/jwks';\nconst ISSUER = 'https://your-tenant.logto.app/oidc';\n\nexport class AuthInfo {\n  constructor(\n    public sub: string,\n    public clientId?: string,\n    public organizationId?: string,\n    public scopes: string[] = [],\n    public audience: string[] = []\n  ) {}\n}\n\nexport class AuthorizationError extends Error {\n  name = 'AuthorizationError';\n  constructor(\n    message: string,\n    public status = 403\n  ) {\n    super(message);\n  }\n}\n\nexport function extractBearerTokenFromHeaders({ authorization }: IncomingHttpHeaders): string {\n  const bearerPrefix = 'Bearer ';\n\n  if (!authorization) {\n    throw new AuthorizationError('Authorization header is missing', 401);\n  }\n\n  if (!authorization.startsWith(bearerPrefix)) {\n    throw new AuthorizationError(`Authorization header must start with \"${bearerPrefix}\"`, 401);\n  }\n\n  return authorization.slice(bearerPrefix.length);\n}\n"})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},76840:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="app.ts"',children:"import { verifyAccessToken } from './auth-middleware.js';\n\napp.get('/api/protected', verifyAccessToken, (req, res) => {\n  // Access auth information directly from req.auth\n  res.json({ auth: req.auth });\n});\n"})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},80068:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="app.ts"',children:"import { fastifyVerifyAccessToken } from './auth-middleware.js';\n\nserver.get('/api/protected', { preHandler: fastifyVerifyAccessToken }, (request, reply) => {\n  // Access auth information directly from request.auth\n  reply.send({ auth: request.auth });\n});\n"})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},69100:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="app.ts"',children:"import { hapiVerifyAccessToken } from './auth-middleware.js';\n\nserver.route({\n  method: 'GET',\n  path: '/api/protected',\n  options: {\n    pre: [{ method: hapiVerifyAccessToken }],\n    handler: (request, h) => {\n      // Access auth information from request.app.auth\n      return { auth: request.app.auth };\n    },\n  },\n});\n"})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},85149:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="app.ts"',children:"import Router from '@koa/router';\nimport { koaVerifyAccessToken } from './auth-middleware.js';\n\nconst router = new Router();\n\nrouter.get('/api/protected', koaVerifyAccessToken, (ctx) => {\n  // Access auth information directly from ctx.state.auth\n  ctx.body = { auth: ctx.state.auth };\n});\n\napp.use(router.routes());\n"})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},66165:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:'title="protected.controller.ts"',children:"import { Controller, Get, UseGuards, Req } from '@nestjs/common';\nimport { AccessTokenGuard } from './access-token.guard.js';\n\n@Controller('api')\nexport class ProtectedController {\n  @Get('protected')\n  @UseGuards(AccessTokenGuard)\n  getProtected(@Req() req: any) {\n    // Access auth information from req.auth\n    return { auth: req.auth };\n  }\n}\n"})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},66937:(e,n,t)=>{t.d(n,{Ay:()=>m,RM:()=>p});var r=t(25105),o=t(79621),i=t(33435),a=t(38552),s=t(22002);function c(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="app/Http/Middleware/VerifyAccessToken.php"',children:"<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Response;\n\nclass VerifyAccessToken\n{\n    use AuthHelpers;\n\n    public function handle(Request $request, Closure $next): Response\n    {\n        try {\n            $token = $this->extractBearerToken($request->headers->all());\n            $payload = JwtValidator::validateJwt($token);\n\n            // Store auth info in request attributes for generic use\n            $request->attributes->set('auth', JwtValidator::createAuthInfo($payload));\n\n            return $next($request);\n\n        } catch (AuthorizationException $e) {\n            return response()->json(['error' => $e->getMessage()], $e->statusCode);\n        }\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Register the middleware in ",(0,r.jsx)(n.code,{children:"app/Http/Kernel.php"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="app/Http/Kernel.php"',children:"protected $middlewareAliases = [\n    // ... other middleware\n    'auth.token' => \\App\\Http\\Middleware\\VerifyAccessToken::class,\n];\n"})})]})}function l(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="src/Middleware/JwtMiddleware.php"',children:"<?php\n\nnamespace App\\Middleware;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\nuse Slim\\Psr7\\Response;\n\nclass JwtMiddleware implements MiddlewareInterface\n{\n    use AuthHelpers;\n\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        try {\n            $headers = $request->getHeaders();\n            $token = $this->extractBearerToken($headers);\n            $payload = JwtValidator::validateJwt($token);\n\n            // Store auth info in request attributes for generic use\n            $request = $request->withAttribute('auth', JwtValidator::createAuthInfo($payload));\n\n            return $handler->handle($request);\n\n        } catch (AuthorizationException $e) {\n            $response = new Response();\n            $response->getBody()->write(json_encode(['error' => $e->getMessage()]));\n            return $response\n                ->withHeader('Content-Type', 'application/json')\n                ->withStatus($e->statusCode);\n        }\n    }\n}\n"})})}function d(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="src/Security/JwtAuthenticator.php"',children:"<?php\n\nnamespace App\\Security;\n\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\TokenInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Security\\Http\\Authenticator\\AbstractAuthenticator;\nuse Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Badge\\UserBadge;\nuse Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\Passport;\nuse Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\SelfValidatingPassport;\n\nclass JwtAuthenticator extends AbstractAuthenticator\n{\n    use AuthHelpers;\n\n    public function supports(Request $request): ?bool\n    {\n        return $request->headers->has('authorization');\n    }\n\n    public function authenticate(Request $request): Passport\n    {\n        try {\n            $token = $this->extractBearerToken($request->headers->all());\n            $payload = JwtValidator::validateJwt($token);\n            $authInfo = JwtValidator::createAuthInfo($payload);\n\n            // Store auth info in request attributes for generic use\n            $request->attributes->set('auth', $authInfo);\n\n            return new SelfValidatingPassport(new UserBadge($payload['sub']));\n\n        } catch (AuthorizationException $e) {\n            throw new AuthenticationException($e->getMessage());\n        }\n    }\n\n    public function onAuthenticationSuccess(Request $request, TokenInterface $token, string $firewallName): ?Response\n    {\n        return null; // Continue to the controller\n    }\n\n    public function onAuthenticationFailure(Request $request, AuthenticationException $exception): ?Response\n    {\n        return new JsonResponse(['error' => $exception->getMessage()], Response::HTTP_UNAUTHORIZED);\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Configure security in ",(0,r.jsx)(n.code,{children:"config/packages/security.yaml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="config/packages/security.yaml"',children:"security:\n  firewalls:\n    api:\n      pattern: ^/api/protected\n      stateless: true\n      custom_authenticators:\n        - App\\Security\\JwtAuthenticator\n"})})]})}const u=Object.freeze({laravel:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}),{}),symfony:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}),{}),slim:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}),{})}),p=[];function h(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["We use ",(0,r.jsx)(n.a,{href:"https://github.com/firebase/php-jwt",children:"firebase/php-jwt"})," to validate JWTs. Install it using Composer:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"composer require firebase/php-jwt\n"})}),"\n",(0,r.jsx)(n.p,{children:"First, add these shared utilities to handle JWT validation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="JwtValidator.php"',children:"<?php\n\nuse Firebase\\JWT\\JWT;\nuse Firebase\\JWT\\JWK;\nuse Firebase\\JWT\\Key;\n\nclass JwtValidator\n{\n    use AuthHelpers;\n\n    private static ?array $jwks = null;\n\n    public static function fetchJwks(): array\n    {\n        if (self::$jwks === null) {\n            $jwksData = file_get_contents(AuthConstants::JWKS_URI);\n            if ($jwksData === false) {\n                throw new AuthorizationException('Failed to fetch JWKS', 401);\n            }\n\n            self::$jwks = json_decode($jwksData, true);\n        }\n\n        return self::$jwks;\n    }\n\n    public static function validateJwt(string $token): array\n    {\n        try {\n            $jwks = self::fetchJwks();\n            $keys = JWK::parseKeySet($jwks);\n\n            $decoded = JWT::decode($token, $keys);\n            $payload = (array) $decoded;\n\n            // Verify issuer\n            if (($payload['iss'] ?? '') !== AuthConstants::ISSUER) {\n                throw new AuthorizationException('Invalid issuer', 401);\n            }\n\n            self::verifyPayload($payload);\n            return $payload;\n\n        } catch (AuthorizationException $e) {\n            throw $e;\n        } catch (Exception $e) {\n            throw new AuthorizationException('Invalid token: ' . $e->getMessage(), 401);\n        }\n    }\n\n    public static function createAuthInfo(array $payload): AuthInfo\n    {\n        $scopes = !empty($payload['scope']) ? explode(' ', $payload['scope']) : [];\n        $audience = $payload['aud'] ?? [];\n\n        if (is_string($audience)) {\n            $audience = [$audience];\n        }\n\n        return new AuthInfo(\n            sub: $payload['sub'],\n            clientId: $payload['client_id'] ?? null,\n            organizationId: $payload['organization_id'] ?? null,\n            scopes: $scopes,\n            audience: $audience\n        );\n    }\n\n    private static function verifyPayload(array $payload): void\n    {\n        // Implement your verification logic here based on permission model\n        // This will be shown in the permission models section below\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then, implement the middleware to verify the access token:"}),"\n",e.framework?u[e.framework]:(0,r.jsx)(s.A,{groupId:"api-framework",children:Object.entries(u).map((([e,n])=>(0,r.jsx)(a.A,{value:e,label:(0,i.My)(e),children:n},e)))}),"\n",(0,r.jsxs)(n.p,{children:["According to your permission model, implement the appropriate verification logic in ",(0,r.jsx)(n.code,{children:"JwtValidator"}),":"]}),"\n",(0,r.jsxs)(s.A,{groupId:"permission-models",children:[(0,r.jsx)(a.A,{value:"global-api-resources",label:"Global API resources",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="JwtValidator.php"',children:"private static function verifyPayload(array $payload): void\n{\n    // Check audience claim matches your API resource indicator\n    $audiences = $payload['aud'] ?? [];\n    if (is_string($audiences)) {\n        $audiences = [$audiences];\n    }\n\n    if (!in_array('https://your-api-resource-indicator', $audiences)) {\n        throw new AuthorizationException('Invalid audience');\n    }\n\n    // Check required scopes for global API resources\n    $requiredScopes = ['api:read', 'api:write']; // Replace with your actual required scopes\n    $scopes = !empty($payload['scope']) ? explode(' ', $payload['scope']) : [];\n\n    foreach ($requiredScopes as $scope) {\n        if (!in_array($scope, $scopes)) {\n            throw new AuthorizationException('Insufficient scope');\n        }\n    }\n}\n"})})}),(0,r.jsx)(a.A,{value:"organization-permissions",label:"Organization (non-API) permissions",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="JwtValidator.php"',children:"private static function verifyPayload(array $payload): void\n{\n    // Check audience claim matches organization format\n    $audiences = $payload['aud'] ?? [];\n    if (is_string($audiences)) {\n        $audiences = [$audiences];\n    }\n\n    $hasOrgAudience = false;\n    foreach ($audiences as $aud) {\n        if (str_starts_with($aud, 'urn:logto:organization:')) {\n            $hasOrgAudience = true;\n            break;\n        }\n    }\n\n    if (!$hasOrgAudience) {\n        throw new AuthorizationException('Invalid audience for organization permissions');\n    }\n\n    // Check organization ID matches the context (you may need to extract this from request context)\n    $expectedOrgId = 'your-organization-id'; // Extract from request context\n    $expectedAud = \"urn:logto:organization:{$expectedOrgId}\";\n    if (!in_array($expectedAud, $audiences)) {\n        throw new AuthorizationException('Organization ID mismatch');\n    }\n\n    // Check required organization scopes\n    $requiredScopes = ['invite:users', 'manage:settings']; // Replace with your actual required scopes\n    $scopes = !empty($payload['scope']) ? explode(' ', $payload['scope']) : [];\n\n    foreach ($requiredScopes as $scope) {\n        if (!in_array($scope, $scopes)) {\n            throw new AuthorizationException('Insufficient organization scope');\n        }\n    }\n}\n"})})}),(0,r.jsx)(a.A,{value:"organization-level-api-resources",label:"Organization-level API resources",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="JwtValidator.php"',children:"private static function verifyPayload(array $payload): void\n{\n    // Check audience claim matches your API resource indicator\n    $audiences = $payload['aud'] ?? [];\n    if (is_string($audiences)) {\n        $audiences = [$audiences];\n    }\n\n    if (!in_array('https://your-api-resource-indicator', $audiences)) {\n        throw new AuthorizationException('Invalid audience for organization-level API resources');\n    }\n\n    // Check organization ID matches the context (you may need to extract this from request context)\n    $expectedOrgId = 'your-organization-id'; // Extract from request context\n    $orgId = $payload['organization_id'] ?? null;\n    if ($expectedOrgId !== $orgId) {\n        throw new AuthorizationException('Organization ID mismatch');\n    }\n\n    // Check required scopes for organization-level API resources\n    $requiredScopes = ['api:read', 'api:write']; // Replace with your actual required scopes\n    $scopes = !empty($payload['scope']) ? explode(' ', $payload['scope']) : [];\n\n    foreach ($requiredScopes as $scope) {\n        if (!in_array($scope, $scopes)) {\n            throw new AuthorizationException('Insufficient organization-level API scopes');\n        }\n    }\n}\n"})})})]})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},70257:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="AuthConstants.php"',children:"<?php\n\nclass AuthConstants\n{\n    public const JWKS_URI = 'https://your-tenant.logto.app/oidc/jwks';\n    public const ISSUER = 'https://your-tenant.logto.app/oidc';\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="AuthInfo.php"',children:"<?php\n\nclass AuthInfo\n{\n    public function __construct(\n        public readonly string $sub,\n        public readonly ?string $clientId = null,\n        public readonly ?string $organizationId = null,\n        public readonly array $scopes = [],\n        public readonly array $audience = []\n    ) {}\n\n    public function toArray(): array\n    {\n        return [\n            'sub' => $this->sub,\n            'client_id' => $this->clientId,\n            'organization_id' => $this->organizationId,\n            'scopes' => $this->scopes,\n            'audience' => $this->audience,\n        ];\n    }\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="AuthorizationException.php"',children:"<?php\n\nclass AuthorizationException extends Exception\n{\n    public function __construct(\n        string $message,\n        public readonly int $statusCode = 403\n    ) {\n        parent::__construct($message);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="AuthHelpers.php"',children:"<?php\n\ntrait AuthHelpers\n{\n    protected function extractBearerToken(array $headers): string\n    {\n        $authorization = $headers['authorization'][0] ?? $headers['Authorization'][0] ?? null;\n\n        if (!$authorization) {\n            throw new AuthorizationException('Authorization header is missing', 401);\n        }\n\n        if (!str_starts_with($authorization, 'Bearer ')) {\n            throw new AuthorizationException('Authorization header must start with \"Bearer \"', 401);\n        }\n\n        return substr($authorization, 7); // Remove 'Bearer ' prefix\n    }\n}\n"})})]})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},31234:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="routes/api.php"',children:"<?php\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Route;\n\nRoute::middleware('auth.token')->group(function () {\n    Route::get('/api/protected', function (Request $request) {\n        // Access auth information from request attributes\n        $auth = $request->attributes->get('auth');\n        return ['auth' => $auth->toArray()];\n    });\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Or using controllers:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="app/Http/Controllers/Api/ProtectedController.php"',children:"<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Http\\Controllers\\Controller;\nuse Illuminate\\Http\\Request;\n\nclass ProtectedController extends Controller\n{\n    public function __construct()\n    {\n        $this->middleware('auth.token');\n    }\n\n    public function index(Request $request)\n    {\n        // Access auth information from request attributes\n        $auth = $request->attributes->get('auth');\n        return ['auth' => $auth->toArray()];\n    }\n\n    public function show(Request $request)\n    {\n        // Your protected endpoint logic\n        $auth = $request->attributes->get('auth');\n        return [\n            'auth' => $auth->toArray(),\n            'message' => 'Protected data accessed successfully'\n        ];\n    }\n}\n"})})]})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},15560:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="src/Controllers/ProtectedController.php"',children:"<?php\n\nnamespace App\\Controllers;\n\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\n\nclass ProtectedController\n{\n    public function index(Request $request, Response $response): Response\n    {\n        // Access auth information from request attributes\n        $auth = $request->getAttribute('auth');\n        $response->getBody()->write(json_encode(['auth' => $auth->toArray()]));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n\n    public function detailed(Request $request, Response $response): Response\n    {\n        // Your protected endpoint logic\n        $auth = $request->getAttribute('auth');\n        $data = [\n            'auth' => $auth->toArray(),\n            'message' => 'Protected data accessed successfully'\n        ];\n        $response->getBody()->write(json_encode($data));\n        return $response->withHeader('Content-Type', 'application/json');\n    }\n}\n"})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},30386:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",metastring:'title="src/Controller/Api/ProtectedController.php"',children:"<?php\n\nnamespace App\\Controller\\Api;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Security\\Http\\Attribute\\IsGranted;\n\n#[Route('/api/protected')]\n#[IsGranted('IS_AUTHENTICATED_FULLY')]\nclass ProtectedController extends AbstractController\n{\n    #[Route('', methods: ['GET'])]\n    public function index(Request $request): JsonResponse\n    {\n        // Access auth information from request attributes\n        $auth = $request->attributes->get('auth');\n        return $this->json(['auth' => $auth->toArray()]);\n    }\n}\n"})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},4714:(e,n,t)=>{t.d(n,{Ay:()=>g,RM:()=>h});var r=t(25105),o=t(79621),i=t(33435),a=t(38552),s=t(22002);function c(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="auth_middleware.py"',children:"from django.http import JsonResponse\nfrom jwt_validator import validate_jwt, create_auth_info\n\ndef require_access_token(view_func):\n    def wrapper(request, *args, **kwargs):\n        try:\n            headers = {key.replace('HTTP_', '').replace('_', '-').lower(): value\n                      for key, value in request.META.items() if key.startswith('HTTP_')}\n\n            token = extract_bearer_token_from_headers(headers)\n            payload = validate_jwt(token)\n\n            # Attach auth info to request for generic use\n            request.auth = create_auth_info(payload)\n\n            return view_func(request, *args, **kwargs)\n\n        except AuthorizationError as e:\n            return JsonResponse({'error': str(e)}, status=e.status)\n\n    return wrapper\n"})})}function l(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="auth_middleware.py"',children:"from rest_framework.authentication import TokenAuthentication\nfrom rest_framework import exceptions\nfrom jwt_validator import validate_jwt, create_auth_info\n\nclass AccessTokenAuthentication(TokenAuthentication):\n    keyword = 'Bearer'  # Use 'Bearer' instead of 'Token'\n\n    def authenticate_credentials(self, key):\n        \"\"\"\n        Authenticate the token by validating it as a JWT.\n        \"\"\"\n        try:\n            payload = validate_jwt(key)\n            auth_info = create_auth_info(payload)\n\n            # Create a user-like object that holds auth info for generic use\n            user = type('User', (), {\n                'auth': auth_info,\n                'is_authenticated': True,\n                'is_anonymous': False,\n                'is_active': True,\n            })()\n\n            return (user, key)\n\n        except AuthorizationError as e:\n            if e.status == 401:\n                raise exceptions.AuthenticationFailed(str(e))\n            else:  # 403\n                raise exceptions.PermissionDenied(str(e))\n"})})}function d(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="auth_middleware.py"',children:"from fastapi import HTTPException, Depends\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom jwt_validator import validate_jwt, create_auth_info\n\nsecurity = HTTPBearer()\n\nasync def verify_access_token(credentials: HTTPAuthorizationCredentials = Depends(security)) -> AuthInfo:\n    try:\n        token = credentials.credentials\n        payload = validate_jwt(token)\n        return create_auth_info(payload)\n\n    except AuthorizationError as e:\n        raise HTTPException(status_code=e.status, detail=str(e))\n"})})}function u(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="auth_middleware.py"',children:"from functools import wraps\nfrom flask import request, jsonify, g\nfrom jwt_validator import validate_jwt, create_auth_info\n\ndef verify_access_token(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        try:\n            token = extract_bearer_token_from_headers(dict(request.headers))\n            payload = validate_jwt(token)\n\n            # Store auth info in Flask's g object for generic use\n            g.auth = create_auth_info(payload)\n\n            return f(*args, **kwargs)\n\n        except AuthorizationError as e:\n            return jsonify({'error': str(e)}), e.status\n\n    return decorated_function\n"})})}const p=Object.freeze({fastapi:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}),{}),flask:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}),{}),django:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}),{}),"django-rest":(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}),{})}),h=[];function m(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["We use ",(0,r.jsx)(n.a,{href:"https://github.com/jpadilla/pyjwt",children:"PyJWT"})," to validate JWTs. Install it if you haven't already:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install pyjwt[crypto]\n"})}),"\n",(0,r.jsx)(n.p,{children:"First, add these shared utilities to handle JWT validation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="jwt_validator.py"',children:"import jwt\nfrom jwt import PyJWKClient\nfrom typing import Dict, Any\nfrom auth_middleware import AuthInfo, AuthorizationError, JWKS_URI, ISSUER\n\njwks_client = PyJWKClient(JWKS_URI)\n\ndef validate_jwt(token: str) -> Dict[str, Any]:\n    \"\"\"Validate JWT and return payload\"\"\"\n    try:\n        signing_key = jwks_client.get_signing_key_from_jwt(token)\n\n        payload = jwt.decode(\n            token,\n            signing_key.key,\n            algorithms=['RS256'],\n            issuer=ISSUER,\n            options={'verify_aud': False}  # We'll verify audience manually\n        )\n\n        verify_payload(payload)\n        return payload\n\n    except jwt.InvalidTokenError as e:\n        raise AuthorizationError(f'Invalid token: {str(e)}', 401)\n    except Exception as e:\n        raise AuthorizationError(f'Token validation failed: {str(e)}', 401)\n\ndef create_auth_info(payload: Dict[str, Any]) -> AuthInfo:\n    \"\"\"Create AuthInfo from JWT payload\"\"\"\n    scopes = payload.get('scope', '').split(' ') if payload.get('scope') else []\n    audience = payload.get('aud', [])\n    if isinstance(audience, str):\n        audience = [audience]\n\n    return AuthInfo(\n        sub=payload.get('sub'),\n        client_id=payload.get('client_id'),\n        organization_id=payload.get('organization_id'),\n        scopes=scopes,\n        audience=audience\n    )\n\ndef verify_payload(payload: Dict[str, Any]) -> None:\n    \"\"\"Verify payload based on permission model\"\"\"\n    # Implement your verification logic here based on permission model\n    # This will be shown in the permission models section below\n    pass\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then, implement the middleware to verify the access token:"}),"\n",e.framework?p[e.framework]:(0,r.jsx)(s.A,{groupId:"api-framework",children:Object.entries(p).map((([e,n])=>(0,r.jsx)(a.A,{value:e,label:(0,i.My)(e),children:n},e)))}),"\n",(0,r.jsxs)(n.p,{children:["According to your permission model, implement the appropriate verification logic in ",(0,r.jsx)(n.code,{children:"jwt_validator.py"}),":"]}),"\n",(0,r.jsxs)(s.A,{groupId:"permission-models",children:[(0,r.jsx)(a.A,{value:"global-api-resources",label:"Global API resources",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="jwt_validator.py"',children:"def verify_payload(payload: Dict[str, Any]) -> None:\n    \"\"\"Verify payload for global API resources\"\"\"\n    # Check audience claim matches your API resource indicator\n    audiences = payload.get('aud', [])\n    if isinstance(audiences, str):\n        audiences = [audiences]\n\n    if 'https://your-api-resource-indicator' not in audiences:\n        raise AuthorizationError('Invalid audience')\n\n    # Check required scopes for global API resources\n    required_scopes = ['api:read', 'api:write']  # Replace with your actual required scopes\n    scopes = payload.get('scope', '').split(' ') if payload.get('scope') else []\n    if not all(scope in scopes for scope in required_scopes):\n        raise AuthorizationError('Insufficient scope')\n"})})}),(0,r.jsx)(a.A,{value:"organization-permissions",label:"Organization (non-API) permissions",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="jwt_validator.py"',children:"def verify_payload(payload: Dict[str, Any]) -> None:\n    \"\"\"Verify payload for organization permissions\"\"\"\n    # Check audience claim matches organization format\n    audiences = payload.get('aud', [])\n    if isinstance(audiences, str):\n        audiences = [audiences]\n\n    has_org_audience = any(aud.startswith('urn:logto:organization:') for aud in audiences)\n    if not has_org_audience:\n        raise AuthorizationError('Invalid audience for organization permissions')\n\n    # Check organization ID matches the context (you may need to extract this from request context)\n    expected_org_id = 'your-organization-id'  # Extract from request context\n    expected_aud = f'urn:logto:organization:{expected_org_id}'\n    if expected_aud not in audiences:\n        raise AuthorizationError('Organization ID mismatch')\n\n    # Check required organization scopes\n    required_scopes = ['invite:users', 'manage:settings']  # Replace with your actual required scopes\n    scopes = payload.get('scope', '').split(' ') if payload.get('scope') else []\n    if not all(scope in scopes for scope in required_scopes):\n        raise AuthorizationError('Insufficient organization scope')\n"})})}),(0,r.jsx)(a.A,{value:"organization-level-api-resources",label:"Organization-level API resources",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="jwt_validator.py"',children:"def verify_payload(payload: Dict[str, Any]) -> None:\n    \"\"\"Verify payload for organization-level API resources\"\"\"\n    # Check audience claim matches your API resource indicator\n    audiences = payload.get('aud', [])\n    if isinstance(audiences, str):\n        audiences = [audiences]\n\n    if 'https://your-api-resource-indicator' not in audiences:\n        raise AuthorizationError('Invalid audience for organization-level API resources')\n\n    # Check organization ID matches the context (you may need to extract this from request context)\n    expected_org_id = 'your-organization-id'  # Extract from request context\n    org_id = payload.get('organization_id')\n    if expected_org_id != org_id:\n        raise AuthorizationError('Organization ID mismatch')\n\n    # Check required scopes for organization-level API resources\n    required_scopes = ['api:read', 'api:write']  # Replace with your actual required scopes\n    scopes = payload.get('scope', '').split(' ') if payload.get('scope') else []\n    if not all(scope in scopes for scope in required_scopes):\n        raise AuthorizationError('Insufficient organization-level API scopes')\n"})})})]})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},83:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="auth_middleware.py"',children:"JWKS_URI = 'https://your-tenant.logto.app/oidc/jwks'\nISSUER = 'https://your-tenant.logto.app/oidc'\n\nclass AuthInfo:\n    def __init__(self, sub: str, client_id: str = None, organization_id: str = None,\n                 scopes: list = None, audience: list = None):\n        self.sub = sub\n        self.client_id = client_id\n        self.organization_id = organization_id\n        self.scopes = scopes or []\n        self.audience = audience or []\n\n    def to_dict(self):\n        return {\n            'sub': self.sub,\n            'client_id': self.client_id,\n            'organization_id': self.organization_id,\n            'scopes': self.scopes,\n            'audience': self.audience\n        }\n\nclass AuthorizationError(Exception):\n    def __init__(self, message: str, status: int = 403):\n        self.message = message\n        self.status = status\n        super().__init__(self.message)\n\ndef extract_bearer_token_from_headers(headers: dict) -> str:\n    \"\"\"\n    Extract bearer token from HTTP headers.\n\n    Note: FastAPI and Django REST Framework have built-in token extraction,\n    so this function is primarily for Flask and other frameworks.\n    \"\"\"\n    authorization = headers.get('authorization') or headers.get('Authorization')\n\n    if not authorization:\n        raise AuthorizationError('Authorization header is missing', 401)\n\n    if not authorization.startswith('Bearer '):\n        raise AuthorizationError('Authorization header must start with \"Bearer \"', 401)\n\n    return authorization[7:]  # Remove 'Bearer ' prefix\n"})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},79665:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="views.py"',children:"from rest_framework.decorators import api_view, authentication_classes\nfrom rest_framework.response import Response\nfrom auth_middleware import AccessTokenAuthentication\n\n@api_view(['GET'])\n@authentication_classes([AccessTokenAuthentication])\ndef protected_view(request):\n    # Access auth information from request.user.auth\n    return Response({\"auth\": request.user.auth.to_dict()})\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Or using class-based views:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="views.py"',children:'from rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom auth_middleware import AccessTokenAuthentication\n\nclass ProtectedView(APIView):\n    authentication_classes = [AccessTokenAuthentication]\n\n    def get(self, request):\n        # Access auth information from request.user.auth\n        return Response({"auth": request.user.auth.to_dict()})\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="urls.py"',children:"from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('api/protected/', views.protected_view, name='protected'),\n    # Or for class-based views:\n    # path('api/protected/', views.ProtectedView.as_view(), name='protected'),\n]\n"})})]})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},29184:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="views.py"',children:'from django.http import JsonResponse\nfrom auth_middleware import require_access_token\n\n@require_access_token\ndef protected_view(request):\n    # Access auth information from request.auth\n    return JsonResponse({"auth": request.auth.to_dict()})\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="urls.py"',children:"from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('api/protected/', views.protected_view, name='protected'),\n]\n"})})]})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},82223:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="app.py"',children:'from fastapi import FastAPI, Depends\nfrom auth_middleware import verify_access_token, AuthInfo\n\napp = FastAPI()\n\n@app.get("/api/protected")\nasync def protected_endpoint(auth: AuthInfo = Depends(verify_access_token)):\n    # Access auth information directly from auth parameter\n    return {"auth": auth.to_dict()}\n'})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},68374:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-py",metastring:'title="app.py"',children:"from flask import Flask, g, jsonify\nfrom auth_middleware import verify_access_token\n\napp = Flask(__name__)\n\n@app.route('/api/protected', methods=['GET'])\n@verify_access_token\ndef protected_endpoint():\n    # Access auth information from g.auth\n    return jsonify({\"auth\": g.auth.to_dict()})\n"})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},67418:(e,n,t)=>{t.d(n,{Ay:()=>m,RM:()=>p});var r=t(25105),o=t(79621),i=t(33435),a=t(38552),s=t(22002);function c(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="auth_helpers.rb"',children:"module GrapeAuthHelpers\n  include AuthHelpers\n\n  def authenticate_user!\n    begin\n      token = extract_bearer_token(request)\n      decoded_token = JwtValidator.validate_jwt(token)\n\n      # Store auth info for generic use\n      @auth = JwtValidator.create_auth_info(decoded_token)\n\n    rescue AuthorizationError => e\n      error!({ error: e.message }, e.status)\n    rescue JWT::DecodeError, JWT::VerificationError, JWT::ExpiredSignature => e\n      error!({ error: 'Invalid token' }, 401)\n    end\n  end\n\n  def auth\n    @auth\n  end\nend\n"})})}function l(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="app/controllers/concerns/jwt_authentication.rb"',children:"module JwtAuthentication\n  extend ActiveSupport::Concern\n  include AuthHelpers\n\n  included do\n    before_action :verify_access_token, only: [:protected_action] # Add specific actions\n  end\n\n  private\n\n  def verify_access_token\n    begin\n      token = extract_bearer_token(request)\n      decoded_token = JwtValidator.validate_jwt(token)\n\n      # Store auth info for generic use\n      @auth = JwtValidator.create_auth_info(decoded_token)\n\n    rescue AuthorizationError => e\n      render json: { error: e.message }, status: e.status\n    rescue JWT::DecodeError, JWT::VerificationError, JWT::ExpiredSignature => e\n      render json: { error: 'Invalid token' }, status: 401\n    end\n  end\nend\n"})})}function d(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="auth_middleware.rb"',children:"class AuthMiddleware\n  include AuthHelpers\n\n  def initialize(app)\n    @app = app\n  end\n\n  def call(env)\n    request = Rack::Request.new(env)\n\n    # Only protect specific routes\n    if request.path.start_with?('/api/protected')\n      begin\n        token = extract_bearer_token(request)\n        decoded_token = JwtValidator.validate_jwt(token)\n\n        # Store auth info in env for generic use\n        env['auth'] = JwtValidator.create_auth_info(decoded_token)\n\n      rescue AuthorizationError => e\n        return [e.status, { 'Content-Type' => 'application/json' }, [{ error: e.message }.to_json]]\n      rescue JWT::DecodeError, JWT::VerificationError, JWT::ExpiredSignature => e\n        return [401, { 'Content-Type' => 'application/json' }, [{ error: 'Invalid token' }.to_json]]\n      end\n    end\n\n    @app.call(env)\n  end\nend\n"})})}const u=Object.freeze({rails:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}),{}),sinatra:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}),{}),grape:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}),{})}),p=[];function h(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["We use the ",(0,r.jsx)(n.a,{href:"https://github.com/jwt/ruby-jwt",children:"jwt"})," gem to validate JWTs. Add it to your Gemfile:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="Gemfile"',children:"gem 'jwt'\n# net-http is part of Ruby standard library since Ruby 2.7, no need to add explicitly\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then run:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bundle install\n"})}),"\n",(0,r.jsx)(n.p,{children:"First, add these shared utilities to handle JWKS and token validation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="jwt_validator.rb"',children:"require 'jwt'\nrequire 'net/http'\nrequire 'json'\n\nclass JwtValidator\n  include AuthHelpers\n\n  def self.fetch_jwks\n    @jwks ||= begin\n      uri = URI(AuthConstants::JWKS_URI)\n      response = Net::HTTP.get_response(uri)\n      raise AuthorizationError.new('Failed to fetch JWKS', 401) unless response.is_a?(Net::HTTPSuccess)\n\n      jwks_data = JSON.parse(response.body)\n      JWT::JWK::Set.new(jwks_data)\n    end\n  end\n\n  def self.validate_jwt(token)\n    jwks = fetch_jwks\n\n    # Let JWT library handle algorithm detection from JWKS\n    decoded_token = JWT.decode(token, nil, true, {\n      iss: AuthConstants::ISSUER,\n      verify_iss: true,\n      verify_aud: false, # We'll verify audience manually based on permission model\n      jwks: jwks\n    })[0]\n\n    verify_payload(decoded_token)\n    decoded_token\n  end\n\n  def self.create_auth_info(payload)\n    scopes = payload['scope']&.split(' ') || []\n    audience = payload['aud'] || []\n\n    AuthInfo.new(\n      payload['sub'],\n      payload['client_id'],\n      payload['organization_id'],\n      scopes,\n      audience\n    )\n  end\n\n  def self.verify_payload(payload)\n    # Implement your verification logic here based on permission model\n    # This will be shown in the permission models section below\n  end\nend\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then, implement the middleware to verify the access token:"}),"\n",e.framework?u[e.framework]:(0,r.jsx)(s.A,{groupId:"api-framework",children:Object.entries(u).map((([e,n])=>(0,r.jsx)(a.A,{value:e,label:(0,i.My)(e),children:n},e)))}),"\n",(0,r.jsxs)(n.p,{children:["According to your permission model, implement the appropriate verification logic in ",(0,r.jsx)(n.code,{children:"JwtValidator"}),":"]}),"\n",(0,r.jsxs)(s.A,{groupId:"permission-models",children:[(0,r.jsx)(a.A,{value:"global-api-resources",label:"Global API resources",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="jwt_validator.rb"',children:"def self.verify_payload(payload)\n  # Check audience claim matches your API resource indicator\n  audiences = payload['aud'] || []\n  unless audiences.include?('https://your-api-resource-indicator')\n    raise AuthorizationError.new('Invalid audience')\n  end\n\n  # Check required scopes for global API resources\n  required_scopes = ['api:read', 'api:write'] # Replace with your actual required scopes\n  token_scopes = payload['scope']&.split(' ') || []\n\n  unless required_scopes.all? { |scope| token_scopes.include?(scope) }\n    raise AuthorizationError.new('Insufficient scope')\n  end\nend\n"})})}),(0,r.jsx)(a.A,{value:"organization-permissions",label:"Organization (non-API) permissions",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="jwt_validator.rb"',children:"def self.verify_payload(payload)\n  # Check audience claim matches organization format\n  audiences = payload['aud'] || []\n  has_org_audience = audiences.any? { |aud| aud.start_with?('urn:logto:organization:') }\n\n  unless has_org_audience\n    raise AuthorizationError.new('Invalid audience for organization permissions')\n  end\n\n  # Check organization ID matches the context (you may need to extract this from request context)\n  expected_org_id = 'your-organization-id' # Extract from request context\n  expected_aud = \"urn:logto:organization:#{expected_org_id}\"\n  unless audiences.include?(expected_aud)\n    raise AuthorizationError.new('Organization ID mismatch')\n  end\n\n  # Check required organization scopes\n  required_scopes = ['invite:users', 'manage:settings'] # Replace with your actual required scopes\n  token_scopes = payload['scope']&.split(' ') || []\n\n  unless required_scopes.all? { |scope| token_scopes.include?(scope) }\n    raise AuthorizationError.new('Insufficient organization scope')\n  end\nend\n"})})}),(0,r.jsx)(a.A,{value:"organization-level-api-resources",label:"Organization-level API resources",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="jwt_validator.rb"',children:"def self.verify_payload(payload)\n  # Check audience claim matches your API resource indicator\n  audiences = payload['aud'] || []\n  unless audiences.include?('https://your-api-resource-indicator')\n    raise AuthorizationError.new('Invalid audience for organization-level API resources')\n  end\n\n  # Check organization ID matches the context (you may need to extract this from request context)\n  expected_org_id = 'your-organization-id' # Extract from request context\n  org_id = payload['organization_id']\n  unless expected_org_id == org_id\n    raise AuthorizationError.new('Organization ID mismatch')\n  end\n\n  # Check required scopes for organization-level API resources\n  required_scopes = ['api:read', 'api:write'] # Replace with your actual required scopes\n  token_scopes = payload['scope']&.split(' ') || []\n\n  unless required_scopes.all? { |scope| token_scopes.include?(scope) }\n    raise AuthorizationError.new('Insufficient organization-level API scopes')\n  end\nend\n"})})})]})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},76877:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="auth_constants.rb"',children:"module AuthConstants\n  JWKS_URI = 'https://your-tenant.logto.app/oidc/jwks'\n  ISSUER = 'https://your-tenant.logto.app/oidc'\nend\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="auth_info.rb"',children:"class AuthInfo\n  attr_accessor :sub, :client_id, :organization_id, :scopes, :audience\n\n  def initialize(sub, client_id = nil, organization_id = nil, scopes = [], audience = [])\n    @sub = sub\n    @client_id = client_id\n    @organization_id = organization_id\n    @scopes = scopes\n    @audience = audience\n  end\n\n  def to_h\n    {\n      sub: @sub,\n      client_id: @client_id,\n      organization_id: @organization_id,\n      scopes: @scopes,\n      audience: @audience\n    }\n  end\nend\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="authorization_error.rb"',children:"class AuthorizationError < StandardError\n  attr_reader :status\n\n  def initialize(message, status = 403)\n    super(message)\n    @status = status\n  end\nend\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="auth_helpers.rb"',children:"module AuthHelpers\n  def extract_bearer_token(request)\n    authorization = request.headers['Authorization']\n\n    raise AuthorizationError.new('Authorization header is missing', 401) unless authorization\n    raise AuthorizationError.new('Authorization header must start with \"Bearer \"', 401) unless authorization.start_with?('Bearer ')\n\n    authorization[7..-1] # Remove 'Bearer ' prefix\n  end\nend\n"})})]})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},35528:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="api.rb"',children:"require 'grape'\nrequire_relative 'auth_helpers'\nrequire_relative 'auth_constants'\nrequire_relative 'auth_info'\nrequire_relative 'authorization_error'\nrequire_relative 'jwt_validator'\n\nclass API < Grape::API\n  format :json\n\n  helpers GrapeAuthHelpers\n\n  namespace :api do\n    namespace :protected do\n      before do\n        authenticate_user!\n      end\n\n      get do\n        # Access auth information from auth helper\n        { auth: auth.to_h }\n      end\n    end\n  end\n\n  # Public endpoint (not protected)\n  get :public do\n    { message: \"Public endpoint\" }\n  end\nend\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="config.ru"',children:"require_relative 'api'\n\nrun API\n"})})]})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},54178:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="app/controllers/application_controller.rb"',children:"class ApplicationController < ActionController::API # For API-only apps\n# class ApplicationController < ActionController::Base # For full Rails apps\n  include JwtAuthentication\nend\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="app/controllers/api/protected_controller.rb"',children:"class Api::ProtectedController < ApplicationController\n  before_action :verify_access_token\n\n  def index\n    # Access auth information from @auth\n    render json: { auth: @auth.to_h }\n  end\nend\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="config/routes.rb"',children:"Rails.application.routes.draw do\n  namespace :api do\n    resources :protected, only: [:index]\n  end\nend\n"})})]})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},1829:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ruby",metastring:'title="app.rb"',children:"require 'sinatra'\nrequire 'json'\nrequire_relative 'auth_middleware'\nrequire_relative 'auth_constants'\nrequire_relative 'auth_info'\nrequire_relative 'authorization_error'\nrequire_relative 'auth_helpers'\nrequire_relative 'jwt_validator'\n\n# Apply middleware\nuse AuthMiddleware\n\nget '/api/protected' do\n  content_type :json\n\n  # Access auth information from env\n  auth = env['auth']\n  { auth: auth.to_h }.to_json\nend\n\n# Public endpoint (not protected by middleware)\nget '/' do\n  content_type :json\n  { message: \"Public endpoint\" }.to_json\nend\n"})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},84923:(e,n,t)=>{t.d(n,{Ay:()=>m,RM:()=>p});var r=t(25105),o=t(79621),i=t(33435),a=t(38552),s=t(22002);function c(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="middleware.rs"',children:"use crate::{AuthInfo, AuthorizationError, extract_bearer_token};\nuse crate::jwt_validator::JwtValidator;\nuse actix_web::{\n    dev::{forward_ready, Service, ServiceRequest, ServiceResponse, Transform},\n    web, Error, HttpMessage, HttpResponse,\n};\nuse futures::future::{ok, Ready};\nuse std::sync::Arc;\n\npub struct JwtMiddleware {\n    validator: Arc<JwtValidator>,\n}\n\nimpl JwtMiddleware {\n    pub fn new(validator: Arc<JwtValidator>) -> Self {\n        Self { validator }\n    }\n}\n\nimpl<S, B> Transform<S, ServiceRequest> for JwtMiddleware\nwhere\n    S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error>,\n    S::Future: 'static,\n    B: 'static,\n{\n    type Response = ServiceResponse<B>;\n    type Error = Error;\n    type InitError = ();\n    type Transform = JwtMiddlewareService<S>;\n    type Future = Ready<Result<Self::Transform, Self::InitError>>;\n\n    fn new_transform(&self, service: S) -> Self::Future {\n        ok(JwtMiddlewareService {\n            service,\n            validator: self.validator.clone(),\n        })\n    }\n}\n\npub struct JwtMiddlewareService<S> {\n    service: S,\n    validator: Arc<JwtValidator>,\n}\n\nimpl<S, B> Service<ServiceRequest> for JwtMiddlewareService<S>\nwhere\n    S: Service<ServiceRequest, Response = ServiceResponse<B>, Error = Error>,\n    S::Future: 'static,\n    B: 'static,\n{\n    type Response = ServiceResponse<B>;\n    type Error = Error;\n    type Future = futures::future::LocalBoxFuture<'static, Result<Self::Response, Self::Error>>;\n\n    forward_ready!(service);\n\n    fn call(&self, req: ServiceRequest) -> Self::Future {\n        let validator = self.validator.clone();\n\n        Box::pin(async move {\n            let authorization = req\n                .headers()\n                .get(\"authorization\")\n                .and_then(|h| h.to_str().ok());\n\n            match extract_bearer_token(authorization)\n                .and_then(|token| validator.validate_jwt(token))\n            {\n                Ok(auth_info) => {\n                    // Store auth info in request extensions for generic use\n                    req.extensions_mut().insert(auth_info);\n                    let fut = self.service.call(req);\n                    fut.await\n                }\n                Err(e) => {\n                    let response = HttpResponse::build(\n                        actix_web::http::StatusCode::from_u16(e.status_code)\n                            .unwrap_or(actix_web::http::StatusCode::FORBIDDEN),\n                    )\n                    .json(serde_json::json!({ \"error\": e.message }));\n\n                    Ok(req.into_response(response))\n                }\n            }\n        })\n    }\n}\n"})})}function l(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="middleware.rs"',children:'use crate::{AuthInfo, AuthorizationError, extract_bearer_token};\nuse crate::jwt_validator::JwtValidator;\nuse axum::{\n    extract::Request,\n    http::{HeaderMap, StatusCode},\n    middleware::Next,\n    response::{IntoResponse, Response},\n    Extension, Json,\n};\nuse serde_json::json;\nuse std::sync::Arc;\n\npub async fn jwt_middleware(\n    Extension(validator): Extension<Arc<JwtValidator>>,\n    headers: HeaderMap,\n    mut request: Request,\n    next: Next,\n) -> Result<Response, AuthorizationError> {\n    let authorization = headers\n        .get("authorization")\n        .and_then(|h| h.to_str().ok());\n\n    let token = extract_bearer_token(authorization)?;\n    let auth_info = validator.validate_jwt(token)?;\n\n    // Store auth info in request extensions for generic use\n    request.extensions_mut().insert(auth_info);\n\n    Ok(next.run(request).await)\n}\n\nimpl IntoResponse for AuthorizationError {\n    fn into_response(self) -> Response {\n        let status = StatusCode::from_u16(self.status_code).unwrap_or(StatusCode::FORBIDDEN);\n        (status, Json(json!({ "error": self.message }))).into_response()\n    }\n}\n'})})}function d(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="guards.rs"',children:"use crate::{AuthInfo, AuthorizationError, extract_bearer_token};\nuse crate::jwt_validator::JwtValidator;\nuse rocket::{\n    http::Status,\n    outcome::Outcome,\n    request::{self, FromRequest, Request},\n    State,\n};\n\n#[rocket::async_trait]\nimpl<'r> FromRequest<'r> for AuthInfo {\n    type Error = AuthorizationError;\n\n    async fn from_request(req: &'r Request<'_>) -> request::Outcome<Self, Self::Error> {\n        let validator = match req.guard::<&State<JwtValidator>>().await {\n            Outcome::Success(validator) => validator,\n            Outcome::Failure((status, _)) => {\n                return Outcome::Failure((\n                    status,\n                    AuthorizationError::with_status(\"JWT validator not found\", 500),\n                ))\n            }\n            Outcome::Forward(()) => {\n                return Outcome::Forward(())\n            }\n        };\n\n        let authorization = req.headers().get_one(\"authorization\");\n\n        match extract_bearer_token(authorization)\n            .and_then(|token| validator.validate_jwt(token))\n        {\n            Ok(auth_info) => Outcome::Success(auth_info),\n            Err(e) => {\n                let status = Status::from_code(e.status_code).unwrap_or(Status::Forbidden);\n                Outcome::Failure((status, e))\n            }\n        }\n    }\n}\n"})})}const u=Object.freeze({axum:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}),{}),"actix-web":(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}),{}),rocket:(0,r.jsx)((function(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}),{})}),p=[];function h(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["We use ",(0,r.jsx)(n.a,{href:"https://github.com/Keats/jsonwebtoken",children:"jsonwebtoken"})," to validate JWTs. Add the required dependencies to your ",(0,r.jsx)(n.code,{children:"Cargo.toml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",metastring:'title="Cargo.toml"',children:'[dependencies]\njsonwebtoken = "9.0"\nserde = { version = "1.0", features = ["derive"] }\nserde_json = "1.0"\nreqwest = { version = "0.11", features = ["json"] }\ntokio = { version = "1.0", features = ["full"] }\n'})}),"\n",(0,r.jsx)(n.p,{children:"First, add these shared utilities to handle JWT validation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="jwt_validator.rs"',children:'use crate::{AuthInfo, AuthorizationError, ISSUER, JWKS_URI};\nuse jsonwebtoken::{decode, decode_header, Algorithm, DecodingKey, Validation};\nuse serde_json::Value;\nuse std::collections::HashMap;\n\npub struct JwtValidator {\n    jwks: HashMap<String, DecodingKey>,\n}\n\nimpl JwtValidator {\n    pub async fn new() -> Result<Self, AuthorizationError> {\n        let jwks = Self::fetch_jwks().await?;\n        Ok(Self { jwks })\n    }\n\n    async fn fetch_jwks() -> Result<HashMap<String, DecodingKey>, AuthorizationError> {\n        let response = reqwest::get(JWKS_URI).await.map_err(|e| {\n            AuthorizationError::with_status(format!("Failed to fetch JWKS: {}", e), 401)\n        })?;\n\n        let jwks: Value = response.json().await.map_err(|e| {\n            AuthorizationError::with_status(format!("Failed to parse JWKS: {}", e), 401)\n        })?;\n\n        let mut keys = HashMap::new();\n\n        if let Some(keys_array) = jwks["keys"].as_array() {\n            for key in keys_array {\n                if let (Some(kid), Some(kty), Some(n), Some(e)) = (\n                    key["kid"].as_str(),\n                    key["kty"].as_str(),\n                    key["n"].as_str(),\n                    key["e"].as_str(),\n                ) {\n                    if kty == "RSA" {\n                        if let Ok(decoding_key) = DecodingKey::from_rsa_components(n, e) {\n                            keys.insert(kid.to_string(), decoding_key);\n                        }\n                    }\n                }\n            }\n        }\n\n        if keys.is_empty() {\n            return Err(AuthorizationError::with_status("No valid keys found in JWKS", 401));\n        }\n\n        Ok(keys)\n    }\n\n    pub fn validate_jwt(&self, token: &str) -> Result<AuthInfo, AuthorizationError> {\n        let header = decode_header(token).map_err(|e| {\n            AuthorizationError::with_status(format!("Invalid token header: {}", e), 401)\n        })?;\n\n        let kid = header.kid.ok_or_else(|| {\n            AuthorizationError::with_status("Token missing kid claim", 401)\n        })?;\n\n        let key = self.jwks.get(&kid).ok_or_else(|| {\n            AuthorizationError::with_status("Unknown key ID", 401)\n        })?;\n\n        let mut validation = Validation::new(Algorithm::RS256);\n        validation.set_issuer(&[ISSUER]);\n        validation.validate_aud = false; // We\'ll verify audience manually\n\n        let token_data = decode::<Value>(token, key, &validation).map_err(|e| {\n            AuthorizationError::with_status(format!("Invalid token: {}", e), 401)\n        })?;\n\n        let claims = token_data.claims;\n        self.verify_payload(&claims)?;\n\n        Ok(self.create_auth_info(claims))\n    }\n\n    fn verify_payload(&self, claims: &Value) -> Result<(), AuthorizationError> {\n        // Implement your verification logic here based on permission model\n        // This will be shown in the permission models section below\n        Ok(())\n    }\n\n    fn create_auth_info(&self, claims: Value) -> AuthInfo {\n        let scopes = claims["scope"]\n            .as_str()\n            .map(|s| s.split(\' \').map(|s| s.to_string()).collect())\n            .unwrap_or_default();\n\n        let audience = match &claims["aud"] {\n            Value::Array(arr) => arr.iter().filter_map(|v| v.as_str().map(|s| s.to_string())).collect(),\n            Value::String(s) => vec![s.clone()],\n            _ => vec![],\n        };\n\n        AuthInfo::new(\n            claims["sub"].as_str().unwrap_or_default().to_string(),\n            claims["client_id"].as_str().map(|s| s.to_string()),\n            claims["organization_id"].as_str().map(|s| s.to_string()),\n            scopes,\n            audience,\n        )\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Then, implement the middleware to verify the access token:"}),"\n",e.framework?u[e.framework]:(0,r.jsx)(s.A,{groupId:"api-framework",children:Object.entries(u).map((([e,n])=>(0,r.jsx)(a.A,{value:e,label:(0,i.My)(e),children:n},e)))}),"\n",(0,r.jsxs)(n.p,{children:["According to your permission model, implement the appropriate verification logic in ",(0,r.jsx)(n.code,{children:"JwtValidator"}),":"]}),"\n",(0,r.jsxs)(s.A,{groupId:"permission-models",children:[(0,r.jsx)(a.A,{value:"global-api-resources",label:"Global API resources",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="jwt_validator.rs"',children:'fn verify_payload(&self, claims: &Value) -> Result<(), AuthorizationError> {\n    // Check audience claim matches your API resource indicator\n    let audiences = match &claims["aud"] {\n        Value::Array(arr) => arr.iter().filter_map(|v| v.as_str()).collect::<Vec<_>>(),\n        Value::String(s) => vec![s.as_str()],\n        _ => vec![],\n    };\n\n    if !audiences.contains(&"https://your-api-resource-indicator") {\n        return Err(AuthorizationError::new("Invalid audience"));\n    }\n\n    // Check required scopes for global API resources\n    let required_scopes = vec!["api:read", "api:write"]; // Replace with your actual required scopes\n    let scopes = claims["scope"]\n        .as_str()\n        .map(|s| s.split(\' \').collect::<Vec<_>>())\n        .unwrap_or_default();\n\n    for required_scope in &required_scopes {\n        if !scopes.contains(required_scope) {\n            return Err(AuthorizationError::new("Insufficient scope"));\n        }\n    }\n\n    Ok(())\n}\n'})})}),(0,r.jsx)(a.A,{value:"organization-permissions",label:"Organization (non-API) permissions",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="jwt_validator.rs"',children:'fn verify_payload(&self, claims: &Value) -> Result<(), AuthorizationError> {\n    // Check audience claim matches organization format\n    let audiences = match &claims["aud"] {\n        Value::Array(arr) => arr.iter().filter_map(|v| v.as_str()).collect::<Vec<_>>(),\n        Value::String(s) => vec![s.as_str()],\n        _ => vec![],\n    };\n\n    let has_org_audience = audiences.iter().any(|aud| aud.starts_with("urn:logto:organization:"));\n    if !has_org_audience {\n        return Err(AuthorizationError::new("Invalid audience for organization permissions"));\n    }\n\n    // Check organization ID matches the context (you may need to extract this from request context)\n    let expected_org_id = "your-organization-id"; // Extract from request context\n    let expected_aud = format!("urn:logto:organization:{}", expected_org_id);\n    if !audiences.contains(&expected_aud.as_str()) {\n        return Err(AuthorizationError::new("Organization ID mismatch"));\n    }\n\n    // Check required organization scopes\n    let required_scopes = vec!["invite:users", "manage:settings"]; // Replace with your actual required scopes\n    let scopes = claims["scope"]\n        .as_str()\n        .map(|s| s.split(\' \').collect::<Vec<_>>())\n        .unwrap_or_default();\n\n    for required_scope in &required_scopes {\n        if !scopes.contains(required_scope) {\n            return Err(AuthorizationError::new("Insufficient organization scope"));\n        }\n    }\n\n    Ok(())\n}\n'})})}),(0,r.jsx)(a.A,{value:"organization-level-api-resources",label:"Organization-level API resources",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="jwt_validator.rs"',children:'fn verify_payload(&self, claims: &Value) -> Result<(), AuthorizationError> {\n    // Check audience claim matches your API resource indicator\n    let audiences = match &claims["aud"] {\n        Value::Array(arr) => arr.iter().filter_map(|v| v.as_str()).collect::<Vec<_>>(),\n        Value::String(s) => vec![s.as_str()],\n        _ => vec![],\n    };\n\n    if !audiences.contains(&"https://your-api-resource-indicator") {\n        return Err(AuthorizationError::new("Invalid audience for organization-level API resources"));\n    }\n\n    // Check organization ID matches the context (you may need to extract this from request context)\n    let expected_org_id = "your-organization-id"; // Extract from request context\n    let org_id = claims["organization_id"].as_str().unwrap_or_default();\n    if expected_org_id != org_id {\n        return Err(AuthorizationError::new("Organization ID mismatch"));\n    }\n\n    // Check required scopes for organization-level API resources\n    let required_scopes = vec!["api:read", "api:write"]; // Replace with your actual required scopes\n    let scopes = claims["scope"]\n        .as_str()\n        .map(|s| s.split(\' \').collect::<Vec<_>>())\n        .unwrap_or_default();\n\n    for required_scope in &required_scopes {\n        if !scopes.contains(required_scope) {\n            return Err(AuthorizationError::new("Insufficient organization-level API scopes"));\n        }\n    }\n\n    Ok(())\n}\n'})})})]})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},46079:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="lib.rs"',children:'use serde::{Deserialize, Serialize};\nuse std::fmt;\n\npub const JWKS_URI: &str = "https://your-tenant.logto.app/oidc/jwks";\npub const ISSUER: &str = "https://your-tenant.logto.app/oidc";\n\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub struct AuthInfo {\n    pub sub: String,\n    pub client_id: Option<String>,\n    pub organization_id: Option<String>,\n    pub scopes: Vec<String>,\n    pub audience: Vec<String>,\n}\n\nimpl AuthInfo {\n    pub fn new(\n        sub: String,\n        client_id: Option<String>,\n        organization_id: Option<String>,\n        scopes: Vec<String>,\n        audience: Vec<String>,\n    ) -> Self {\n        Self {\n            sub,\n            client_id,\n            organization_id,\n            scopes,\n            audience,\n        }\n    }\n}\n\n#[derive(Debug)]\npub struct AuthorizationError {\n    pub message: String,\n    pub status_code: u16,\n}\n\nimpl AuthorizationError {\n    pub fn new(message: impl Into<String>) -> Self {\n        Self {\n            message: message.into(),\n            status_code: 403,\n        }\n    }\n\n    pub fn with_status(message: impl Into<String>, status_code: u16) -> Self {\n        Self {\n            message: message.into(),\n            status_code,\n        }\n    }\n}\n\nimpl fmt::Display for AuthorizationError {\n    fn fmt(&self, f: &mut fmt::Formatter<\'_>) -> fmt::Result {\n        write!(f, "{}", self.message)\n    }\n}\n\nimpl std::error::Error for AuthorizationError {}\n\npub fn extract_bearer_token(authorization: Option<&str>) -> Result<&str, AuthorizationError> {\n    let auth_header = authorization.ok_or_else(|| {\n        AuthorizationError::with_status("Authorization header is missing", 401)\n    })?;\n\n    if !auth_header.starts_with("Bearer ") {\n        return Err(AuthorizationError::with_status(\n            "Authorization header must start with \\"Bearer \\"",\n            401,\n        ));\n    }\n\n    Ok(&auth_header[7..]) // Remove \'Bearer \' prefix\n}\n'})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},19011:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="main.rs"',children:'use actix_web::{middleware::Logger, web, App, HttpRequest, HttpServer, Result};\nuse serde_json::{json, Value};\nuse std::sync::Arc;\n\nmod lib;\nmod jwt_validator;\nmod middleware as jwt_middleware;\n\nuse lib::AuthInfo;\nuse jwt_validator::JwtValidator;\nuse jwt_middleware::JwtMiddleware;\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    let validator = Arc::new(JwtValidator::new().await.expect("Failed to initialize JWT validator"));\n\n    HttpServer::new(move || {\n        App::new()\n            .app_data(web::Data::new(validator.clone()))\n            .wrap(Logger::default())\n            .service(\n                web::scope("/api/protected")\n                    .wrap(JwtMiddleware::new(validator.clone()))\n                    .route("", web::get().to(protected_handler))\n            )\n    })\n    .bind("127.0.0.1:8080")?\n    .run()\n    .await\n}\n\nasync fn protected_handler(req: HttpRequest) -> Result<web::Json<Value>> {\n    // Access auth information from request extensions\n    let auth = req.extensions().get::<AuthInfo>().unwrap();\n    Ok(web::Json(json!({ "auth": auth })))\n}\n'})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},50744:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="main.rs"',children:'use axum::{\n    extract::Extension,\n    http::StatusCode,\n    middleware,\n    response::Json,\n    routing::get,\n    Router,\n};\nuse serde_json::{json, Value};\nuse std::sync::Arc;\nuse tower_http::cors::CorsLayer;\n\nmod lib;\nmod jwt_validator;\nmod middleware as jwt_middleware;\n\nuse lib::AuthInfo;\nuse jwt_validator::JwtValidator;\n\n#[tokio::main]\nasync fn main() {\n    let validator = Arc::new(JwtValidator::new().await.expect("Failed to initialize JWT validator"));\n\n    let app = Router::new()\n        .route("/api/protected", get(protected_handler))\n        .layer(middleware::from_fn(jwt_middleware::jwt_middleware))\n        .layer(Extension(validator))\n        .layer(CorsLayer::permissive());\n\n    let listener = tokio::net::TcpListener::bind("0.0.0.0:3000").await.unwrap();\n    axum::serve(listener, app).await.unwrap();\n}\n\nasync fn protected_handler(Extension(auth): Extension<AuthInfo>) -> Json<Value> {\n    // Access auth information directly from Extension\n    Json(json!({ "auth": auth }))\n}\n'})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},37975:(e,n,t)=>{t.d(n,{Ay:()=>s,RM:()=>i});var r=t(25105),o=t(79621);const i=[];function a(e){const n={code:"code",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",metastring:'title="main.rs"',children:'use rocket::{get, launch, routes, serde::json::Json};\nuse serde_json::{json, Value};\n\nmod lib;\nmod jwt_validator;\nmod guards;\n\nuse lib::AuthInfo;\nuse jwt_validator::JwtValidator;\n\n#[get("/api/protected")]\nfn protected_handler(auth: AuthInfo) -> Json<Value> {\n    // Access auth information directly from request guard\n    Json(json!({ "auth": auth }))\n}\n\n#[launch]\nasync fn rocket() -> _ {\n    let validator = JwtValidator::new().await.expect("Failed to initialize JWT validator");\n\n    rocket::build()\n        .manage(validator)\n        .mount("/", routes![protected_handler])\n}\n'})})}function s(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},38552:(e,n,t)=>{t.d(n,{A:()=>a});t(58101);var r=t(13526);const o={tabItem:"tabItem_dgSZ"};var i=t(25105);function a(e){let{children:n,hidden:t,className:a}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.A)(o.tabItem,a),hidden:t,children:n})}},22002:(e,n,t)=>{t.d(n,{A:()=>v});var r=t(58101),o=t(13526),i=t(60755),a=t(55234),s=t(6635),c=t(4100),l=t(35661),d=t(42752);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:o}}=e;return{value:n,label:t,attributes:r,default:o}}))}(t);return function(e){const n=(0,l.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const o=(0,a.W6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c.aZ)(i),(0,r.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(o.location.search);n.set(i,e),o.replace({...o.location,search:n.toString()})}),[i,o])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:o}=e,i=p(e),[a,c]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:i}))),[l,u]=m({queryString:t,groupId:o}),[g,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[o,i]=(0,d.Dv)(t);return[o,(0,r.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:o}),x=(()=>{const e=l??g;return h({value:e,tabValues:i})?e:null})();(0,s.A)((()=>{x&&c(x)}),[x]);return{selectedValue:a,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),u(e),f(e)}),[u,f,i]),tabValues:i}}var f=t(21929);const x={tabList:"tabList_osvQ",tabItem:"tabItem_dc4O"};var j=t(25105);function y(e){let{className:n,block:t,selectedValue:r,selectValue:a,tabValues:s}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),d=e=>{const n=e.currentTarget,t=c.indexOf(n),o=s[t].value;o!==r&&(l(n),a(o))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},n),children:s.map((e=>{let{value:n,label:t,attributes:i}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>{c.push(e)},onKeyDown:u,onClick:d,...i,className:(0,o.A)("tabs__item",x.tabItem,i?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function w(e){let{lazy:n,children:t,selectedValue:i}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===i));return e?(0,r.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function A(e){const n=g(e);return(0,j.jsxs)("div",{className:(0,o.A)("tabs-container",x.tabList),children:[(0,j.jsx)(y,{...n,...e}),(0,j.jsx)(w,{...n,...e})]})}function v(e){const n=(0,f.A)();return(0,j.jsx)(A,{...e,children:u(e.children)},String(n))}},33435:(e,n,t)=>{t.d(n,{Id:()=>a,My:()=>i});const r=Object.freeze({dotnet:{name:".NET"},go:{name:"Go"},java:{name:"Java"},nodejs:{name:"Node.js"},php:{name:"PHP"},python:{name:"Python"},ruby:{name:"Ruby"},rust:{name:"Rust"}}),o=Object.freeze({express:{name:"Express.js",language:"nodejs"},koa:{name:"Koa.js",language:"nodejs"},fastify:{name:"Fastify",language:"nodejs"},hapi:{name:"Hapi.js",language:"nodejs"},nestjs:{name:"NestJS",language:"nodejs"},gin:{name:"Gin",language:"go"},fiber:{name:"Fiber",language:"go"},echo:{name:"Echo",language:"go"},chi:{name:"Chi",language:"go"},"spring-boot":{name:"Spring Boot",language:"java"},quarkus:{name:"Quarkus",language:"java"},micronaut:{name:"Micronaut",language:"java"},"vertx-web":{name:"Vert.x Web",language:"java"},laravel:{name:"Laravel",language:"php"},symfony:{name:"Symfony",language:"php"},slim:{name:"Slim",language:"php"},rails:{name:"Ruby on Rails",language:"ruby"},sinatra:{name:"Sinatra",language:"ruby"},grape:{name:"Grape",language:"ruby"},fastapi:{name:"FastAPI",language:"python"},flask:{name:"Flask",language:"python"},django:{name:"Django",language:"python"},"django-rest":{name:"Django REST Framework",language:"python"},axum:{name:"Axum",language:"rust"},"actix-web":{name:"Actix Web",language:"rust"},rocket:{name:"Rocket",language:"rust"},"aspnet-core":{name:"ASP.NET Core",language:"dotnet"}}),i=e=>o[e].name,a=e=>r[o[e].language].name},79621:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(58101);const o={},i=r.createContext(o);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);