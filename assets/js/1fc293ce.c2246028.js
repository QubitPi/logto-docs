"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[72141],{27361:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"end-user-flows/sign-up-and-sign-in/README","title":"Sign-up and sign-in","description":"Sign-up and sign-in is the core interaction process for end-users to authenticate and authorize access to client applications. As a centralized OIDC-based CIAM platform, Logto provides a universal sign-in experience for users across multiple client applications and platforms.","source":"@site/docs/end-user-flows/sign-up-and-sign-in/README.mdx","sourceDirName":"end-user-flows/sign-up-and-sign-in","slug":"/end-user-flows/sign-up-and-sign-in/","permalink":"/end-user-flows/sign-up-and-sign-in/","draft":false,"unlisted":false,"editUrl":"https://github.com/logto-io/docs/tree/master/docs/end-user-flows/sign-up-and-sign-in/README.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_custom_props":{"sublist_label":"Authentication flows"}},"sidebar":"docsSidebar","previous":{"title":"End-user flows","permalink":"/end-user-flows/"},"next":{"title":"Email / phone / username sign-up","permalink":"/end-user-flows/sign-up-and-sign-in/sign-up"}}');var s=i(25105),r=i(79621);const o={sidebar_position:1,sidebar_custom_props:{sublist_label:"Authentication flows"}},a="Sign-up and sign-in",c={},d=[{value:"User flow",id:"user-flow",level:2},{value:"User interaction",id:"user-interaction",level:2},{value:"Sign-in experience customization",id:"sign-in-experience-customization",level:2},{value:"FAQs",id:"faqs",level:2},{value:"Per app sign-in experience method or branding",id:"per-app-sign-in-experience-method-or-branding",level:3},{value:"Limit Email domain / IP address / Region",id:"limit-email-domain--ip-address--region",level:3},{value:"Headless API for sign-in and sign-up",id:"headless-api-for-sign-in-and-sign-up",level:3},{value:"Related resources",id:"related-resources",level:2}];function l(e){const n={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",mermaid:"mermaid",p:"p",strong:"strong",...(0,r.R)(),...e.components},{Details:i,Url:t}=n;return i||u("Details",!0),t||u("Url",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"sign-up-and-sign-in",children:"Sign-up and sign-in"})}),"\n",(0,s.jsxs)(n.p,{children:["Sign-up and sign-in is the core interaction process for end-users to authenticate and authorize access to client applications. As a centralized OIDC-based ",(0,s.jsx)(n.a,{href:"https://auth.wiki/iam",children:"CIAM"})," platform, Logto provides a universal sign-in experience for users across multiple client applications and platforms."]}),"\n",(0,s.jsx)(n.h2,{id:"user-flow",children:"User flow"}),"\n",(0,s.jsxs)(n.p,{children:["In a typical ",(0,s.jsx)(n.a,{href:"https://auth.wiki/openid-connect",children:"OIDC"})," authentication flow, the user starts by opening the client app. The client app sends out an ",(0,s.jsx)(n.a,{href:"https://auth.wiki/authorization-request",children:"authorization request"})," to Logto OIDC provider. If the user does not have an active session, Logto will prompt the user to the Logto-hosted sign-in experience page. The user interacts with the Logto experience page and gets authenticated by providing the necessary credentials. Once the user is successfully authenticated, Logto will redirect the user back to the client app with the ",(0,s.jsx)(n.a,{href:"https://auth.wiki/authorization-code-flow#how-does-authorization-code-flow-work",children:"authorization code"}),". The client app then sends a ",(0,s.jsx)(n.a,{href:"https://auth.wiki/token-request",children:"token request"})," to Logto OIDC provider with the authorization code to get the tokens."]}),"\n",(0,s.jsx)(n.mermaid,{value:"sequenceDiagram\n  actor user as User\n  participant client as Client app\n\n  box Logto\n    participant experience as Sign-in experience app\n    participant oidc as OIDC provider\n  end\n\n  user ->> client: Open app\n  client ->> oidc: Send authorization request: post /authorize\n  oidc --\x3e> client: Prompt user to sign in\n  client ->> experience: Redirect to sign-in page\n  user ->> experience: Sign in\n  experience ->> oidc: Assign interaction result: post /experience/submit\n  oidc --\x3e> experience: Authenticated and redirect to client app\n  experience ->> client: Post sign-in redirect:  post /callback?code=...\n  client ->> oidc: Send token request: post /token\n  oidc --\x3e> client: Return token"}),"\n",(0,s.jsx)(n.h2,{id:"user-interaction",children:"User interaction"}),"\n",(0,s.jsxs)(n.p,{children:["An ",(0,s.jsx)(n.strong,{children:"interaction session"})," is created for each user interaction when a client app initiates an authorization request. This session centralizes the user interaction status across multiple client applications, allowing Logto to provide a cohesive sign-in experience. As users switch between client apps, the interaction session remains consistent, maintaining the user's authentication status and reducing the need for repeated sign-ins across platforms. Once the ",(0,s.jsx)(n.strong,{children:"interaction session"})," is established, the user is prompted to sign in to Logto."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"experience app"})," in Logto is a dedicated, hosted application that facilitates the sign-in experience. When users need to authenticate, they are directed to the ",(0,s.jsx)(n.strong,{children:"experience app"}),", where they complete their sign-in and interact with Logto. The ",(0,s.jsx)(n.strong,{children:"experience app"})," utilizes the active interaction session to track and support the user's interaction progress."]}),"\n",(0,s.jsxs)(n.p,{children:["To support and control this user journey, Logto presents a set of session-based ",(0,s.jsx)(n.strong,{children:"Experience APIs"}),". These APIs enable the ",(0,s.jsx)(n.strong,{children:"experience app"})," to handle a wide range of user identification and verification methods by updating and accessing the interaction session status in real-time."]}),"\n",(0,s.jsx)(n.p,{children:"Once the user meets all validation and verification requirements, the interaction session concludes with a result submission to the OIDC provider, where the user is fully authenticated and has provided consent, finalizing the secure sign-in process."}),"\n",(0,s.jsx)(n.mermaid,{value:"flowchart TD\n  %% Layers\n  subgraph Layer1 [Client Application Layer]\n      A[Client Application]\n  end\n\n  subgraph Layer2 [Interaction Management Layer]\n      B[OIDC Provider]\n      C[Interaction Session]\n  end\n\n  subgraph Layer3 [Experience Layer]\n      D[Experience App]\n  end\n\n  %% Connections\n  A --\x3e |Authorization Request| B\n  B --\x3e |Session State| C\n  C -.-> |User Sign-In| D\n  D --\x3e |Identification and Verification | C\n  C --\x3e |Finalized Session Result| B\n  B --\x3e |Authorization Response| A"}),"\n",(0,s.jsx)(n.h2,{id:"sign-in-experience-customization",children:"Sign-in experience customization"}),"\n",(0,s.jsxs)(n.p,{children:["Logto provides a flexible and customizable user experience for various business requirements. Including custom branding, user interface, and user interaction flows. The ",(0,s.jsx)(n.strong,{children:"experience app"})," can be tailored to meet the client application's branding and security requirements."]}),"\n",(0,s.jsxs)(n.p,{children:["Continue to learn more about the sign-in experience ",(0,s.jsx)(n.a,{href:"/end-user-flows/sign-up-and-sign-in/sign-up",children:"setup"})," and ",(0,s.jsx)(n.a,{href:"/customization",children:"customization"})," in Logto."]}),"\n",(0,s.jsx)(n.h2,{id:"faqs",children:"FAQs"}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)(n.h3,{id:"per-app-sign-in-experience-method-or-branding",children:"Per app sign-in experience method or branding"})}),(0,s.jsxs)(n.p,{children:["For applications that require different sign-in experiences or branding, Logto also supports\nper-app customization. Check out the ",(0,s.jsx)(n.a,{href:"/customization/match-your-brand/#app-specific-branding",children:"application settings"})," for more details."]})]}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)(n.h3,{id:"limit-email-domain--ip-address--region",children:"Limit Email domain / IP address / Region"})}),(0,s.jsxs)(n.p,{children:["For attribute-based access control, for example, limiting sign-in based on email domain, IP\naddress, or region, you can use the ",(0,s.jsx)(n.a,{href:"/developers/custom-token-claims/",children:"Custom token claims"})," feature in Logto to\nreject or allow authorization requests based on the user's attributes."]})]}),"\n",(0,s.jsxs)(i,{children:[(0,s.jsx)("summary",{children:(0,s.jsx)(n.h3,{id:"headless-api-for-sign-in-and-sign-up",children:"Headless API for sign-in and sign-up"})}),(0,s.jsxs)(n.p,{children:["Currently, Logto does not provide a headless API for sign-in and sign-up. However, you can bring\nyour own sign-in UI using the ",(0,s.jsx)(n.a,{href:"/customization/bring-your-ui/",children:"Bring your own UI"})," to customize the sign-in and\nsign-up experience."]})]}),"\n",(0,s.jsx)(n.h2,{id:"related-resources",children:"Related resources"}),"\n",(0,s.jsx)(t,{href:"https://blog.logto.io/deprecated-ropc-grant-type",children:(0,s.jsx)(n.p,{children:"Why you should deprecate the Resource Owner Password Credentials (ROPC) grant type"})}),"\n",(0,s.jsx)(t,{href:"https://blog.logto.io/implicit-flow-is-dead",children:(0,s.jsx)(n.p,{children:"Why you should use authorization code flow instead of implicit flow?"})}),"\n",(0,s.jsx)(t,{href:"https://blog.logto.io/token-based-authentication-vs-session-based-authentication",children:(0,s.jsx)(n.p,{children:"Comparing token-based authentication and session-based authentication"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},79621:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(58101);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);