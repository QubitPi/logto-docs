"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[3940],{3014:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>t,default:()=>h,frontMatter:()=>c,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"user-management/advanced-user-search","title":"Advanced user search","description":"Directly using Management API to leverage advanced user search conditions.","source":"@site/docs/user-management/advanced-user-search.mdx","sourceDirName":"user-management","slug":"/user-management/advanced-user-search","permalink":"/user-management/advanced-user-search","draft":false,"unlisted":false,"editUrl":"https://github.com/logto-io/docs/tree/master/docs/user-management/advanced-user-search.mdx","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"Manage users","permalink":"/user-management/manage-users"},"next":{"title":"Personal access token","permalink":"/user-management/personal-access-token"}}');var r=n(25105),i=n(79621);const c={sidebar_position:3},t="Advanced user search",o={},l=[{value:"Perform a search request",id:"perform-a-search-request",level:2},{value:"Sample",id:"sample",level:3},{value:"Parameters",id:"parameters",level:3},{value:"Basic fuzzy search",id:"basic-fuzzy-search",level:3},{value:"Specify fields",id:"specify-fields",level:3},{value:"Changing the joint mode",id:"changing-the-joint-mode",level:3},{value:"Exact match and case sensitivity",id:"exact-match-and-case-sensitivity",level:3},{value:"Regular expression (RegEx)",id:"regular-expression-regex",level:3},{value:"Match mode override",id:"match-mode-override",level:3}];function d(e){const s={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"advanced-user-search",children:"Advanced user search"})}),"\n",(0,r.jsx)(s.p,{children:"Directly using Management API to leverage advanced user search conditions."}),"\n",(0,r.jsx)(s.h2,{id:"perform-a-search-request",children:"Perform a search request"}),"\n",(0,r.jsxs)(s.p,{children:["Use ",(0,r.jsx)(s.a,{href:"https://openapi.logto.io/operation/operation-getuser",children:(0,r.jsx)(s.code,{children:"GET /api/users"})})," for searching users. Note it is a Management API that requires auth like others. See ",(0,r.jsx)(s.a,{href:"/integrate-logto/interact-with-management-api",children:"Interact with Management API"})," for the interaction recipe."]}),"\n",(0,r.jsx)(s.h3,{id:"sample",children:"Sample"}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Request"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"curl \\\n  --location \\\n  --request GET \\\n  'http://<your-logto-endpoint>/api/users?search=%25alice%25'\n\n"})}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Response"})}),"\n",(0,r.jsxs)(s.p,{children:["An array of ",(0,r.jsx)(s.code,{children:"User"})," entity."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-json",children:'[\n  {\n    "id": "MgUzzDsyX0iB",\n    "username": "alice_123",\n    "primaryEmail": "alice@some.email.domain",\n    "primaryPhone": null,\n    "name": null,\n    "avatar": null\n    // ...\n  }\n]\n'})}),"\n",(0,r.jsx)(s.h3,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsx)(s.p,{children:"A search request consists of the following parameter keys:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Search keywords: ",(0,r.jsx)(s.code,{children:"search"}),", ",(0,r.jsx)(s.code,{children:"search.*"})]}),"\n",(0,r.jsxs)(s.li,{children:["Search mode for fields: ",(0,r.jsx)(s.code,{children:"mode"}),", ",(0,r.jsx)(s.code,{children:"mode.*"})," (default value ",(0,r.jsx)(s.code,{children:"'like'"}),", available ",(0,r.jsx)(s.code,{children:"['exact', 'like', 'similar_to', 'posix']"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:["Joint mode: ",(0,r.jsx)(s.code,{children:"joint"})," or ",(0,r.jsx)(s.code,{children:"jointMode"})," (default value ",(0,r.jsx)(s.code,{children:"'or'"}),", available ",(0,r.jsx)(s.code,{children:"['or', 'and']"}),")"]}),"\n",(0,r.jsxs)(s.li,{children:["Is case-sensitive: ",(0,r.jsx)(s.code,{children:"isCaseSensitive"})," (default value ",(0,r.jsx)(s.code,{children:"false"}),")"]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["This API has ",(0,r.jsx)(s.a,{href:"/integrate-logto/interact-with-management-api/#managing-paginated-api-responses",children:"pagination"})," enabled."]}),"\n",(0,r.jsxs)(s.p,{children:["Let's go through them via some examples. All search params will be formatted as a constructor of ",(0,r.jsx)(s.code,{children:"URLSearchParams"}),"."]}),"\n",(0,r.jsx)(s.admonition,{type:"warning",children:(0,r.jsxs)(s.p,{children:["Search mode is set to ",(0,r.jsx)(s.code,{children:"like"})," by default, which uses ",(0,r.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Approximate_string_matching",children:"Approximate string matching"}),' ("fuzzy search").']})}),"\n",(0,r.jsx)(s.admonition,{type:"note",children:(0,r.jsxs)(s.p,{children:['All fuzzy search modes only support matching one value per field. If you need to match multiple values for a single field, you should use the "exact" mode. See ',(0,r.jsx)(s.a,{href:"/user-management/advanced-user-search#exact-match-and-case-sensitivity",children:"Exact match and case sensitivity"})," for details."]})}),"\n",(0,r.jsx)(s.h3,{id:"basic-fuzzy-search",children:"Basic fuzzy search"}),"\n",(0,r.jsxs)(s.p,{children:["If you want to perform a fuzzy search over all available fields, just provide a value for key ",(0,r.jsx)(s.code,{children:"search"}),". It will use ",(0,r.jsxs)(s.a,{href:"https://www.postgresql.org/docs/current/functions-matching.html#FUNCTIONS-LIKE",children:["the ",(0,r.jsx)(s.code,{children:"like"})," operator"]})," under the hood:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"new URLSearchParams([['search', '%foo%']]);\n"})}),"\n",(0,r.jsxs)(s.p,{children:["This search will iterate over all available fields in a user search, i.e. ",(0,r.jsx)(s.code,{children:"id"}),", ",(0,r.jsx)(s.code,{children:"primaryEmail"}),", ",(0,r.jsx)(s.code,{children:"primaryPhone"}),", ",(0,r.jsx)(s.code,{children:"username"}),", ",(0,r.jsx)(s.code,{children:"name"}),"."]}),"\n",(0,r.jsx)(s.h3,{id:"specify-fields",children:"Specify fields"}),"\n",(0,r.jsxs)(s.p,{children:["What if you want to limit the search in ",(0,r.jsx)(s.code,{children:"name"})," only? To search someone that includes ",(0,r.jsx)(s.code,{children:"foo"})," in their name, just use the ",(0,r.jsx)(s.code,{children:"."})," symbol to specify the field:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"new URLSearchParams([['search.name', '%foo%']]);\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Remember nested fields are not supported, e.g. ",(0,r.jsx)(s.code,{children:"search.name.first"})," will result an error."]}),"\n",(0,r.jsx)(s.p,{children:"You can also specify multiple fields at the same time:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"new URLSearchParams([\n  ['search.name', '%foo%'],\n  ['search.primaryEmail', '%@gmail.com'],\n]);\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Means to search users that have ",(0,r.jsx)(s.code,{children:"foo"})," in name ",(0,r.jsx)(s.strong,{children:"OR"})," their email ends with ",(0,r.jsx)(s.code,{children:"@gmail.com"}),"."]}),"\n",(0,r.jsx)(s.h3,{id:"changing-the-joint-mode",children:"Changing the joint mode"}),"\n",(0,r.jsxs)(s.p,{children:["If you want the API only returns the result that satisfies ALL the conditions, set the joint mode to ",(0,r.jsx)(s.code,{children:"and"}),":"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"new URLSearchParams([\n  ['search.name', '%foo%'],\n  ['search.primaryEmail', '%@gmail.com'],\n  ['joint', 'and'],\n]);\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Means to search users that have ",(0,r.jsx)(s.code,{children:"foo"})," in name ",(0,r.jsx)(s.strong,{children:"AND"})," their email ends with ",(0,r.jsx)(s.code,{children:"@gmail.com"}),"."]}),"\n",(0,r.jsx)(s.h3,{id:"exact-match-and-case-sensitivity",children:"Exact match and case sensitivity"}),"\n",(0,r.jsxs)(s.p,{children:['Say you want to search whose name is exact "Alice". You can set ',(0,r.jsx)(s.code,{children:"mode.name"})," to use exact match."]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"new URLSearchParams([\n  ['search.name', 'Alice'],\n  ['mode.name', 'exact'],\n]);\n"})}),"\n",(0,r.jsxs)(s.p,{children:["You may find it has the same effect when using the ",(0,r.jsx)(s.code,{children:"like"})," mode (default) v.s. specifying ",(0,r.jsx)(s.code,{children:"exact"}),". One difference is ",(0,r.jsx)(s.code,{children:"exact"})," mode uses ",(0,r.jsx)(s.code,{children:"="})," for comparing while ",(0,r.jsx)(s.code,{children:"like"})," uses ",(0,r.jsx)(s.code,{children:"like"})," or ",(0,r.jsx)(s.code,{children:"ilike"}),". Theoretically ",(0,r.jsx)(s.code,{children:"="})," should have a better performance."]}),"\n",(0,r.jsxs)(s.p,{children:["Plus, in ",(0,r.jsx)(s.code,{children:"exact"})," mode, you can pass multiple values for matching, and they will be connected with ",(0,r.jsx)(s.code,{children:"or"}),":"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"new URLSearchParams([\n  ['search.name', 'Alice'],\n  ['search.name', 'Bob'],\n  ['mode.name', 'exact'],\n]);\n"})}),"\n",(0,r.jsxs)(s.p,{children:['It will match the users with name "Alice" ',(0,r.jsx)(s.strong,{children:"OR"}),' "Bob".']}),"\n",(0,r.jsx)(s.p,{children:"By default search is case-insensitive. To be more precise, set the search as case-sensitive:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"new URLSearchParams([\n  ['search.name', 'Alice'],\n  ['search.name', 'Bob'],\n  ['mode.name', 'exact'],\n  ['isCaseSensitive', 'true'],\n]);\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Note ",(0,r.jsx)(s.code,{children:"isCaseSensitive"})," is a global config. Thus EVERY field will follow it."]}),"\n",(0,r.jsx)(s.h3,{id:"regular-expression-regex",children:"Regular expression (RegEx)"}),"\n",(0,r.jsxs)(s.p,{children:["PostgreSQL supports two types of regular expressions, ",(0,r.jsx)(s.a,{href:"https://www.postgresql.org/docs/current/functions-matching.html#FUNCTIONS-SIMILARTO-REGEXP",children:"similar to"})," and ",(0,r.jsx)(s.a,{href:"https://www.postgresql.org/docs/current/functions-matching.html#FUNCTIONS-POSIX-REGEXP",children:"posix"}),". Set ",(0,r.jsx)(s.code,{children:"mode"})," to ",(0,r.jsx)(s.code,{children:"similar_to"})," or ",(0,r.jsx)(s.code,{children:"posix"})," to search by regular expressions:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"new URLSearchParams([\n  ['search', '^T.?m Scot+$'],\n  ['mode', 'posix'],\n]);\n"})}),"\n",(0,r.jsxs)(s.blockquote,{children:["\n",(0,r.jsx)(s.p,{children:"Note Mode similar_to only works in case-sensitive searches."}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"match-mode-override",children:"Match mode override"}),"\n",(0,r.jsx)(s.p,{children:"By default, all keywords will inherit the match mode from the general search:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"new URLSearchParams([\n  ['search', '^T.?m Scot+$'],\n  ['mode', 'posix'],\n  ['search.primaryEmail', 'tom%'], // Posix mode\n  ['joint', 'and'],\n]);\n"})}),"\n",(0,r.jsx)(s.p,{children:"To override for specific field:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-javascript",children:"new URLSearchParams([\n  ['search', '^T.?m Scot+$'],\n  ['mode', 'posix'],\n  ['search.primaryEmail', 'tom%'], // Like mode\n  ['mode.primaryEmail', 'like'],\n  ['search.phone', '0{3,}'], // Posix mode\n  ['joint', 'and'],\n]);\n"})})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},79621:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>t});var a=n(58101);const r={},i=a.createContext(r);function c(e){const s=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function t(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),a.createElement(i.Provider,{value:s},e.children)}}}]);