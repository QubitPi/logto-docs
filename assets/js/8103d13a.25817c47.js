"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[9016],{75327:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"user-management/user-data","title":"User data structure","description":"Users are the core entities in the identity service. In Logto, they include basic authentication data based on the OpenID Connect protocol, along with custom data.","source":"@site/docs/user-management/user-data.mdx","sourceDirName":"user-management","slug":"/user-management/user-data","permalink":"/user-management/user-data","draft":false,"unlisted":false,"editUrl":"https://github.com/logto-io/docs/tree/master/docs/user-management/user-data.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"User management","permalink":"/user-management/"},"next":{"title":"Manage users","permalink":"/user-management/manage-users"}}');var r=s(25105),t=s(79621);const a={sidebar_position:1},d="User data structure",o={},l=[{value:"User profile",id:"user-profile",level:2},{value:"Basic data",id:"basic-data",level:2},{value:"id",id:"id",level:3},{value:"username",id:"username",level:3},{value:"primary_email",id:"primary_email",level:3},{value:"primary_phone",id:"primary_phone",level:3},{value:"name",id:"name",level:3},{value:"avatar",id:"avatar",level:3},{value:"profile",id:"profile",level:3},{value:"application_id",id:"application_id",level:3},{value:"last_sign_in_at",id:"last_sign_in_at",level:3},{value:"created_at",id:"created_at",level:3},{value:"updated_at",id:"updated_at",level:3},{value:"has_password",id:"has_password",level:3},{value:"password_encrypted",id:"password_encrypted",level:3},{value:"password_encryption_method",id:"password_encryption_method",level:3},{value:"is_suspended",id:"is_suspended",level:3},{value:"mfa_verification_factors",id:"mfa_verification_factors",level:3},{value:"Social identities",id:"social-identities",level:2},{value:"SSO identities",id:"sso-identities",level:2},{value:"Custom data",id:"custom-data",level:2},{value:"Property reference",id:"property-reference",level:2},{value:"Related resources",id:"related-resources",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components},{CloudLink:s,Url:i}=n;return s||u("CloudLink",!0),i||u("Url",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"user-data-structure",children:"User data structure"})}),"\n",(0,r.jsxs)(n.p,{children:["Users are the core entities in the identity service. In Logto, they include basic authentication data based on the ",(0,r.jsx)(n.a,{href:"https://auth.wiki/openid-connect",children:"OpenID Connect"})," protocol, along with custom data."]}),"\n",(0,r.jsx)(n.h2,{id:"user-profile",children:"User profile"}),"\n",(0,r.jsxs)(n.p,{children:["Each user has a profile containing ",(0,r.jsx)(n.a,{href:"#property-reference",children:"all user information"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"It consists of the following types of data:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/user-management/user-data#basic-data",children:"Basic data"}),": is the basic info from the user profile. It stores all other ",(0,r.jsx)(n.em,{children:"user"}),"'s properties except for social ",(0,r.jsx)(n.code,{children:"identities"})," and ",(0,r.jsx)(n.code,{children:"custom_data"}),", such as user id, username, email, phone number, and when the user last signed in."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/user-management/user-data#social-identities",children:"Social identities"}),": stores the user info retrieved from social sign-in (i.e., sign-in with a social connector), such as Facebook, GitHub, and WeChat."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/user-management/user-data#custom-data",children:"Custom data"}),": stores additional user info not listed in the pre-defined user properties, such as user-preferred color and language."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Here is a sample of a user's data which is retrieved from a sign-in to Facebook:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "id": "iHXPuSb9eMzt",\n  "username": null,\n  "primaryEmail": null,\n  "primaryPhone": null,\n  "name": "John Doe",\n  "avatar": "https://example.com/avatar.png",\n  "customData": {\n    "preferences": {\n      "language": "en",\n      "color": "#f236c9"\n    }\n  },\n  "identities": {\n    "facebook": {\n      "userId": "106077000000000",\n      "details": {\n        "id": "106077000000000",\n        "name": "John Doe",\n        "email": "johndoe@logto.io",\n        "avatar": "https://example.com/avatar.png"\n      }\n    }\n  },\n  "lastSignInAt": 1655799453171,\n  "applicationId": "admin_console"\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["You can query the user profile using ",(0,r.jsx)(s,{to:"/users",children:"Logto Console"})," or Logto Management API, such as ",(0,r.jsx)(n.a,{href:"https://openapi.logto.io/operation/operation-getuser",children:(0,r.jsx)(n.code,{children:"GET /api/users/:userId"})}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"basic-data",children:"Basic data"}),"\n",(0,r.jsxs)(n.p,{children:["Let's walk through all properties in of user's ",(0,r.jsx)(n.em,{children:"basic data"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"id",children:"id"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"id"})," is a unique auto-generated key to identify the user in Logto."]}),"\n",(0,r.jsx)(n.h3,{id:"username",children:"username"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"username"})," is used for sign-in with ",(0,r.jsx)(n.em,{children:"username"})," and password."]}),"\n",(0,r.jsxs)(n.p,{children:["Its value is from the username that the user first registered with. It may be ",(0,r.jsx)(n.code,{children:"null"}),". Its non-null value should be no longer than 128 characters, only contain letters, numbers, and underscores (",(0,r.jsx)(n.code,{children:"_"}),"), and NOT start with a number. It's case-sensitive."]}),"\n",(0,r.jsx)(n.h3,{id:"primary_email",children:"primary_email"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"primary_email"})," is the user's email address, used for sign-in with the email and password / verification code."]}),"\n",(0,r.jsxs)(n.p,{children:["Its value is usually from the email address that the user first registered with. It may be ",(0,r.jsx)(n.code,{children:"null"}),". Its max length is 128."]}),"\n",(0,r.jsx)(n.h3,{id:"primary_phone",children:"primary_phone"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"primary_phone"})," is the user's phone number, used for sign-in with the phone number and password / verification code from SMS."]}),"\n",(0,r.jsxs)(n.p,{children:["Its value is usually from the phone number that the user first registered with. It may be ",(0,r.jsx)(n.code,{children:"null"}),". Its non-null value should contain numbers prefixed with the ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/List_of_country_calling_codes",children:"country calling code"})," (excluding the plus sign ",(0,r.jsx)(n.code,{children:"+"}),")."]}),"\n",(0,r.jsx)(n.h3,{id:"name",children:"name"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"name"})," is the user's full name. Its max length is 128."]}),"\n",(0,r.jsx)(n.h3,{id:"avatar",children:"avatar"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"avatar"})," is the URL pointing to the user's avatar image. Its max length is 2048."]}),"\n",(0,r.jsx)(n.p,{children:"If the user registers with a social connector like Google and Facebook, its value may be retrieved from the social user info."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["This property is mapped to the ",(0,r.jsx)(n.code,{children:"picture"})," claim in the ",(0,r.jsx)(n.a,{href:"https://openid.net/connect/",children:"OpenID Connect"})," standard."]})}),"\n",(0,r.jsx)(n.h3,{id:"profile",children:"profile"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"profile"})," stores additional OpenID Connect ",(0,r.jsx)(n.a,{href:"https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims",children:"standard claims"})," that are not included in user's properties."]}),"\n",(0,r.jsxs)(n.p,{children:["Its type definition can be found at ",(0,r.jsx)(n.a,{href:"https://github.com/logto-io/logto/blob/HEAD/packages/schemas/src/foundations/jsonb-types/users.ts#L6",children:"this file"}),". Here's a copy of the type definition:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"type UserProfile = Partial<{\n  familyName: string;\n  givenName: string;\n  middleName: string;\n  nickname: string;\n  preferredUsername: string;\n  profile: string;\n  website: string;\n  gender: string;\n  birthdate: string;\n  zoneinfo: string;\n  locale: string;\n  address: Partial<{\n    formatted: string;\n    streetAddress: string;\n    locality: string;\n    region: string;\n    postalCode: string;\n    country: string;\n  }>;\n}>;\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Partial"})," means that all properties are optional."]})}),"\n",(0,r.jsxs)(n.p,{children:["A difference compared to the other standard claims is that the properties in ",(0,r.jsx)(n.code,{children:"profile"})," will only be included in the ",(0,r.jsx)(n.a,{href:"https://auth.wiki/id-token",children:"ID token"})," or userinfo endpoint response when their values are not empty, while other standard claims will return ",(0,r.jsx)(n.code,{children:"null"})," if the values are empty."]}),"\n",(0,r.jsx)(n.h3,{id:"application_id",children:"application_id"}),"\n",(0,r.jsxs)(n.p,{children:["The value of ",(0,r.jsx)(n.em,{children:"application_id"})," is from the application the user first signed in to. It may be ",(0,r.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"last_sign_in_at",children:"last_sign_in_at"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"last_sign_in_at"})," is the timestamp with the timezone when the user signed in last time."]}),"\n",(0,r.jsx)(n.h3,{id:"created_at",children:"created_at"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"created_at"})," is the timestamp with the timezone when the user registered the account."]}),"\n",(0,r.jsx)(n.h3,{id:"updated_at",children:"updated_at"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"updated_at"})," is the timestamp with the timezone when the user's profile information was last updated."]}),"\n",(0,r.jsx)(n.h3,{id:"has_password",children:"has_password"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"has_password"})," is a boolean value that indicates whether the user has a password. You can view and manage this status, including setting a new or resetting the password on the detail page of ",(0,r.jsx)(s,{to:"/users",children:"Console > User management"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"password_encrypted",children:"password_encrypted"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"password_encrypted"})," is used to store the user's encrypted password."]}),"\n",(0,r.jsxs)(n.p,{children:["Its value is from the password that the user first registered with. It may be ",(0,r.jsx)(n.code,{children:"null"}),". If its value is non-null, its original content before encryption should be at least six characters."]}),"\n",(0,r.jsx)(n.h3,{id:"password_encryption_method",children:"password_encryption_method"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"password_encryption_method"})," is used to encrypt the user's password. Its value is initialized when the user registers with the username and password. It may be ",(0,r.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Logto uses ",(0,r.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Argon2",children:"Argon2"}),"'s implementation ",(0,r.jsx)(n.a,{href:"https://github.com/ranisalt/node-argon2",children:"node-argon2"})," as the encryption method by default; see the reference for details if you're interested."]}),"\n",(0,r.jsxs)(n.p,{children:["Sample a ",(0,r.jsx)(n.em,{children:"password_encrypted"})," and ",(0,r.jsx)(n.em,{children:"password_encryption_method"})," from a user whose password is ",(0,r.jsx)(n.code,{children:"123456"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "password_encryption_method": "Argon2i",\n  "password_encrypted": "$argon2i$v=19$m=4096,t=10,p=1$aZzrqpSX45DOo+9uEW6XVw$O4MdirF0mtuWWWz68eyNAt2u1FzzV3m3g00oIxmEr0U"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"is_suspended",children:"is_suspended"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"is_suspended"})," is a boolean value that indicates whether a user is suspended or not. The value can be managed by calling the ",(0,r.jsx)(n.a,{href:"https://openapi.logto.io/operation/operation-updateuserissuspended",children:"Logto Management API"})," or using Logto Console."]}),"\n",(0,r.jsx)(n.p,{children:"Once a user is suspended the pre-granted refresh tokens will be revoked immediately and the user won't be able to get authenticated by Logto anymore."}),"\n",(0,r.jsx)(n.h3,{id:"mfa_verification_factors",children:"mfa_verification_factors"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"mfa_verification_factors"})," is an array that lists the ",(0,r.jsx)(n.a,{href:"/end-user-flows/mfa",children:"multi-factor authentication"})," (MFA) methods associated with the user\u2019s account. The possible values include: ",(0,r.jsx)(n.em,{children:"Totp"})," (Authenticator app OTP), ",(0,r.jsx)(n.em,{children:"WebAuthn"})," (Passkey), and ",(0,r.jsx)(n.em,{children:"BackupCode"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'mfaVerificationFactors: ("Totp" | "WebAuthn" | "BackupCode")[];\n'})}),"\n",(0,r.jsx)(n.h2,{id:"social-identities",children:"Social identities"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"identities"})," contains the user info retrieved from ",(0,r.jsx)(n.a,{href:"/end-user-flows/sign-up-and-sign-in/social-sign-in",children:"social sign-in"})," (i.e., sign-in with a ",(0,r.jsx)(n.a,{href:"/connectors/social-connectors",children:"social connector"}),"). Each user's ",(0,r.jsx)(n.em,{children:"identities"})," is stored in an individual JSON object."]}),"\n",(0,r.jsx)(n.p,{children:"The user info varies by social identity provider (i.e., social network platform), and it typically includes the following:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"target"}),' of the identity provider, such as "facebook" or "google"']}),"\n",(0,r.jsx)(n.li,{children:"User's unique identifier for this provider"}),"\n",(0,r.jsx)(n.li,{children:"User's name"}),"\n",(0,r.jsx)(n.li,{children:"User's verified email"}),"\n",(0,r.jsx)(n.li,{children:"User's avatar"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The user's account may be linked to multiple social identity providers via social sign-in; the corresponding user info retrieved from these providers will be stored in the ",(0,r.jsx)(n.em,{children:"identities"})," object."]}),"\n",(0,r.jsxs)(n.p,{children:["Sample ",(0,r.jsx)(n.em,{children:"identities"})," from a user who signed in with both Google and Facebook:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "facebook": {\n    "userId": "5110888888888888",\n    "details": {\n      "id": "5110888888888888",\n      "name": "John Doe",\n      "email": "johndoe@logto.io",\n      "avatar": "https://example.com/avatar.png"\n    }\n  },\n  "google": {\n    "userId": "111000000000000000000",\n    "details": {\n      "id": "111000000000000000000",\n      "name": "John Doe",\n      "email": "johndoe@gmail.com",\n      "avatar": "https://example.com/avatar.png"\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"sso-identities",children:"SSO identities"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"sso_identities"})," contains the user info retrieved from ",(0,r.jsx)(n.a,{href:"/end-user-flows/enterprise-sso",children:"Enterprise SSO"})," (i.e., Single Sign-On login with an enterprise connector](/connectors/enterprise-connectors)). Each user's ",(0,r.jsx)(n.em,{children:"ssoIdentities"})," is stored in an individual JSON object."]}),"\n",(0,r.jsx)(n.p,{children:"The data synced from the SSO identity provider depends the scopes configured in the enterprise connector to request. Here's a copy of the TypeScript type definition:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"type SSOIdentity = {\n  issuer: string;\n  identityId: string;\n  detail: JsonObject; // See https://github.com/withtyped/withtyped/blob/master/packages/server/src/types.ts#L12\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"custom-data",children:"Custom data"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"custom_data"})," stores additional user info not listed in the pre-defined user properties."]}),"\n",(0,r.jsxs)(n.p,{children:["You can use ",(0,r.jsx)(n.em,{children:"custom_data"})," to do the following things:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Record whether specific actions have been done by the user, such as having seen the welcome page."}),"\n",(0,r.jsx)(n.li,{children:"Store application-specific data in the user profile, such as the user's preferred language and appearance per application."}),"\n",(0,r.jsx)(n.li,{children:"Maintain other arbitrary data related to the user."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Sample ",(0,r.jsx)(n.em,{children:"custom_data"})," from an admin user in Logto:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "adminConsolePreferences": {\n    "language": "en",\n    "appearanceMode": "system",\n    "experienceNoticeConfirmed": true\n  },\n  "customDataFoo": {\n    "foo": "foo"\n  },\n  "customDataBar": {\n    "bar": "bar"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Each user's ",(0,r.jsx)(n.em,{children:"custom_data"})," is stored in an individual JSON object."]}),"\n",(0,r.jsxs)(n.p,{children:["Note: DO NOT put sensitive data in ",(0,r.jsx)(n.em,{children:"custom_data"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["You may fetch a user profile containing ",(0,r.jsx)(n.em,{children:"custom_data"})," using ",(0,r.jsx)(n.a,{href:"https://openapi.logto.io/operation/operation-listusercustomdata",children:"Management API"})," and send it to the frontend apps or external backend services. Therefore, putting the sensitive information in ",(0,r.jsx)(n.em,{children:"custom_data"})," may cause data leaks."]}),"\n",(0,r.jsxs)(n.p,{children:["If you still want to put the sensitive information in ",(0,r.jsx)(n.em,{children:"custom_data"}),", we recommend encrypting it first. Only encrypt/decrypt it in a trusted party like your backend services, and avoid doing it in the frontend apps. These will minimize the loss if your users' ",(0,r.jsx)(n.em,{children:"custom_data"})," is leaked by mistake."]}),"\n",(0,r.jsxs)(n.p,{children:["You can update the user's ",(0,r.jsx)(n.em,{children:"custom_data"})," using ",(0,r.jsx)(n.a,{href:"/user-management/manage-users/#view-and-update-the-user-profile",children:"Logto Console"})," or ",(0,r.jsx)(n.a,{href:"/user-management/manage-users/#manage-via-logto-management-api",children:"Logto Management API"}),", such as ",(0,r.jsx)(n.a,{href:"https://openapi.logto.io/operation/operation-getuser",children:(0,r.jsx)(n.code,{children:"PATCH /api/users/:userId"})}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Update carefully"}),"\n",(0,r.jsxs)(n.p,{children:["Updating a user's ",(0,r.jsx)(n.em,{children:"custom_data"})," will completely overwrite its original content in the storage."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, if your input of calling update ",(0,r.jsx)(n.em,{children:"custom_data"})," API looks like this (suppose that the original ",(0,r.jsx)(n.em,{children:"custom_data"})," is previous shown sample data):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "customDataBaz": {\n    "baz": "baz"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["then new ",(0,r.jsx)(n.em,{children:"custom_data"})," value after updating should be:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "customDataBaz": {\n    "baz": "baz"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"That is, the updated field value has nothing to do with the previous value."}),"\n",(0,r.jsx)(n.h2,{id:"property-reference",children:"Property reference"}),"\n",(0,r.jsxs)(n.p,{children:["The following DB user table columns (except ",(0,r.jsx)(n.em,{children:"password_encrypted"})," and ",(0,r.jsx)(n.em,{children:"password_encryption_method"}),") are visible on the user profile, which means you can query them using ",(0,r.jsx)(n.a,{href:"https://openapi.logto.io/operation/operation-getuser",children:"Management API"}),"."]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Name"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Unique"}),(0,r.jsx)(n.th,{children:"Required"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/user-management/user-data#id",children:"id"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Unique identifier"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/user-management/user-data#username",children:"username"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Username for sign-in"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u274c"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/user-management/user-data#primary_email",children:"primary_email"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Primary email"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u274c"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/user-management/user-data#primary_phone",children:"primary_phone"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Primary phone number"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u274c"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/user-management/user-data#name",children:"name"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Full name"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"\u274c"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/user-management/user-data#avatar",children:"avatar"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"URL pointing to user's avatar image"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"\u274c"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/user-management/user-data#profile",children:"profile"})}),(0,r.jsx)(n.td,{children:"object"}),(0,r.jsx)(n.td,{children:"User profile"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"\u2705"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/user-management/user-data#social-identities",children:"identities"})}),(0,r.jsx)(n.td,{children:"object"}),(0,r.jsx)(n.td,{children:"User info retrieved from social sign-in"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"\u2705"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/user-management/user-data#custom-data",children:"custom_data"})}),(0,r.jsx)(n.td,{children:"object"}),(0,r.jsx)(n.td,{children:"Additional info in customizable properties"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"\u2705"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/user-management/user-data#application_id",children:"application_id"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Application ID that the user first registered"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"\u2705"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/user-management/user-data#last_sign_in_at",children:"last_sign_in_at"})}),(0,r.jsx)(n.td,{children:"date time"}),(0,r.jsx)(n.td,{children:"Timestamp when the user signed in last time"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"\u2705"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/user-management/user-data#password_encrypted",children:"password_encrypted"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Encrypted password"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"\u274c"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/user-management/user-data#password_encryption_method",children:"password_encryption_method"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Password encryption method"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"\u274c"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/user-management/user-data#is_suspended",children:"is_suspended"})}),(0,r.jsx)(n.td,{children:"bool"}),(0,r.jsx)(n.td,{children:"User suspend mark"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"\u2705"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/user-management/user-data#mfa_verification_factors",children:"mfa_verifications"})}),(0,r.jsx)(n.td,{children:"object[]"}),(0,r.jsx)(n.td,{children:"MFA verification factors"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"\u2705"})]})]})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Unique"}),": Ensures the ",(0,r.jsx)(n.a,{href:"https://www.postgresql.org/docs/current/ddl-constraints.html#DDL-CONSTRAINTS-UNIQUE-CONSTRAINTS",children:"uniqueness"})," of the values entered into a property of a database table."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Required"}),": Ensures that the values entered a property of a database table can NOT be ",(0,r.jsx)(n.code,{children:"null"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-resources",children:"Related resources"}),"\n",(0,r.jsx)(i,{href:"https://blog.logto.io/secure-hub-for-user-data/",children:"Secure hub for user data on move"})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},79621:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>d});var i=s(58101);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);