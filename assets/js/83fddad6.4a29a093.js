"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[18632],{49613:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return d}});var n=a(59496);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),u=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(a),d=o,m=c["".concat(l,".").concat(d)]||c[d]||h[d]||r;return a?n.createElement(m,i(i({ref:t},p),{},{components:a})):n.createElement(m,i({ref:t},p))}));function d(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<r;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},21174:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return u},metadata:function(){return h},toc:function(){return d}});var n=a(665),o=a(40151),r=(a(59496),a(49613)),i=a(76802),s=a(12991),l=["components"],u={slug:"logto-x-hasura",authors:"gao",tags:["graphql","hasura","api"]},p="Logto x Hasura: How to use open-source auth + GraphQL solution to boost your project",h={permalink:"/blog/logto-x-hasura",source:"@site/blog/2022-08-20-logto-x-hasura/index.mdx",title:"Logto x Hasura: How to use open-source auth + GraphQL solution to boost your project",description:"Intro",date:"2022-08-20T00:00:00.000Z",formattedDate:"August 20, 2022",tags:[{label:"graphql",permalink:"/blog/tags/graphql"},{label:"hasura",permalink:"/blog/tags/hasura"},{label:"api",permalink:"/blog/tags/api"}],readingTime:5.165,hasTruncateMarker:!0,authors:[{name:"Gao",title:"Founder of Silverhand",url:"https://github.com/gao-sun",imageURL:"https://github.com/gao-sun.png",key:"gao"}],frontMatter:{slug:"logto-x-hasura",authors:"gao",tags:["graphql","hasura","api"]},prevItem:{title:"The design considerations for a seamless sign-in experience (First Chapter)",permalink:"/blog/design-for-seamless-sie-1"},nextItem:{title:"TypeScript all-in-one: Monorepo with its pains and gains",permalink:"/blog/typescript-all-in-one"}},c={authorsImageUrls:[void 0]},d=[{value:"Intro",id:"intro",level:2},{value:"Get started",id:"get-started",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Set up API in Logto",id:"set-up-api-in-logto",level:3},{value:"Enable webhook authentication in Hasura",id:"enable-webhook-authentication-in-hasura",level:3},{value:"Send secured GraphQL requests",id:"send-secured-graphql-requests",level:2},{value:"Summary",id:"summary",level:3},{value:"Set default roles in Logto",id:"set-default-roles-in-logto",level:3},{value:"Integrate Logto SDK",id:"integrate-logto-sdk",level:3},{value:"Send requests",id:"send-requests",level:3},{value:"Recap",id:"recap",level:2}],m={toc:d};function g(e){var t=e.components,a=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"intro"},"Intro"),(0,r.kt)("p",null,"When it comes to a new project, you usually cannot skip several things: APIs, authentication + authorization, identity, and end-user sign-in flow. It used to be hard to kick off these things because there are many concepts and technologies that spread widely: RESTful/GraphQL, web frontend, native client, connect clients with APIs, auth best practices to balance security and user experience, etc."),(0,r.kt)("p",null,"Also, most of the works are \u201crepeating\u201d. I mean, they are needed and similar for almost every project, with some tweaks."),(0,r.kt)("p",null,"Sounds scary and tedious? Don\u2019t panic. Today we have open source. With the two open-source projects below, things become not tricky :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/logto-io/logto"},"Logto"),": Helps you build the sign-in, auth, and user identity within minutes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/hasura/graphql-engine"},"Hasura"),": Blazing fast, instant real-time GraphQL APIs on your DB with fine-grained access control.")),(0,r.kt)("center",null,(0,r.kt)("img",{alt:"Logto x Hasura",src:i.Z,width:"480"})),(0,r.kt)("p",null,"In this article, we\u2019ll focus on connecting Logto and Hasura, which enables you to implement authentication, authorization, and GraphQL APIs without friction. Thus you can quickly jump into your business without rocket-science learning."),(0,r.kt)("h2",{id:"get-started"},"Get started"),(0,r.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"Since both ",(0,r.kt)("a",{parentName:"p",href:"https://docs.logto.io/docs/tutorials/get-started/"},"Logto")," and ",(0,r.kt)("a",{parentName:"p",href:"https://hasura.io/docs/latest/getting-started/index/"},"Hasura")," have a decent get-started guide, we assume you have read them and have a basic feeling. Access to a running instance of both is needed."),(0,r.kt)("p",null,"We assume the accessible endpoints are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Logto: ",(0,r.kt)("inlineCode",{parentName:"li"},"http://localhost:3001")),(0,r.kt)("li",{parentName:"ul"},"Hasura: ",(0,r.kt)("inlineCode",{parentName:"li"},"http://localhost:8080"))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you are using Docker/Docker Compose, for accessing of your machine(host)\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost"),", you can use the Docker magic string ",(0,r.kt)("inlineCode",{parentName:"p"},"host.docker.internal"),". In this case, the Logto endpoint will be ",(0,r.kt)("inlineCode",{parentName:"p"},"http://host.docker.internal:3001"),".")),(0,r.kt)("p",null,"Also, we assume you have a preferred platform and framework to build the client app, say React or Next.js."),(0,r.kt)("h3",{id:"set-up-api-in-logto"},"Set up API in Logto"),(0,r.kt)("p",null,"In the left navigation sidebar of your Logto Admin Console, click \u201cAPI Resources\u201d, and you\u2019ll see the API Resource management page."),(0,r.kt)("p",null,"Then click the huge \u201c+ Create API Resource\u201d button in the top-right corner. In the opening modal, enter ",(0,r.kt)("inlineCode",{parentName:"p"},"Hasura")," for API name and ",(0,r.kt)("inlineCode",{parentName:"p"},"https://hasura.api")," for API identifier."),(0,r.kt)("center",null,(0,r.kt)("img",{alt:"Create API modal",src:s.Z,width:"540"})),(0,r.kt)("p",null,"We\u2019ll use this API identifier for the rest of our article. But feel free to change the values based on your preference."),(0,r.kt)("p",null,"Click \u201cCreate API Resource\u201d, and it will show a message that indicates the resource has been successfully created. That\u2019s all we need in Logto for now."),(0,r.kt)("h3",{id:"enable-webhook-authentication-in-hasura"},"Enable webhook authentication in Hasura"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://hasura.io/docs/latest/auth/index/"},"Hasura uses role-based access management"),", which handles authorization. So, we only need to figure out authentication. It supports two methods: Webhook and JWT. We choose ",(0,r.kt)("a",{parentName:"p",href:"https://hasura.io/docs/latest/auth/authentication/webhook/"},"webhook")," since it\u2019s more flexible."),(0,r.kt)("p",null,"To enable webhook authentication, you must set the admin secret and auth hook endpoint."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The admin secret is the key to having Hasura admin access when sending requests. It is required before enabling webhook authentication. Remember to keep it somewhere safe, and don\u2019t use it in production."),(0,r.kt)("li",{parentName:"ul"},"The auth hook endpoint is a URL to send authentication requests.")),(0,r.kt)("p",null,"You can set them via ",(0,r.kt)("a",{parentName:"p",href:"https://hasura.io/docs/latest/auth/authentication/webhook/#configuring-webhook-mode"},"environment variables"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey # Replace with your own secret\nHASURA_GRAPHQL_AUTH_HOOK: http://localhost:3001/api/authn/hasura?resource=https://hasura.api\n")),(0,r.kt)("p",null,"You may notice we use the API identifier filled in Logto to build the auth hook endpoint. It ensures that the user is passing the correct bearer token instead of a random one that may from malicious."),(0,r.kt)("p",null,"You need to update the auth hook endpoint if you have a different Logto endpoint or API indicator. Say you have ",(0,r.kt)("inlineCode",{parentName:"p"},"https://logto.domain.com")," as the Logto endpoint and ",(0,r.kt)("inlineCode",{parentName:"p"},"https://graphql.domain.com")," as the API identifier, then it will be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"HASURA_GRAPHQL_AUTH_HOOK: https://logto.domain.com/api/authn/hasura?resource=https://graphql.domain.com\n")),(0,r.kt)("p",null,"From now, for every GraphQL request, Hasura will bring all request headers to the Logto auth hook endpoint, and Logto will respond properly."),(0,r.kt)("h2",{id:"send-secured-graphql-requests"},"Send secured GraphQL requests"),(0,r.kt)("h3",{id:"summary"},"Summary"),(0,r.kt)("p",null,"Since we won\u2019t use the Hasura admin secret in production, every GraphQL request is secured by the following headers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Authorization")," The standard bearer token that Logto generates."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Expected-Role")," The role you want Logto to show in the auth hook response.")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If the user that the ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization")," header indicates doesn\u2019t have the ",(0,r.kt)("inlineCode",{parentName:"p"},"Expected-Role"),", Logto will respond with ",(0,r.kt)("inlineCode",{parentName:"p"},"401 Unauthorized"),".")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Authorization")," header requires a valid Access Token in JWT format with the Hasura API indicator for audience. Hold on - it\u2019s quite hard to remember and compose all these things. Fortunately we get Logto SDKs to simplify the geeky part."),(0,r.kt)("h3",{id:"set-default-roles-in-logto"},"Set default roles in Logto"),(0,r.kt)("p",null,"By default, only the first user will have an ",(0,r.kt)("inlineCode",{parentName:"p"},"admin")," role name. After that, Logto will NOT assign any role names to new users. But for Hasura, it is necessary to have a role to perform an authed request."),(0,r.kt)("p",null,"While access control is still an under-the-hood feature of Logto, we don\u2019t want you to manually add the default role names. You can set an environment variable ",(0,r.kt)("inlineCode",{parentName:"p"},"USER_DEFAULT_ROLE_NAMES")," with a comma-separated string ",(0,r.kt)("a",{parentName:"p",href:"https://docs.logto.io/docs/references/core/configuration"},"for Logto"),". E.g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"USER_DEFAULT_ROLE_NAMES: user,good_user\n")),(0,r.kt)("p",null,"Then two roles ",(0,r.kt)("inlineCode",{parentName:"p"},"user")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"good_user")," will be automatically added to newly created users. It will reflect in both ",(0,r.kt)("inlineCode",{parentName:"p"},"users")," table and Access Tokens."),(0,r.kt)("h3",{id:"integrate-logto-sdk"},"Integrate Logto SDK"),(0,r.kt)("p",null,"Follow the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.logto.io/docs/recipes/integrate-logto/"},"integration guide")," to integrate a Logto SDK in your client app. It enables not only the ability to generate a valid Access Token for GraphQL requests, but also a smooth sign-in experience for your end-users."),(0,r.kt)("p",null,"Once you finish the guide, we need one tiny modification to the ",(0,r.kt)("inlineCode",{parentName:"p"},"LogtoConfig"),": Add the API indicator you created in Logto Admin Console to ",(0,r.kt)("inlineCode",{parentName:"p"},"resources"),". Taking React SDK as an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const config: LogtoConfig = {\n  endpoint: 'http://localhost:3001',\n  appId: '<your-application-id>',\n  resources: ['https://hasura.api'], // Add this line\n};\n")),(0,r.kt)("h3",{id:"send-requests"},"Send requests"),(0,r.kt)("p",null,"Finally! After the user is signed in, use ",(0,r.kt)("inlineCode",{parentName:"p"},"getAccessToken()")," in Logto SDK to fetch the Access Token for Hasura GraphQL requests:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const accessToken = await logto.getAccessToken('https://hasura.api');\n\n// Before sending the request\nrequest.headers.set('Authorization', `Bearer ${accessToken}`);\nrequest.headers.set('Expected-Role', 'user');\n")),(0,r.kt)("h2",{id:"recap"},"Recap"),(0,r.kt)("p",null,"With the effort above, we successfully implemented all the non-skippable things in the intro:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A database-schema-driven GraphQL API endpoint"),(0,r.kt)("li",{parentName:"ul"},"An auth and identity service on top of OIDC protocol"),(0,r.kt)("li",{parentName:"ul"},"The complete end-user sign-in flow and auth state management"),(0,r.kt)("li",{parentName:"ul"},"Secured API access based on user identity and roles")),(0,r.kt)("p",null,"Not that hard, right? If you meet any issues, feel free to join the ",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/vRvwuwgpVX"},"Logto")," or ",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/hasura"},"Hasura")," discord server to have a live chat with the team."))}g.isMDXComponent=!0},12991:function(e,t,a){t.Z=a.p+"assets/images/create-api-c5c6e125bce972eb32323f2d4e27b436.png"},76802:function(e,t,a){t.Z=a.p+"assets/images/logos-3fc88b5045a437c285845ee9fe4b015c.png"}}]);