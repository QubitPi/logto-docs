"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[5095],{74958:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>u,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"authorization/api-resources/spring-boot","title":"Guide: Spring Boot","description":"In this tutorial, we assume that the client has got a valid access_token and attached to the request header as Authorization: Bearer","source":"@site/docs/authorization/api-resources/spring-boot.mdx","sourceDirName":"authorization/api-resources","slug":"/authorization/api-resources/spring-boot","permalink":"/authorization/api-resources/spring-boot","draft":false,"unlisted":false,"editUrl":"https://github.com/logto-io/docs/tree/master/docs/authorization/api-resources/spring-boot.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"docsSidebar","previous":{"title":"Guide: Node (Express)","permalink":"/authorization/api-resources/node-express"},"next":{"title":"Role-based access control","permalink":"/authorization/role-based-access-control/"}}');var o=t(25105),i=t(79621),a=t(3768),s=t(11043);const c={sidebar_position:4},l="Guide: Spring Boot",u={},d=[{value:"Start a Spring Boot project",id:"start-a-spring-boot-project",level:2},{value:"Add dependencies",id:"add-dependencies",level:2},{value:"Get issuer and JWKS URI",id:"get-issuer-and-jwks-uri",level:2},{value:"Configure application",id:"configure-application",level:2},{value:"Provide audience validator",id:"provide-audience-validator",level:2},{value:"Configure Spring security",id:"configure-spring-security",level:2},{value:"Add APIs",id:"add-apis",level:2},{value:"Access protected API",id:"access-protected-api",level:2}];function p(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"guide-spring-boot",children:"Guide: Spring Boot"})}),"\n",(0,o.jsxs)(r.p,{children:["In this tutorial, we assume that the client has got a valid ",(0,o.jsx)(r.code,{children:"access_token"})," and attached to the request header as ",(0,o.jsx)(r.code,{children:"Authorization: Bearer <access_token>"})]}),"\n",(0,o.jsx)(r.p,{children:"Your web application may run on the server-side using Spring Boot framework. For now, you need to integrate Logto in Spring Boot manually. This article guides you on how to finish it step by step. And we use Gradle, Java, and Spring Security to take the example."}),"\n",(0,o.jsx)(r.h2,{id:"start-a-spring-boot-project",children:"Start a Spring Boot project"}),"\n",(0,o.jsxs)(r.p,{children:["With ",(0,o.jsx)(r.a,{href:"https://start.spring.io/",children:"Spring Initializr"}),", you can quickly start a Spring Boot project. Use the following options:"]}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsx)(r.li,{children:"Gradle Project"}),"\n",(0,o.jsx)(r.li,{children:"Language: Java"}),"\n",(0,o.jsx)(r.li,{children:"Spring Boot: 2.7.2"}),"\n"]}),"\n",(0,o.jsx)(r.p,{children:"Generate and open the project."}),"\n",(0,o.jsx)(r.h2,{id:"add-dependencies",children:"Add dependencies"}),"\n",(0,o.jsxs)(r.p,{children:["Add the dependencies to your Gradle project build file ",(0,o.jsx)(r.code,{children:"build.gradle"}),":"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-groovy",children:"dependencies {\n    implementation 'org.springframework.boot:spring-boot-starter-web'\n    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'\n}\n"})}),"\n",(0,o.jsxs)(r.admonition,{type:"note",children:[(0,o.jsx)(r.p,{children:"Since Spring Boot and Spring Security have built-in support for both OAuth2 resource server and JWT validation, you DO NOT need to add additional libraries from Logto to integrate."}),(0,o.jsxs)(r.p,{children:["See ",(0,o.jsx)(r.a,{href:"https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/index.html",children:"Spring Security OAuth 2.0 Resource Server"})," and ",(0,o.jsx)(r.a,{href:"https://spring.io/guides/topicals/spring-security-architecture",children:"Spring Security Architecture"})," for more details."]})]}),"\n",(0,o.jsx)(r.h2,{id:"get-issuer-and-jwks-uri",children:"Get issuer and JWKS URI"}),"\n",(0,o.jsxs)(r.p,{children:["All tokens are issued by the ",(0,o.jsx)(r.a,{href:"https://openid.net/specs/openid-connect-core-1_0.html#IssuerIdentifier",children:"issuer"}),", and signed with ",(0,o.jsx)(r.a,{href:"https://datatracker.ietf.org/doc/html/rfc7517",children:"JWK"})," (See ",(0,o.jsx)(r.a,{href:"https://datatracker.ietf.org/doc/html/rfc7515",children:"JWS"})," for more details)."]}),"\n",(0,o.jsxs)(r.p,{children:["Before moving on, you will need to get an issuer and a JWKS URI to verify the issuer and the signature of the Bearer Token (",(0,o.jsx)(r.code,{children:"access_token"}),")."]}),"\n",(0,o.jsxs)(r.p,{children:["By default, your Logto's issuer and JWKS URI are ",(0,o.jsx)(r.code,{children:"https://<your-logto-domain>/oidc"})," and ",(0,o.jsx)(r.code,{children:"https://<your-logto-domain>/oidc/jwks"})]}),"\n",(0,o.jsxs)(r.p,{children:["All the latest Logto Authorization Server Configurations can be found by ",(0,o.jsx)(r.code,{children:"https://<your-logto-domain>/oidc/.well-known/openid-configuration"}),", including the ",(0,o.jsx)(r.strong,{children:"issuer"}),", ",(0,o.jsx)(r.strong,{children:"jwks_uri"})," and other authorization configs. For example:"]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-json",children:'{\n  // ...\n  "issuer": "https://<your-logto-domain>/oidc",\n  "jwks_uri": "https://<your-logto-domain>/oidc/jwks"\n  // ...\n}\n'})}),"\n",(0,o.jsx)(r.h2,{id:"configure-application",children:"Configure application"}),"\n",(0,o.jsxs)(r.p,{children:["Use an ",(0,o.jsx)(r.code,{children:"application.yml"})," file (instead of the default ",(0,o.jsx)(r.code,{children:"application.properties"}),") to configure the server port, audience, and OAuth2 resource server."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-yaml",children:"# path/to/project/src/main/resources/application.yaml\nserver:\n  port: 3000\n\nlogto:\n  audience: http://localhost:3000/\n\nspring:\n  security:\n    oauth2:\n      resourceserver:\n        jwt:\n          issuer-uri: <your-logto-issuer-uri>\n          jwk-set-uri: <your-logto-jwks-uri>\n"})}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"audience"}),": The unique API identifier (i.e. API indicator) of your protected API resource."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"spring.security.oauth2.resourceserver.jwt.issuer-uri"}),": The ",(0,o.jsx)(r.code,{children:"iss"})," claim value and the issuer URI in the JWT issued by Logto. Fill out the ",(0,o.jsx)(r.code,{children:"issuer"})," value from the previous section."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"spring.security.oauth2.resourceserver.jwt.jwk-set-uri"}),": Spring Security uses this URI to get the authorization server's public keys to validate JWT signatures. Fill out the ",(0,o.jsx)(r.code,{children:"jwks_uri"})," value from the previous section."]}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"provide-audience-validator",children:"Provide audience validator"}),"\n",(0,o.jsxs)(r.p,{children:["Provide your own ",(0,o.jsx)(r.code,{children:"AudienceValidator"})," class that implements the ",(0,o.jsx)(r.code,{children:"OAuth2TokenValidator"})," interface to validate whether the required audience is present in the JWT."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'// path/to/project/src/main/java/io/logto/springboot/sample/validator/AudienceValidator.java\npackage io.logto.springboot.sample.validator;\n\nimport org.springframework.security.oauth2.core.OAuth2Error;\nimport org.springframework.security.oauth2.core.OAuth2TokenValidator;\nimport org.springframework.security.oauth2.core.OAuth2TokenValidatorResult;\nimport org.springframework.security.oauth2.jwt.Jwt;\n\npublic class AudienceValidator implements OAuth2TokenValidator<Jwt> {\n\n    private final String audience;\n\n    public AudienceValidator(String audience) {\n        this.audience = audience;\n    }\n\n    @Override\n    public OAuth2TokenValidatorResult validate(Jwt jwt) {\n        if (!jwt.getAudience().contains(audience)) {\n            return OAuth2TokenValidatorResult.failure(new OAuth2Error("invalid_token", "Required audience not found", null));\n        }\n\n\t      // Optional: For RBAC validate the scopes of the JWT.\n\t      String scopes = jwt.getClaimAsString("scope");\n\t      if (scopes == null || !scopes.contains("read:profile")) {\n\t          return OAuth2TokenValidatorResult.failure(new OAuth2Error("invalid_token", "Insufficient permission", null));\n\t      }\n\n        return OAuth2TokenValidatorResult.success();\n    }\n}\n'})}),"\n",(0,o.jsx)(r.h2,{id:"configure-spring-security",children:"Configure Spring security"}),"\n",(0,o.jsx)(r.p,{children:"Spring Security makes it easy to configure your application as a Resource Server and validate the JWT from the Bearer Token in the request header."}),"\n",(0,o.jsxs)(r.p,{children:["You need to provide instances of ",(0,o.jsx)(r.code,{children:"JwtDecoder"})," and ",(0,o.jsx)(r.code,{children:"SecurityFilterChain"})," (as Spring beans), and add the ",(0,o.jsx)(r.code,{children:"@EnableWebSecurity"})," annotation."]}),"\n",(0,o.jsx)(r.admonition,{type:"note",children:(0,o.jsxs)(r.p,{children:["Logto uses the ",(0,o.jsx)(r.code,{children:"ES384"})," algorithm to sign the JWTs by default. To decode the JWTs, you need to set the ",(0,o.jsx)(r.code,{children:"jwsAlgorithm"})," to ",(0,o.jsx)(r.code,{children:"ES384"})," explicitly. If you prefer to use ",(0,o.jsx)(r.code,{children:"RSA"}),", feel free to rotate the signing algorithm in the Logto Admin Console. Please refer to ",(0,o.jsx)(r.a,{href:"/developers/signing-keys",children:"Signing keys"})," for more details."]})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'// path/to/project/src/main/java/io/logto/springboot/sample/configuration/SecurityConfiguration.java\npackage io.logto.springboot.sample.configuration;\n\nimport com.nimbusds.jose.JOSEObjectType;\nimport com.nimbusds.jose.proc.DefaultJOSEObjectTypeVerifier;\nimport com.nimbusds.jose.proc.SecurityContext;\nimport io.logto.springboot.sample.validator.AudienceValidator;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.security.config.Customizer;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer;\nimport org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator;\nimport org.springframework.security.oauth2.core.OAuth2TokenValidator;\nimport org.springframework.security.oauth2.jwt.JwtDecoder;\nimport org.springframework.security.oauth2.jwt.JwtValidators;\nimport org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\nimport org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\nimport org.springframework.security.web.DefaultSecurityFilterChain;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfiguration {\n\n    @Value("${logto.audience}")\n    private String audience;\n\n    @Value("${spring.security.oauth2.resourceserver.jwt.issuer-uri}")\n    private String issuer;\n\n    @Value("${spring.security.oauth2.resourceserver.jwt.jwk-set-uri}")\n    private String jwksUri;\n\n    @Bean\n    public JwtDecoder jwtDecoder() {\n        NimbusJwtDecoder jwtDecoder = NimbusJwtDecoder.withJwkSetUri(jwksUri)\n                // Logto uses the ES384 algorithm to sign the JWTs by default.\n                .jwsAlgorithm(ES384)\n                // The decoder should support the token type: Access Token + JWT.\n                .jwtProcessorCustomizer(customizer -> customizer.setJWSTypeVerifier(\n                        new DefaultJOSEObjectTypeVerifier<SecurityContext>(new JOSEObjectType("at+jwt"))))\n                .build();\n\n        jwtDecoder.setJwtValidator(new DelegatingOAuth2TokenValidator<>(\n                new AudienceValidator(audience),\n                new JwtIssuerValidator(issuer),\n                new JwtTimestampValidator()));\n\n        return jwtDecoder;\n    }\n\n    @Bean\n    public DefaultSecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n         http\n          .securityMatcher("/api/**")\n          .oauth2ResourceServer(oauth2 -> oauth2\n              .jwt(Customizer.withDefaults()))\n          .authorizeHttpRequests(requests -> requests\n              // Allow all requests to the public APIs.\n              .requestMatchers("/api/.wellknown/**").permitAll()\n              // Require jwt token validation for the protected APIs.\n              .anyRequest().authenticated());\n\n        return http.build();\n    }\n}\n'})}),"\n",(0,o.jsx)(r.h2,{id:"add-apis",children:"Add APIs"}),"\n",(0,o.jsx)(r.p,{children:"Add a controller to provide the protected and public APIs:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-java",children:'// path/to/project/src/main/java/io/logto/springboot/sample/controller/ProtectedController.java\npackage io.logto.springboot.sample.controller;\n\nimport org.springframework.web.bind.annotation.CrossOrigin;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n// Only allow all origins for the sample.\n// (Production applications should configure CORS carefully.)\n@CrossOrigin(origins = "*")\n@RestController\npublic class ProtectedController {\n    @GetMapping("/api/profile")\n    public String protectedProfile() {\n        return "Protected profile.";\n    }\n\n    @GetMapping("/api/.wellknown/config.json")\n    public String publicConfig() {\n        return "Public config.";\n    }\n}\n\n'})}),"\n",(0,o.jsx)(r.h2,{id:"access-protected-api",children:"Access protected API"}),"\n",(0,o.jsxs)(r.p,{children:["Build and run your Spring Boot web application, e.g. execute the ",(0,o.jsx)(r.code,{children:"bootRun"})," Gradle task."]}),"\n",(0,o.jsxs)(s.A,{children:[(0,o.jsx)(a.A,{value:"linux-or-macos",label:"Linux or macOS",children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"./gradlew bootRun\n"})})}),(0,o.jsx)(a.A,{value:"windows",label:"Windows",children:(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"gradlew.bat bootRun\n"})})})]}),"\n",(0,o.jsx)(r.admonition,{type:"note",children:(0,o.jsxs)(r.p,{children:["This tutorial assumes you have the Access Token for an API resource ",(0,o.jsx)(r.code,{children:"http://localhost:3000/"})," before making a request. If you are not ready, ",(0,o.jsx)(r.a,{href:"/authorization/api-resources/protect-your-api",children:"read this"})," before continuing."]})}),"\n",(0,o.jsxs)(r.p,{children:["Request your protected API with the Access Token as the Bearer token in the Authorization header, e.g. execute the ",(0,o.jsx)(r.code,{children:"curl"})," command."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"curl --include 'http://localhost:3000/api/profile' --header 'Authorization: Bearer <your-access-token>'\n"})}),"\n",(0,o.jsx)(r.p,{children:"If succeeded, you will get a response with 200 status:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-bash",children:"HTTP/1.1 200\n...\n"})}),"\n",(0,o.jsx)(r.p,{children:"Otherwise, you will get a response with 401 status like this:"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{children:'HTTP/1.1 401\n...\nWWW-Authenticate: Bearer error="invalid_token", error_description="An error occurred while attempting to decode the Jwt: Signed JWT rejected: Invalid signature", error_uri="https://tools.ietf.org/html/rfc6750#section-3.1"\n...\n'})})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},3768:(e,r,t)=>{t.d(r,{A:()=>a});t(58101);var n=t(13526);const o={tabItem:"tabItem_y6LR"};var i=t(25105);function a(e){let{children:r,hidden:t,className:a}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,n.A)(o.tabItem,a),hidden:t,children:r})}},11043:(e,r,t)=>{t.d(r,{A:()=>y});var n=t(58101),o=t(13526),i=t(32571),a=t(55234),s=t(87394),c=t(87276),l=t(31637),u=t(16063);function d(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:r,children:t}=e;return(0,n.useMemo)((()=>{const e=r??function(e){return d(e).map((e=>{let{props:{value:r,label:t,attributes:n,default:o}}=e;return{value:r,label:t,attributes:n,default:o}}))}(t);return function(e){const r=(0,l.XI)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,t])}function h(e){let{value:r,tabValues:t}=e;return t.some((e=>e.value===r))}function g(e){let{queryString:r=!1,groupId:t}=e;const o=(0,a.W6)(),i=function(e){let{queryString:r=!1,groupId:t}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:r,groupId:t});return[(0,c.aZ)(i),(0,n.useCallback)((e=>{if(!i)return;const r=new URLSearchParams(o.location.search);r.set(i,e),o.replace({...o.location,search:r.toString()})}),[i,o])]}function m(e){const{defaultValue:r,queryString:t=!1,groupId:o}=e,i=p(e),[a,c]=(0,n.useState)((()=>function(e){let{defaultValue:r,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!h({value:r,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:r,tabValues:i}))),[l,d]=g({queryString:t,groupId:o}),[m,f]=function(e){let{groupId:r}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(r),[o,i]=(0,u.Dv)(t);return[o,(0,n.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:o}),j=(()=>{const e=l??m;return h({value:e,tabValues:i})?e:null})();(0,s.A)((()=>{j&&c(j)}),[j]);return{selectedValue:a,selectValue:(0,n.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),d(e),f(e)}),[d,f,i]),tabValues:i}}var f=t(27034);const j={tabList:"tabList_swUI",tabItem:"tabItem_BXZ5"};var b=t(25105);function w(e){let{className:r,block:t,selectedValue:n,selectValue:a,tabValues:s}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),u=e=>{const r=e.currentTarget,t=c.indexOf(r),o=s[t].value;o!==n&&(l(r),a(o))},d=e=>{let r=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;r=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;r=c[t]??c[c.length-1];break}}r?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},r),children:s.map((e=>{let{value:r,label:t,attributes:i}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:n===r?0:-1,"aria-selected":n===r,ref:e=>c.push(e),onKeyDown:d,onClick:u,...i,className:(0,o.A)("tabs__item",j.tabItem,i?.className,{"tabs__item--active":n===r}),children:t??r},r)}))})}function x(e){let{lazy:r,children:t,selectedValue:i}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(r){const e=a.find((e=>e.props.value===i));return e?(0,n.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:a.map(((e,r)=>(0,n.cloneElement)(e,{key:r,hidden:e.props.value!==i})))})}function v(e){const r=m(e);return(0,b.jsxs)("div",{className:(0,o.A)("tabs-container",j.tabList),children:[(0,b.jsx)(w,{...r,...e}),(0,b.jsx)(x,{...r,...e})]})}function y(e){const r=(0,f.A)();return(0,b.jsx)(v,{...e,children:d(e.children)},String(r))}},79621:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>s});var n=t(58101);const o={},i=n.createContext(o);function a(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);