"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[577],{88371:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"customization/bring-your-ui/debug-and-test-your-custom-ui-locally","title":"Debug and test your custom UI locally","description":"For Logto Cloud users, We\'ve made it easy to let you \\"Bring your own UI\\" to Logto. Cloud users can now upload a zip file containing the custom UI assets in Console > Sign-in experience > Branding > Bring your UI (Check out the Bring your UI page for more details.)","source":"@site/docs/customization/bring-your-ui/debug-and-test-your-custom-ui-locally.mdx","sourceDirName":"customization/bring-your-ui","slug":"/customization/bring-your-ui/debug-and-test-your-custom-ui-locally","permalink":"/customization/bring-your-ui/debug-and-test-your-custom-ui-locally","draft":false,"unlisted":false,"editUrl":"https://github.com/logto-io/docs/tree/master/docs/customization/bring-your-ui/debug-and-test-your-custom-ui-locally.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Bring your UI","permalink":"/customization/bring-your-ui/"},"next":{"title":"Upload custom UI assets using CLI","permalink":"/customization/bring-your-ui/upload-custom-ui-assets-using-cli"}}');var i=n(25105),a=n(79621),r=n(38552),s=n(22002);const l={sidebar_position:1},u="Debug and test your custom UI locally",c={},d=[{value:"Why do I need this?",id:"why-do-i-need-this",level:2},{value:"Instructions",id:"instructions",level:2},{value:"Step 1: Execute the command",id:"step-1-execute-the-command",level:3},{value:"Step 2: Update endpoint URI in your application",id:"step-2-update-endpoint-uri-in-your-application",level:3},{value:"Related resources",id:"related-resources",level:2}];function p(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",mermaid:"mermaid",p:"p",pre:"pre",...(0,a.R)(),...e.components},{CloudLink:n,Url:o}=t;return n||g("CloudLink",!0),o||g("Url",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"debug-and-test-your-custom-ui-locally",children:"Debug and test your custom UI locally"})}),"\n",(0,i.jsxs)(t.p,{children:['For Logto Cloud users, We\'ve made it easy to let you "Bring your own UI" to Logto. Cloud users can now upload a zip file containing the custom UI assets in ',(0,i.jsx)(n,{to:"/sign-in-experience/branding",children:"Console > Sign-in experience > Branding > Bring your UI"})," (Check out the ",(0,i.jsx)(t.a,{href:"/customization/bring-your-ui",children:"Bring your UI"})," page for more details.)"]}),"\n",(0,i.jsx)(t.p,{children:"However, when developing such custom UI pages, users want to test and debug the code locally, before uploading to Logto Cloud. This CLI command helps you set up a local tunnel and connect the following 3 entities together:\nyour Logto cloud auth endpoint, your application, and your custom sign-in UI."}),"\n",(0,i.jsx)(t.h2,{id:"why-do-i-need-this",children:"Why do I need this?"}),"\n",(0,i.jsx)(t.p,{children:'By default, when you click the "sign-in" button in your application, you will be navigated to the sign-in page configured at Logto endpoint. A successful sign-in flow can be illustrated as follows:'}),"\n",(0,i.jsx)(t.mermaid,{value:'sequenceDiagram\n    box Local machine\n    participant A as Your application\n    end\n    box Logto Cloud\n    participant B as Logto Cloud auth endpoint\n    participant C as Logto sign-in page\n    end\n    A ->> B: User initiates "sign-in" action and request auth\n    B --\x3e> A: Return auth response and tell the client<br/>to redirect to the Logto sign-in page\n    A ->> C: Redirect to the Logto sign-in page\n    C ->> B: Submit the sign-in form and<br/>request Experience API to authenticate\n    B --\x3e> C: Respond the sign-in request and<br/>tell the client to redirect to your application\n    C --\x3e> A: Redirect to your application\n    A --\x3e A: Handle the sign-in callback and<br/>the user is now authenticated'}),"\n",(0,i.jsx)(t.p,{children:"But now since you are developing your own custom sign-in UI, you need a way to navigate to the custom sign-in UI pages running on your local machine instead.\nThis requires a local tunnel service to intercept the outgoing requests from your application and redirect them to your custom sign-in UI pages."}),"\n",(0,i.jsxs)(t.p,{children:["Additionally, you need to interact with ",(0,i.jsx)(t.a,{href:"https://openapi.logto.io/group/endpoint-experience",children:"Logto's Experience API"})," to authenticate users and manage sessions.\nThis service will also help forward these Experience API requests to Logto Cloud in order to avoid CORS issues."]}),"\n",(0,i.jsx)(t.p,{children:'The sequence diagram below illustrates how a successful "sign-in" flow works with your custom UI and the tunnel service in place:'}),"\n",(0,i.jsx)(t.mermaid,{value:'sequenceDiagram\n    box Local machine\n    participant A as Your application\n    participant B as Your custom sign-in UI\n    participant C as Tunnel\n    end\n    box Logto Cloud\n    participant D as Logto Cloud auth endpoint\n    participant E as Logto sign-in page\n    end\n    A ->> C: User initiates "sign-in" action and request auth\n    C ->> D: Forward auth request to Logto Cloud endpoint\n    D --\x3e> C: Return auth response and tell the client<br/>to redirect to the Logto sign-in page\n    C ->> B: Intercept the redirect and<br/>redirect to your custom sign-in page\n    B ->> C: Submit the sign-in form and<br/>request Experience API to authenticate\n    C ->> D: Forward the Experience API requests to Logto Cloud\n    D --\x3e> C: Authenticate sign-in request and<br/>tell the client to redirect to your application\n    C --\x3e> A: Redirect to your application\n    A --\x3e A: Handle the sign-in callback and<br/>the user is now authenticated'}),"\n",(0,i.jsx)(t.p,{children:"With the tunnel service in place, you can now develop and test your custom sign-in UI locally, without needing to upload the assets to Logto Cloud every time you make a change."}),"\n",(0,i.jsx)(t.h2,{id:"instructions",children:"Instructions"}),"\n",(0,i.jsx)(t.h3,{id:"step-1-execute-the-command",children:"Step 1: Execute the command"}),"\n",(0,i.jsxs)(t.p,{children:["Assuming your Cloud tenant ID is ",(0,i.jsx)(t.code,{children:"foobar"}),", and you have a custom sign-in page running on your local dev server at ",(0,i.jsx)(t.code,{children:"http://localhost:4000"}),", then you can execute the command this way:"]}),"\n",(0,i.jsxs)(s.A,{groupId:"cmd",children:[(0,i.jsx)(r.A,{value:"cli",label:"CLI",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"logto-tunnel -p 9000 --experience-uri http://localhost:4000/ --endpoint https://foobar.logto.app/\n"})})}),(0,i.jsx)(r.A,{value:"npx",label:"npx",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npx @logto/tunnel -p 9000 --experience-uri http://localhost:4000/ --endpoint https://foobar.logto.app/\n"})})})]}),"\n",(0,i.jsx)(t.p,{children:"It also works if you have custom domain configured in Logto:"}),"\n",(0,i.jsxs)(s.A,{groupId:"cmd",children:[(0,i.jsx)(r.A,{value:"cli",label:"CLI",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"logto-tunnel -p 9000 --experience-uri http://localhost:4000/ --endpoint https://your.custom.domain/\n"})})}),(0,i.jsx)(r.A,{value:"npx",label:"npx",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npx @logto/tunnel -p 9000 --experience-uri http://localhost:4000/ --endpoint https://your.custom.domain/\n"})})})]}),"\n",(0,i.jsxs)(t.p,{children:["Alternatively, the command also supports static html assets without needing to run it first on a dev server. Just make sure there's a ",(0,i.jsx)(t.code,{children:"index.html"})," in the path you specified."]}),"\n",(0,i.jsxs)(s.A,{groupId:"cmd",children:[(0,i.jsx)(r.A,{value:"cli",label:"CLI",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"logto-tunnel -p 9000 --experience-path /path/to/your/static/files --endpoint https://foobar.logto.app/\n"})})}),(0,i.jsx)(r.A,{value:"npx",label:"npx",children:(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"npx @logto/tunnel -p 9000 --experience-path /path/to/your/static/files --endpoint https://foobar.logto.app/\n"})})})]}),"\n",(0,i.jsx)(t.h3,{id:"step-2-update-endpoint-uri-in-your-application",children:"Step 2: Update endpoint URI in your application"}),"\n",(0,i.jsxs)(t.p,{children:["Finally, run your application and set its Logto endpoint to the tunnel service address ",(0,i.jsx)(t.code,{children:"http://localhost:9000/"})," instead."]}),"\n",(0,i.jsx)(t.p,{children:"Let's take a React application as an example:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",metastring:"title=App.tsx",children:"import { LogtoProvider, LogtoConfig } from '@logto/react';\n\nconst config: LogtoConfig = {\n  // endpoint: 'https://foobar.logto.app/', // original Logto Cloud endpoint\n  endpoint: 'http://localhost:9000/', // tunnel service address\n  appId: '<your-application-id>',\n};\n\nconst App = () => (\n  <LogtoProvider config={config}>\n    <YourAppContent />\n  </LogtoProvider>\n);\n"})}),"\n",(0,i.jsx)(t.p,{children:"If you are using social sign-in, you also need to update the redirect URI in your social provider settings to the tunnel service address."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"http://localhost:9000/callback/<connector-id>\n"})}),"\n",(0,i.jsx)(t.p,{children:'If all set up correctly, when you click the "sign-in" button in your application, you should be navigated to your custom sign-in page instead of Logto\'s built-in UI, along with valid session (cookies) that allows you to further interact with Logto Experience API.'}),"\n",(0,i.jsx)(t.p,{children:"Happy coding!"}),"\n",(0,i.jsx)(t.h2,{id:"related-resources",children:"Related resources"}),"\n",(0,i.jsx)(o,{href:"https://blog.logto.io/automate-custom-sign-in-ui-deployment-with-github-actions",children:(0,i.jsx)(t.p,{children:"Automate your custom sign-in UI deployment with GitHub Actions workflow"})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}function g(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},38552:(e,t,n)=>{n.d(t,{A:()=>r});n(58101);var o=n(13526);const i={tabItem:"tabItem_dgSZ"};var a=n(25105);function r(e){let{children:t,hidden:n,className:r}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,o.A)(i.tabItem,r),hidden:n,children:t})}},22002:(e,t,n)=>{n.d(t,{A:()=>I});var o=n(58101),i=n(13526),a=n(60755),r=n(55234),s=n(6635),l=n(4100),u=n(35661),c=n(42752);function d(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,o.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:o,default:i}}=e;return{value:t,label:n,attributes:o,default:i}}))}(n);return function(e){const t=(0,u.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const i=(0,r.W6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(a),(0,o.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(i.location.search);t.set(a,e),i.replace({...i.location,search:t.toString()})}),[a,i])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:i}=e,a=p(e),[r,l]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const o=n.find((e=>e.default))??n[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:t,tabValues:a}))),[u,d]=g({queryString:n,groupId:i}),[m,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[i,a]=(0,c.Dv)(n);return[i,(0,o.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:i}),y=(()=>{const e=u??m;return h({value:e,tabValues:a})?e:null})();(0,s.A)((()=>{y&&l(y)}),[y]);return{selectedValue:r,selectValue:(0,o.useCallback)((e=>{if(!h({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),b(e)}),[d,b,a]),tabValues:a}}var b=n(21929);const y={tabList:"tabList_osvQ",tabItem:"tabItem_dc4O"};var x=n(25105);function f(e){let{className:t,block:n,selectedValue:o,selectValue:r,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:u}=(0,a.a_)(),c=e=>{const t=e.currentTarget,n=l.indexOf(t),i=s[n].value;i!==o&&(u(t),r(i))},d=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},t),children:s.map((e=>{let{value:t,label:n,attributes:a}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,ref:e=>{l.push(e)},onKeyDown:d,onClick:c,...a,className:(0,i.A)("tabs__item",y.tabItem,a?.className,{"tabs__item--active":o===t}),children:n??t},t)}))})}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:r.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function j(e){const t=m(e);return(0,x.jsxs)("div",{className:(0,i.A)("tabs-container",y.tabList),children:[(0,x.jsx)(f,{...t,...e}),(0,x.jsx)(v,{...t,...e})]})}function I(e){const t=(0,b.A)();return(0,x.jsx)(j,{...e,children:d(e.children)},String(t))}},79621:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var o=n(58101);const i={},a=o.createContext(i);function r(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);