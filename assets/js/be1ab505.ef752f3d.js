"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[8244],{52476:(e,n,t)=>{t.d(n,{Ay:()=>l,RM:()=>i});var r=t(25105),s=t(79621),o=t(27519);const i=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Understanding the architecture",id:"understanding-the-architecture",level:3}];function a(e){const n={a:"a",admonition:"admonition",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A ",(0,r.jsx)(n.a,{href:"https://cloud.logto.io",children:"Logto Cloud"})," (or self-hosted) tenant"]}),"\n",(0,r.jsx)(n.li,{children:"Node.js or Python environment"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"understanding-the-architecture",children:"Understanding the architecture"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"MCP server"}),": The server that exposes tools and resources to MCP clients."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"MCP client"}),": A client used to initiate the authentication flow and test the integration. ",(0,r.jsx)("b",{children:e.isThirdParty?"The third-party AI agent will be used as the client in this guide.":"We'll use the MCP Inspector as the client in this guide."})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Logto"}),": Serves as the OpenID Connect provider (authorization server) and manages user identities."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"A non-normative sequence diagram illustrates the overall flow of the process:"}),"\n",(0,r.jsx)(o.A,{value:`sequenceDiagram\n  participant Client as MCP Client<br/>${e.isThirdParty?"(third-party AI agent)":"(MCP Inspector)"}\n  participant Server as MCP Server\n  participant Logto\n\n  Server->>Logto: Request OpenID Connect configuration\n  Logto->>Server: Return configuration\n  Note over Server: Cache the configuration\n  Client->>Server: Request access to a tool\n  Server->>Client: Not authenticated (401 Unauthorized)\n  Client->>Server: Request OAuth 2.0 Authorization Server Metadata\n  Note over Server: In this context, \u201cOpenID Connect configuration\u201d and<br/>\u201cOAuth 2.0 Authorization Server Metadata\u201d<br/>refer to the same thing.\n  Server->>Client: Return OpenID Connect configuration retrieved from Logto\n  Client->>Logto: Redirect to Logto for authentication\n  Logto->>Logto: User authenticates\n  ${e.isThirdParty?"Logto->>Logto: User authorizes (consents) scopes<br/>to the third-party app":""}\n  Logto->>Client: Redirect back to MCP server with authorization code\n  Client->>Logto: Request access token using authorization code\n  Logto->>Client: Return access token\n  Client->>Server: Request tool with access token\n  Server->>Logto: Request user info using access token\n  Logto->>Server: Return user info\n  Server->>Client: Return tool response`}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["Due to MCP is quickly evolving, the above diagram may not be fully up to date. Please refer to the ",(0,r.jsx)(n.a,{href:"https://mcp-auth.dev",children:"mcp-auth"})," documentation for the latest information."]})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},49021:(e,n,t)=>{t.d(n,{Ay:()=>c,RM:()=>a});var r=t(25105),s=t(79621),o=t(38552),i=t(22002);const a=[];function l(e){const n={a:"a",p:"p",...(0,s.R)(),...e.components};return(0,r.jsxs)(i.A,{groupId:"sdk",children:[(0,r.jsx)(o.A,{value:"python",label:"Python",children:(0,r.jsxs)(n.p,{children:["The full MCP server code can be found in the ",(0,r.jsx)(n.a,{href:"https://github.com/mcp-auth/python",children:"mcp-auth/python"})," repository."]})}),(0,r.jsx)(o.A,{value:"node",label:"Node.js",children:(0,r.jsxs)(n.p,{children:["The full MCP server code can be found in the ",(0,r.jsx)(n.a,{href:"https://github.com/mcp-auth/js",children:"mcp-auth/js"})," repository."]})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},51427:(e,n,t)=>{t.d(n,{Ay:()=>c,RM:()=>a});var r=t(25105),s=t(79621),o=t(38552),i=t(22002);const a=[{value:"Set up the MCP server",id:"set-up-the-mcp-server",level:2},{value:"Create project and install dependencies",id:"create-project-and-install-dependencies",level:3},{value:"Configure MCP auth with Logto",id:"configure-mcp-auth-with-logto",level:3},{value:"Implement token verification",id:"implement-token-verification",level:3},{value:"Implement the &quot;whoami&quot; tool",id:"implement-the-whoami-tool",level:3}];function l(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"set-up-the-mcp-server",children:"Set up the MCP server"}),"\n",(0,r.jsx)(n.h3,{id:"create-project-and-install-dependencies",children:"Create project and install dependencies"}),"\n",(0,r.jsxs)(i.A,{groupId:"sdk",children:[(0,r.jsx)(o.A,{value:"python",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'mkdir mcp-server\ncd mcp-server\nuv init # Or use your own project structure\nuv add "mcp[cli]" starlette uvicorn mcpauth # Or use any preferred package manager\n'})})}),(0,r.jsx)(o.A,{value:"node",label:"Node.js",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir mcp-server\ncd mcp-server\nnpm init -y\nnpm install @modelcontextprotocol/sdk express mcp-auth # Or use any preferred package manager\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"configure-mcp-auth-with-logto",children:"Configure MCP auth with Logto"}),"\n",(0,r.jsxs)(n.p,{children:["Remember to replace ",(0,r.jsx)(n.code,{children:"<your-logto-issuer-endpoint>"})," with the issuer endpoint you copied earlier."]}),"\n",(0,r.jsxs)(i.A,{groupId:"sdk",children:[(0,r.jsxs)(o.A,{value:"python",label:"Python",children:[(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["In ",(0,r.jsx)(n.code,{children:"whoami.py"}),":"]})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from mcpauth import MCPAuth\nfrom mcpauth.config import AuthServerType\nfrom mcpauth.utils import fetch_server_config\n\nauth_issuer = '<your-logto-issuer-endpoint>'\nauth_server_config = fetch_server_config(auth_issuer, type=AuthServerType.OIDC)\nmcp_auth = MCPAuth(server=auth_server_config)\n"})})]}),(0,r.jsxs)(o.A,{value:"node",label:"Node.js",children:[(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.strong,{children:["In ",(0,r.jsx)(n.code,{children:"whoami.js"}),":"]})}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { MCPAuth, fetchServerConfig } from 'mcp-auth';\n\nconst authIssuer = '<your-logto-issuer-endpoint>';\nconst mcpAuth = new MCPAuth({\n  server: await fetchServerConfig(authIssuer, { type: 'oidc' }),\n});\n"})})]})]}),"\n",(0,r.jsx)(n.h3,{id:"implement-token-verification",children:"Implement token verification"}),"\n",(0,r.jsx)(n.p,{children:"Since we're going to verify the access token and retrieve user info, we need to implement the access token verification as follows:"}),"\n",(0,r.jsxs)(i.A,{groupId:"sdk",children:[(0,r.jsx)(o.A,{value:"python",label:"Python",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import requests\nfrom mcpauth.types import AuthInfo\n\ndef verify_access_token(token: str) -> AuthInfo:\n    endpoint = auth_server_config.metadata.userinfo_endpoint\n    response = requests.get(\n        endpoint,\n        headers={"Authorization": f"Bearer {token}"},\n    )\n    response.raise_for_status()\n    data = response.json()\n    return AuthInfo(\n        token=token,\n        subject=data.get("sub"),\n        issuer=auth_server_config.metadata.issuer,\n        claims=data,\n    )\n'})})}),(0,r.jsx)(o.A,{value:"node",label:"Node.js",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const verifyToken = async (token) => {\n  const { userinfoEndpoint, issuer } = mcpAuth.config.server.metadata;\n  const response = await fetch(userinfoEndpoint, {\n    headers: { Authorization: `Bearer ${token}` },\n  });\n  if (!response.ok) throw new Error('Token verification failed');\n  const userInfo = await response.json();\n  return {\n    token,\n    issuer,\n    subject: userInfo.sub,\n    claims: userInfo,\n  };\n};\n"})})})]}),"\n",(0,r.jsx)(n.h3,{id:"implement-the-whoami-tool",children:'Implement the "whoami" tool'}),"\n",(0,r.jsx)(n.p,{children:"Now, let's implement the \"whoami\" tool that returns the current user's identity claims requesting the userinfo endpoint with the access token sent by the client."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"We are using the SSE transport for the example due to the lack of official support for the Streamable HTTP transport in the current version of the SDK. Theoretically, you can use any HTTP-compatible transport."})}),"\n",(0,r.jsxs)(i.A,{groupId:"sdk",children:[(0,r.jsxs)(o.A,{value:"python",label:"Python",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from mcp.server.fastmcp import FastMCP\nfrom starlette.applications import Starlette\nfrom starlette.routing import Mount\nfrom starlette.middleware import Middleware\n\nmcp = FastMCP("WhoAmI")\n\n@mcp.tool()\ndef whoami() -> dict:\n    """\n    Returns the current user\'s identity information.\n    """\n    return (\n        mcp_auth.auth_info.claims\n        if mcp_auth.auth_info\n        else {"error": "Not authenticated"}\n    )\n\nbearer_auth = Middleware(mcp_auth.bearer_auth_middleware(verify_access_token))\napp = Starlette(\n    routes=[\n        mcp_auth.metadata_route(),  # Serves OIDC metadata for discovery\n        Mount(\'/\', app=mcp.sse_app(), middleware=[bearer_auth]),\n    ],\n)\n'})}),(0,r.jsx)(n.p,{children:"Run the server with:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"uvicorn whoami:app --host 0.0.0.0 --port 3001\n"})})]}),(0,r.jsxs)(o.A,{value:"node",label:"Node.js",children:[(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport express from 'express';\n\n// Create MCP server and register the whoami tool\nconst server = new McpServer({ name: 'WhoAmI', version: '0.0.0' });\nserver.tool('whoami', ({ authInfo }) => ({\n  content: [\n    { type: 'text', text: JSON.stringify(authInfo?.claims ?? { error: 'Not authenticated' }) },\n  ],\n}));\n\n// Express app & MCP Auth middleware\nconst app = express();\napp.use(mcpAuth.delegatedRouter());\napp.use(mcpAuth.bearerAuth(verifyToken));\n\n// SSE transport (as in SDK docs)\nconst transports = {};\napp.get('/sse', async (_req, res) => {\n  const transport = new SSEServerTransport('/messages', res);\n  transports[transport.sessionId] = transport;\n  res.on('close', () => delete transports[transport.sessionId]);\n  await server.connect(transport);\n});\napp.post('/messages', async (req, res) => {\n  const sessionId = String(req.query.sessionId);\n  const transport = transports[sessionId];\n  if (transport) await transport.handlePostMessage(req, res, req.body);\n  else res.status(400).send('No transport found for sessionId');\n});\n\napp.listen(3001);\n"})}),(0,r.jsx)(n.p,{children:"Run the server with:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"node whoami.js\n"})})]})]})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},72674:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>u,default:()=>m,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"use-cases/ai/mcp-server-add-auth","title":"Enable auth for your MCP-powered apps with Logto","description":"This guide walks you through integrating Logto with your MCP server using mcp-auth, allowing you to authenticate users and securely retrieve their identity information using the standard OpenID Connect flow.","source":"@site/docs/use-cases/ai/mcp-server-add-auth.mdx","sourceDirName":"use-cases/ai","slug":"/use-cases/ai/mcp-server-add-auth","permalink":"/use-cases/ai/mcp-server-add-auth","draft":false,"unlisted":false,"editUrl":"https://github.com/logto-io/docs/tree/master/docs/use-cases/ai/mcp-server-add-auth.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_label":"Enable auth for MCP-powered apps"},"sidebar":"useCasesSidebar","previous":{"title":"AI","permalink":"/use-cases/ai/"},"next":{"title":"Enable third-party AI agent access to MCP server","permalink":"/use-cases/ai/mcp-server-enable-third-party-ai-agent-access"}}');var s=t(25105),o=t(79621),i=t(52476),a=t(49021),l=t(51427);const c={sidebar_position:1,sidebar_label:"Enable auth for MCP-powered apps"},u="Enable auth for your MCP-powered apps with Logto",h={},d=[...i.RM,{value:"Set up app in Logto",id:"set-up-app-in-logto",level:2},...l.RM,{value:"Test the integration",id:"test-the-integration",level:2},...a.RM];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{CloudLink:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("CloudLink",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"enable-auth-for-your-mcp-powered-apps-with-logto",children:"Enable auth for your MCP-powered apps with Logto"})}),"\n",(0,s.jsxs)(n.p,{children:["This guide walks you through integrating Logto with your MCP server using ",(0,s.jsx)(n.a,{href:"https://mcp-auth.dev",children:"mcp-auth"}),", allowing you to authenticate users and securely retrieve their identity information using the standard OpenID Connect flow."]}),"\n",(0,s.jsx)(n.p,{children:"You'll learn how to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Configure Logto as the authorization server for your MCP server."}),"\n",(0,s.jsx)(n.li,{children:"Set up a \u201cwhoami\u201d tool in your MCP server to return the current user's identity claims."}),"\n",(0,s.jsx)(n.li,{children:"Test the flow with the MCP Inspector (MCP client)."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"After this tutorial, your MCP server will:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Authenticate users in your Logto tenant."}),"\n",(0,s.jsxs)(n.li,{children:["Return identity claims (",(0,s.jsx)(n.code,{children:"sub"}),", ",(0,s.jsx)(n.code,{children:"username"}),", ",(0,s.jsx)(n.code,{children:"name"}),", ",(0,s.jsx)(n.code,{children:"email"}),', etc.) for the "whoami" tool invocation.']}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Once the integration is complete, you can replace the MCP Inspector with your own MCP client, such as a web app, to access the tools and resources exposed by your MCP server."}),"\n",(0,s.jsx)(i.Ay,{}),"\n",(0,s.jsx)(n.h2,{id:"set-up-app-in-logto",children:"Set up app in Logto"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Sign in to your Logto Console."}),"\n",(0,s.jsxs)(n.li,{children:["Go ",(0,s.jsx)(t,{to:"/applications",children:(0,s.jsx)(n.strong,{children:"Applications"})})," \u2192 ",(0,s.jsx)(n.strong,{children:"Create application"})," \u2192 ",(0,s.jsx)(n.strong,{children:"Create app without framework"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Choose type: Single-page app."}),"\n",(0,s.jsxs)(n.li,{children:["Fill in the app name and other required fields, then click ",(0,s.jsx)(n.strong,{children:"Create application"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Save and copy the ",(0,s.jsx)(n.strong,{children:"App ID"})," and ",(0,s.jsx)(n.strong,{children:"Issuer endpoint"}),"."]}),"\n"]}),"\n",(0,s.jsx)(l.Ay,{}),"\n",(0,s.jsx)(n.h2,{id:"test-the-integration",children:"Test the integration"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Start the MCP server"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Start the MCP Inspector."}),"\n",(0,s.jsx)(n.p,{children:"Due to the limit of the current MCP Inspector implementation, we need to use the forked version from mcp-auth:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/mcp-auth/inspector.git\ncd inspector\nnpm install\nnpm run dev\n"})}),"\n",(0,s.jsx)(n.p,{children:"Then, open the URL shown in the terminal."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"In the MCP Inspector:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Transport Type"}),": ",(0,s.jsx)(n.code,{children:"SSE"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"URL"}),": ",(0,s.jsx)(n.code,{children:"http://localhost:3001/sse"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"OAuth Client ID"}),": Paste your Logto App ID"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Auth Params"}),": ",(0,s.jsx)(n.code,{children:'{"scope": "openid profile email"}'})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Redirect URI"}),": This URL should be auto-populated. Copy it."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Find the application you created earlier in the Logto Console, open the details page, and paste the redirect URI into the ",(0,s.jsx)(n.strong,{children:"Settings"})," / ",(0,s.jsx)(n.strong,{children:"Redirect URIs"})," section. Save the changes."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Back in the MCP Inspector, click ",(0,s.jsx)(n.strong,{children:"Connect"}),". This should redirect you to the Logto sign-in experience."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["After completing sign-in, you should be redirected back to the MCP Inspector. Go to ",(0,s.jsx)(n.strong,{children:"Tools"})," -> ",(0,s.jsx)(n.strong,{children:"List Tools"})," -> ",(0,s.jsx)(n.strong,{children:"whoami"})," -> ",(0,s.jsx)(n.strong,{children:"Run Tool"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"You should see user claims, such as:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "sub": "user_XXXX",\n  "username": "alice",\n  "name": "Alice Smith",\n  "email": "alice@example.com"\n}\n'})}),"\n",(0,s.jsx)(a.Ay,{})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},38552:(e,n,t)=>{t.d(n,{A:()=>i});t(58101);var r=t(13526);const s={tabItem:"tabItem_dgSZ"};var o=t(25105);function i(e){let{children:n,hidden:t,className:i}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,r.A)(s.tabItem,i),hidden:t,children:n})}},22002:(e,n,t)=>{t.d(n,{A:()=>w});var r=t(58101),s=t(13526),o=t(60755),i=t(55234),a=t(6635),l=t(4100),c=t(35661),u=t(42752);function h(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:s}}=e;return{value:n,label:t,attributes:r,default:s}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const s=(0,i.W6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(o),(0,r.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(s.location.search);n.set(o,e),s.replace({...s.location,search:n.toString()})}),[o,s])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,o=d(e),[i,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:o}))),[c,h]=m({queryString:t,groupId:s}),[g,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[s,o]=(0,u.Dv)(t);return[s,(0,r.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:s}),x=(()=>{const e=c??g;return p({value:e,tabValues:o})?e:null})();(0,a.A)((()=>{x&&l(x)}),[x]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),h(e),f(e)}),[h,f,o]),tabValues:o}}var f=t(21929);const x={tabList:"tabList_osvQ",tabItem:"tabItem_dc4O"};var j=t(25105);function v(e){let{className:n,block:t,selectedValue:r,selectValue:i,tabValues:a}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.a_)(),u=e=>{const n=e.currentTarget,t=l.indexOf(n),s=a[t].value;s!==r&&(c(n),i(s))},h=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":t},n),children:a.map((e=>{let{value:n,label:t,attributes:o}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>{l.push(e)},onKeyDown:h,onClick:u,...o,className:(0,s.A)("tabs__item",x.tabItem,o?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function b(e){let{lazy:n,children:t,selectedValue:o}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===o));return e?(0,r.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function y(e){const n=g(e);return(0,j.jsxs)("div",{className:(0,s.A)("tabs-container",x.tabList),children:[(0,j.jsx)(v,{...n,...e}),(0,j.jsx)(b,{...n,...e})]})}function w(e){const n=(0,f.A)();return(0,j.jsx)(y,{...e,children:h(e.children)},String(n))}},79621:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(58101);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);