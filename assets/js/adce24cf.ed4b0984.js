"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[74912],{49374:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var t=s(11527),a=s(17279);const i={sidebar_position:5},r="Translation",o={id:"docs/references/using-cli/translation",title:"Translation",description:"These commands are for developers who want to contribute to Logto. If you just want to use Logto with custom translation, please refer to this guide.",source:"@site/docs/docs/references/using-cli/translation.mdx",sourceDirName:"docs/references/using-cli",slug:"/docs/references/using-cli/translation",permalink:"/docs/references/using-cli/translation",draft:!1,unlisted:!1,editUrl:"https://github.com/logto-io/docs/tree/master/docs/docs/references/using-cli/translation.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docsSidebar",previous:{title:"Manage database configs",permalink:"/docs/references/using-cli/manage-database-configs"},next:{title:"Migrate configs from env",permalink:"/docs/references/using-cli/migrate-from-env"}},l={},c=[{value:"Sync keys",id:"sync-keys",level:2},{value:"Translte keys using ChatGPT",id:"translte-keys-using-chatgpt",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"translation",children:"Translation"}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["These commands are for developers who want to contribute to Logto. If you just want to use Logto with custom translation, please refer to ",(0,t.jsx)(n.a,{href:"/docs/recipes/customize-sie/localized-language/",children:"this guide"}),"."]})}),"\n",(0,t.jsx)(n.h2,{id:"sync-keys",children:"Sync keys"}),"\n",(0,t.jsxs)(n.p,{children:["Let's say we made some changes to the translation keys in the ",(0,t.jsx)(n.code,{children:"en"})," folder of the ",(0,t.jsx)(n.code,{children:"phrases"})," package. We want to sync these changes to the ",(0,t.jsx)(n.code,{children:"pt-BR"})," folder. Run the command below to sync translation keys and file structure:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pnpm cli translate sync-keys --target pt-BR\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This command will read all translation keys from the source language folder (",(0,t.jsx)(n.code,{children:"en"})," by default) and sync them to the target language folder (",(0,t.jsx)(n.code,{children:"pt-BR"})," in this example)."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"If the target language folder doesn't exist, it will be created automatically;"}),"\n",(0,t.jsx)(n.li,{children:"If the target language folder already exists, it will be updated with new keys and removed with obsolete keys."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"For each translation key:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["If a key is missing in the target, it will be added with a comment to indicate that the phrase is untranslated (marked with ",(0,t.jsx)(n.code,{children:"// UNTRANSLATED"}),");"]}),"\n",(0,t.jsx)(n.li,{children:"If a key is missing in the baseline, it will be removed from the target;"}),"\n",(0,t.jsx)(n.li,{children:"If a key exists in both the baseline and the target, the value of the target will be used."}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["To sync keys for all languages in the ",(0,t.jsx)(n.code,{children:"phrases"})," package, run the command below:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pnpm cli translate sync-keys --target all\n"})}),"\n",(0,t.jsx)(n.p,{children:"Thus we can focusing on updating the translation keys in the source language folder, and the translation keys in other languages will be updated automatically."}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["This command executes for ",(0,t.jsx)(n.code,{children:"phrases"})," package by default. You can specify the package name by ",(0,t.jsx)(n.code,{children:"--package"})," option. For example, use ",(0,t.jsx)(n.code,{children:"--package phrases-ui"})," to sync keys for the ",(0,t.jsx)(n.code,{children:"phrases-ui"})," package."]})}),"\n",(0,t.jsx)(n.p,{children:"After syncing keys, we can translate the keys using ChatGPT API."}),"\n",(0,t.jsx)(n.h2,{id:"translte-keys-using-chatgpt",children:"Translte keys using ChatGPT"}),"\n",(0,t.jsx)(n.p,{children:"Run the command below to translate keys using ChatGPT:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"pnpm cli translate sync\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This command will translate all untranslated keys (marked with ",(0,t.jsx)(n.code,{children:"// UNTRANSLATED"}),") across all languages in the ",(0,t.jsx)(n.code,{children:"phrases"})," and ",(0,t.jsx)(n.code,{children:"phrases-ui"})," packages. Note an environment variable ",(0,t.jsx)(n.code,{children:"OPENAI_API_KEY"})," is required to run this command."]})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},17279:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>r});var t=s(50959);const a={},i=t.createContext(a);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);