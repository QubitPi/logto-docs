"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[4842],{76945:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"use-cases/multi-tenancy/build-multi-tenant-saas-application","title":"build-multi-tenant-saas-application","description":"Learn how to efficiently build a multi-tenant SaaS application with robust authentication, organization management, and role-based access control.","source":"@site/docs/use-cases/multi-tenancy/build-multi-tenant-saas-application.mdx","sourceDirName":"use-cases/multi-tenancy","slug":"/use-cases/multi-tenancy/build-multi-tenant-saas-application","permalink":"/use-cases/multi-tenancy/build-multi-tenant-saas-application","draft":false,"unlisted":false,"editUrl":"https://github.com/logto-io/docs/tree/master/docs/use-cases/multi-tenancy/build-multi-tenant-saas-application.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"sidebar_label":"Build a multi-tenant SaaS application","description":"Learn how to efficiently build a multi-tenant SaaS application with robust authentication, organization management, and role-based access control."},"sidebar":"useCasesSidebar","previous":{"title":"Multi-tenancy","permalink":"/use-cases/multi-tenancy/"},"next":{"title":"AI","permalink":"/use-cases/ai/"}}');var o=t(25105),s=t(79621);const a={sidebar_position:2,sidebar_label:"Build a multi-tenant SaaS application",description:"Learn how to efficiently build a multi-tenant SaaS application with robust authentication, organization management, and role-based access control."},r="Build a multi-tenant SaaS application: A complete guide from design to implementation",c={},l=[{value:"What features are required for SaaS authentication and authorization?",id:"what-features-are-required-for-saas-authentication-and-authorization",level:2},{value:"Multi-tenant architecture",id:"multi-tenant-architecture",level:3},{value:"Membership",id:"membership",level:3},{value:"Role and permission design",id:"role-and-permission-design",level:3},{value:"Sign-up and login flow",id:"sign-up-and-login-flow",level:3},{value:"Tenant creation and invitation",id:"tenant-creation-and-invitation",level:3},{value:"Technical architecture and system design",id:"technical-architecture-and-system-design",level:2},{value:"Define authentication strategy",id:"define-authentication-strategy",level:3},{value:"Establish multi-tenant architecture",id:"establish-multi-tenant-architecture",level:3},{value:"Enable access control in multi-tenant app",id:"enable-access-control-in-multi-tenant-app",level:3},{value:"Tech stack",id:"tech-stack",level:2},{value:"Add basic authentication flow to your app",id:"add-basic-authentication-flow-to-your-app",level:2},{value:"Install Logto to your app",id:"install-logto-to-your-app",level:3},{value:"Customize sign in and sign up methods",id:"customize-sign-in-and-sign-up-methods",level:3},{value:"Enable multi-factor authentication",id:"enable-multi-factor-authentication",level:3},{value:"Adding multi-tenant organization experience",id:"adding-multi-tenant-organization-experience",level:2},{value:"Get a user&#39;s organization information",id:"get-a-user-s-organization-information",level:3},{value:"Create organization in Logto console",id:"create-organization-in-logto-console",level:3},{value:"Implement self-serve organization creation experience",id:"implement-self-serve-organization-creation-experience",level:2},{value:"Understand organization auth interaction flow",id:"understand-organization-auth-interaction-flow",level:3},{value:"Protect your backend API",id:"protect-your-backend-api",level:3},{value:"Calling Logto Management API",id:"calling-logto-management-api",level:3},{value:"Implement access control to your multi-tenant app",id:"implement-access-control-to-your-multi-tenant-app",level:2},{value:"Using Logto organization token",id:"using-logto-organization-token",level:3},{value:"Implement organization-level role-based access control design",id:"implement-organization-level-role-based-access-control-design",level:3},{value:"Add more multi-tenant app features",id:"add-more-multi-tenant-app-features",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components},{Head:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t,{children:(0,o.jsx)("link",{rel:"canonical",href:"https://blog.logto.io/build-multi-tenant-saas-application"})}),"\n",(0,o.jsx)("style",{children:"\n  .twoColumn {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 24px;\n  }\n  .twoColumn + .twoColumn {\n    margin-top: 24px;\n  }\n"}),"\n",(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"build-a-multi-tenant-saas-application-a-complete-guide-from-design-to-implementation",children:"Build a multi-tenant SaaS application: A complete guide from design to implementation"})}),"\n",(0,o.jsx)(n.p,{children:"How are apps like Notion, Slack, or Figma built? These multi-tenant SaaS applications look simple to use, but building one yourself? That's a different story."}),"\n",(0,o.jsx)(n.p,{children:"When I first thought about building such a complex beast, my mind exploded:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Users need multiple sign-in options (email, Google, GitHub)"}),"\n",(0,o.jsx)(n.li,{children:"Each user can create and belong to multiple organizations"}),"\n",(0,o.jsx)(n.li,{children:"Different permission levels within each organization"}),"\n",(0,o.jsx)(n.li,{children:"Enterprise organizations requiring auto-join for specific email domains"}),"\n",(0,o.jsx)(n.li,{children:"MFA requirements for sensitive operations"}),"\n",(0,o.jsx)(n.li,{children:"And more..."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"\"Boss, let's talk about product design in two weeks. I'm stuck in the mud right now.\""}),"\n",(0,o.jsxs)(n.p,{children:["But when I actually started working on it, ",(0,o.jsx)(n.strong,{children:"I find that it's not as daunting as it seems."})]}),"\n",(0,o.jsxs)(n.p,{children:["I just ",(0,o.jsx)(n.strong,{children:"built a system with all these features with surprisingly little effort!"})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://uploads.strapi.logto.io/documind_home_page_e72468b8c9.png",alt:"documind-home-page.png"})}),"\n",(0,o.jsxs)("div",{className:"twoColumn",children:[(0,o.jsx)("img",{alt:"Documind dashboard",src:"https://uploads.strapi.logto.io/documind_dashboard_4bd2a540d2.png",width:"500"}),(0,o.jsx)("img",{alt:"Documind organization page",src:"https://uploads.strapi.logto.io/documind_org_page_8157e40cd8.png",width:"500"})]}),"\n",(0,o.jsx)(n.p,{children:"I'll show you exactly how to design and implement such a system from the ground up - and you'll be amazed at how simple it really is in 2025 with modern tools and the right architectural approach."}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:(0,o.jsxs)(n.strong,{children:["The complete source code is available in this ",(0,o.jsx)(n.a,{href:"https://github.com/logto-io/multi-tenant-saas-sample",children:"Github Repo"}),". Let's dive in!"]})}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"We'll start with an AI documentation SaaS product called DocuMind."}),"\n",(0,o.jsx)(n.p,{children:"DocuMind is an AI documentation SaaS product designed with a multi-tenant model to support individual users, small businesses, and enterprises."}),"\n",(0,o.jsx)(n.p,{children:"The platform provides powerful AI capabilities for document management, including automatic summary generation, key point extraction, and intelligent content recommendations within organizations."}),"\n",(0,o.jsx)(n.h2,{id:"what-features-are-required-for-saas-authentication-and-authorization",children:"What features are required for SaaS authentication and authorization?"}),"\n",(0,o.jsx)(n.p,{children:"First, let\u2019s review the necessary requirements. What features do you need?"}),"\n",(0,o.jsx)(n.h3,{id:"multi-tenant-architecture",children:"Multi-tenant architecture"}),"\n",(0,o.jsxs)(n.p,{children:["To enable a multi-tenant architecture, you\u2019ll need an entity layer called ",(0,o.jsx)(n.strong,{children:"organization"}),". Imagine having a single pool of users who can access multiple workspaces. Each organization represents a workspace, and users maintain a single identity while accessing different workspaces (organizations) based on their assigned roles."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://uploads.strapi.logto.io/multi_tenant_app_architecture_89ed9779f8.svg",alt:"multi-tenant-app-architecture.svg"})}),"\n",(0,o.jsx)(n.p,{children:"It\u2019s a widely used feature in authentication providers. An organization in an identity management system corresponds to your SaaS app\u2019s workspace, project, or tenant."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://uploads.strapi.logto.io/organization_examples_dc60ad68bb.png",alt:"organization-examples.png"})}),"\n",(0,o.jsx)(n.h3,{id:"membership",children:"Membership"}),"\n",(0,o.jsx)(n.p,{children:"A member is a temporary concept used to indicate an identity\u2019s membership status within an organization."}),"\n",(0,o.jsxs)(n.p,{children:["For example, Sarah signs up for your app using her email, ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"mailto:sarah@gmail.com",children:"sarah@gmail.com"})}),". She can belong to different workspaces. If Sarah is part of ",(0,o.jsx)(n.strong,{children:"Workspace A"})," but not ",(0,o.jsx)(n.strong,{children:"Workspace B"}),", she is considered a member of ",(0,o.jsx)(n.strong,{children:"Workspace A"})," but not ",(0,o.jsx)(n.strong,{children:"Workspace B"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"role-and-permission-design",children:"Role and permission design"}),"\n",(0,o.jsxs)(n.p,{children:["In a multi-tenant architecture, users need ",(0,o.jsx)(n.strong,{children:"roles"})," with specific ",(0,o.jsx)(n.strong,{children:"permissions"})," to access their tenant resources.\nPermissions are detailed access controls that define specific actions, such as ",(0,o.jsx)(n.code,{children:"read: order"})," or ",(0,o.jsx)(n.code,{children:"write: order"}),". They determine what actions can be performed on particular resources."]}),"\n",(0,o.jsx)(n.p,{children:"Roles are a set of permissions assigned to members in a multi-tenant environment."}),"\n",(0,o.jsx)(n.p,{children:"You\u2019ll need to define these roles and permissions, then assign roles to users, and sometimes it may include automated processes. For example:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Users who join an organization automatically get the ",(0,o.jsx)(n.strong,{children:"member"})," role."]}),"\n",(0,o.jsxs)(n.li,{children:["The first user to create a workspace is automatically assigned the ",(0,o.jsx)(n.strong,{children:"admin"})," role."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"sign-up-and-login-flow",children:"Sign-up and login flow"}),"\n",(0,o.jsx)(n.p,{children:"Ensure a user-friendly and secure registration and authentication process, including basic sign-in and sign-up options:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Email and password sign-in"}),": Traditional login method with email and password."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Passwordless sign-in"}),": Use email verification codes for easy and secure access."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Account management"}),": An account center where users can update their email, password, and other details."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Social sign-in"}),": Options like Google and GitHub for quick login."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Multi-Factor Authentication (MFA)"}),": Enhance security by allowing login via authenticator apps like Duo."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"tenant-creation-and-invitation",children:"Tenant creation and invitation"}),"\n",(0,o.jsx)(n.p,{children:"In a multi-tenant SaaS app, a key difference in the user flow is the need to support tenant creation and member invitations. This process requires careful planning and execution as it plays a key role in product activation and growth."}),"\n",(0,o.jsx)(n.p,{children:"Here are a few typical use flows you need to consider:"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"User type"}),(0,o.jsx)(n.th,{children:"Entry point"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"New account"}),(0,o.jsx)(n.td,{children:"Enter from sign in and sign up page to create a new tenant"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Existing account"}),(0,o.jsx)(n.td,{children:"Create another tenant inside the product"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"The existing account got a new tenant invitation"}),(0,o.jsx)(n.td,{children:"Enter from sign in and sign up page"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"The existing account got a new tenant invitation"}),(0,o.jsx)(n.td,{children:"Enter from the invitation email"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"The new account got a new tenant invitation"}),(0,o.jsx)(n.td,{children:"Enter from sign in and sign up page"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"The new account got a new tenant invitation"}),(0,o.jsx)(n.td,{children:"Enter from the invitation email"})]})]})]}),"\n",(0,o.jsx)(n.p,{children:"Here are some common scenarios found in almost every SaaS app. Use these as a reference to inspire your product and design team, and feel free to create your own flows as needed."}),"\n",(0,o.jsxs)("div",{className:"twoColumn",children:[(0,o.jsx)("img",{alt:"A new account creates a tenant",src:"https://uploads.strapi.logto.io/a_new_account_creates_a_tenant_516d2e1132.png",width:"500"}),(0,o.jsx)("img",{alt:"An existing user creates another tenant",src:"https://uploads.strapi.logto.io/an_existing_user_creates_another_tenant_7f1340cee0.png",width:"500"})]}),"\n",(0,o.jsxs)("div",{className:"twoColumn",children:[(0,o.jsx)("img",{alt:"An existing user sign in ",src:"https://uploads.strapi.logto.io/an_existing_user_sign_in_3c5f87b929.png",width:"500"}),(0,o.jsx)("img",{alt:"An existing user join through email",src:"https://uploads.strapi.logto.io/an_existing_user_join_through_email_7aa94ea6f2.png",width:"500"})]}),"\n",(0,o.jsxs)("div",{className:"twoColumn",children:[(0,o.jsx)("img",{alt:"A new user sign-in",src:"https://uploads.strapi.logto.io/a_new_user_sign_in_e91499991c.png",width:"500"}),(0,o.jsx)("img",{alt:"An new user join through email",src:"https://uploads.strapi.logto.io/an_new_user_join_through_email_e16ef2cf79.png",width:"500"})]}),"\n",(0,o.jsx)(n.h2,{id:"technical-architecture-and-system-design",children:"Technical architecture and system design"}),"\n",(0,o.jsx)(n.p,{children:"Once we understand all the product requirements, let\u2019s move on to the implementation."}),"\n",(0,o.jsx)(n.h3,{id:"define-authentication-strategy",children:"Define authentication strategy"}),"\n",(0,o.jsx)(n.p,{children:"Authentication looks scary. Users need:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Email & password sign-up/login"}),"\n",(0,o.jsx)(n.li,{children:"One-click sign-in with Google/Github"}),"\n",(0,o.jsx)(n.li,{children:"Password reset when they forget"}),"\n",(0,o.jsx)(n.li,{children:"Team-wide login for enterprise customers"}),"\n",(0,o.jsx)(n.li,{children:"..."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Implementing just these basic features could take weeks of development."}),"\n",(0,o.jsxs)(n.p,{children:["But now, ",(0,o.jsx)(n.strong,{children:"we don't need to build ANY of this ourselves!"})]}),"\n",(0,o.jsxs)(n.p,{children:["Modern auth providers (I will choose ",(0,o.jsx)(n.a,{href:"https://logto.io/",children:"Logto"})," this time) have packaged all these features for us. The authentication flow is straightforward:"]}),"\n",(0,o.jsx)(n.mermaid,{value:'sequenceDiagram\n  actor u as User\n  participant a as App\n  participant auth as AuthProvider\n\n  u->>a: Click "Sign In"\n  a->>auth: Redirect to auth page\n  auth->>u: Show sign-in page\n  u->>auth: Enter credentials\n  auth->>a: Redirect with token\n  a->>u: Sign in success'}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"From weeks of development to 15 minutes of setup"}),", Logto handles all the complex flows for us! We'll cover the integration steps in the implementation section later. Now we can focus on building DocuMind core features!"]}),"\n",(0,o.jsx)(n.h3,{id:"establish-multi-tenant-architecture",children:"Establish multi-tenant architecture"}),"\n",(0,o.jsx)(n.p,{children:"The organization system enables users to create and join multiple organizations. Let's understand the core relationships:"}),"\n",(0,o.jsx)(n.mermaid,{value:'erDiagram\n    User ||--o{ OrganizationMember : "belongs to"\n    Organization ||--o{ OrganizationMember : "has"\n\n    User {\n        uuid id\n        string email\n        string name\n    }\n    Organization {\n        uuid id\n        string name\n        string description\n    }\n    OrganizationMember {\n        uuid userId\n        uuid organizationId\n    }'}),"\n",(0,o.jsx)(n.p,{children:"In this system, each user can belong to multiple organizations, and each organization can have multiple members."}),"\n",(0,o.jsx)(n.mermaid,{value:"graph TD\n    App[Application]\n    O1[Organization 1]\n    O2[Organization 2]\n    M1[Member]\n    M2[Member]\n    M3[Member]\n\n    App --\x3e O1\n    App --\x3e O2\n    O1 --\x3e M1\n    O1 --\x3e M2\n    O2 --\x3e M2\n    O2 --\x3e M3\n\n    style O1 fill:#e6ffe6\n    style O2 fill:#e6ffe6"}),"\n",(0,o.jsx)(n.h3,{id:"enable-access-control-in-multi-tenant-app",children:"Enable access control in multi-tenant app"}),"\n",(0,o.jsx)(n.p,{children:"Role-Based Access Control (RBAC) is important for ensuring security and scalability in multi-tenant SaaS applications."}),"\n",(0,o.jsx)(n.p,{children:"In a multi-tenant app, the design of permissions and roles is usually consistent, as it stems from the product design. For example, in multiple workspaces, there\u2019s typically an admin role and a member role. Logto as an auth provider has the following organization-level role-based access control design:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Unified permission definitions"}),": Permissions are defined at the system level and apply consistently across all organizations, ensuring maintainable and consistent permission management"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Organization templates"}),": Pre-defined role and permission combinations through organization templates, simplifying organization initialization"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The permission relationship looks like this:"}),"\n",(0,o.jsx)(n.mermaid,{value:"graph TD\n    subgraph organization_template[OrganizationTemplate]\n        subgraph role_2[Role2]\n            permission_c[Permission C]\n            permission_d[Permission D]\n        end\n\n        subgraph role_1[Role1]\n            permission_a[Permission A]\n            permission_b[Permission B]\n        end\n    end\n\n    style organization_template fill:#e6ffe6\n    style role_1 fill:#ffe6e6\n    style role_2 fill:#ffe6e6"}),"\n",(0,o.jsx)(n.p,{children:"Since each user needs their own role(s) within each organization, the relationship between roles and organizations must reflect the roles assigned to each user:"}),"\n",(0,o.jsx)(n.mermaid,{value:"erDiagram\n    OrganizationMember {\n        uuid userId\n        uuid organizationId\n        uuid[] roleIds\n        datetime joinedAt\n    }\n"}),"\n",(0,o.jsx)(n.p,{children:"We've designed the organization system and access control system, and now we can start building our product!"}),"\n",(0,o.jsx)(n.h2,{id:"tech-stack",children:"Tech stack"}),"\n",(0,o.jsx)(n.p,{children:"I chose a beginner-friendly, portable stack:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Frontend"}),": React (easily transferable to Vue/Angular/Svelte)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Backend"}),": Express (simple, intuitive API)"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Why separate frontend and backend?Because it has a clear architecture, easy to learn and simple to switch stacks. And for auth providers, I use Logto as an example."}),"\n",(0,o.jsxs)(n.p,{children:["And for the following guides, ",(0,o.jsx)(n.strong,{children:"its patterns here work with: Any frontend, any backend and any auth system."})]}),"\n",(0,o.jsx)(n.h2,{id:"add-basic-authentication-flow-to-your-app",children:"Add basic authentication flow to your app"}),"\n",(0,o.jsx)(n.p,{children:"This is the easiest step. We just need to integrate Logto into our project. Then we can configure user login/registration methods in the Logto Console based on our needs."}),"\n",(0,o.jsx)(n.h3,{id:"install-logto-to-your-app",children:"Install Logto to your app"}),"\n",(0,o.jsxs)(n.p,{children:["First, log into ",(0,o.jsx)(n.a,{href:"https://cloud.logto.io/",children:"Logto Cloud"}),". You can sign up for a free account if you don't have one. Create a Development Tenant for testing."]}),"\n",(0,o.jsx)(n.p,{children:'In the Tenant Console, click the "Application" button on the left. Then select React to start building our application.'}),"\n",(0,o.jsx)(n.p,{children:"Follow the guide on the page. You can complete the Logto integration in about 5 minutes!"}),"\n",(0,o.jsx)(n.p,{children:"Here's my integration code:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'const config: LogtoConfig = {\n  endpoint: "<YOUR_LOGTO_ENDPOINT>",\n  appId: "<YOUR_LOGTO_APP_ID>",\n};\n\nfunction App() {\n  return (\n    <LogtoProvider config={config}>\n      <div className="min-h-screen bg-gradient-to-b from-gray-50 to-gray-100">\n        <Routes>\n          {/* This callback handles the user login redirect from Logto */}\n          <Route path="/callback" element={<Callback />} />\n          <Route path="/*" element={<AppContent />} />\n        </Routes>\n      </div>\n    </LogtoProvider>\n  );\n}\n\nfunction AppContent() {\n  const { isAuthenticated } = useLogto();\n\n  if (!isAuthenticated) {\n    // Show landing page for unauthenticated users\n    return <Landing />;\n  }\n\n  // Show main app for authenticated users\n  return (\n    <Routes>\n      {/* Dashboard shows all available organizations */}\n      <Route path="/" element={<Dashboard />} />\n\n      {/* Organization page after clicking an organization in Dashboard */}\n      <Route path="/:orgId" element={<Organization />} />\n    </Routes>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://uploads.strapi.logto.io/documind_home_page_e72468b8c9.png",alt:"documind-home-page.png"})}),"\n",(0,o.jsxs)(n.p,{children:["Here's a useful trick: Our login page has both Sign in and Register buttons. The Register button leads directly to Logto's registration page. This works through Logto's ",(0,o.jsx)(n.a,{href:"/end-user-flows/authentication-parameters/first-screen",children:"first screen"})," feature. It determines which step of the auth flow users see first."]}),"\n",(0,o.jsx)(n.p,{children:"You can default to the registration page when your product expects many new users."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'function LandingPage() {\n  const { signIn } = useLogto();\n\n  return (\n    <div className="landing-container">\n      <div className="auth-buttons">\n        <button\n          className="sign-in-button"\n          onClick={() => {\n            signIn({\n              redirectUri: \'<YOUR_APP_CALLBACK_URL>\',\n            });\n          }}\n        >\n          Sign In\n        </button>\n\n        <button\n          className="register-button"\n          onClick={() => {\n            signIn({\n              redirectUri: \'<YOUR_APP_CALLBACK_URL>\',\n              firstScreen: \'register\',\n            });\n          }}\n        >\n          Register\n        </button>\n      </div>\n    </div>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"After clicking login, you'll go to the Logto login page. Upon successful login (or registration), congratulations! Your app has its first user (you)!"}),"\n",(0,o.jsxs)(n.p,{children:["And call the ",(0,o.jsx)(n.code,{children:"signOut"})," function from the ",(0,o.jsx)(n.code,{children:"useLogto"})," hook to sign out the user when you want to."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"function SignOutButton() {\n  const { signOut } = useLogto();\n\n  return <button onClick={() => signOut('<YOUR_POST_LOGOUT_REDIRECT_URL>')}>Sign Out</button>;\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"customize-sign-in-and-sign-up-methods",children:"Customize sign in and sign up methods"}),"\n",(0,o.jsx)(n.p,{children:'In the Logto Console, click "Sign-in Experience" on the left menu. Then click the "Sign-up and sign-in" tab.\nOn this page, follow the instructions to configure Logto\'s login/registration methods.'}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://uploads.strapi.logto.io/sign_in_experience_settings_68690b84f4.png",alt:"sign-in-experience-settings.png"})}),"\n",(0,o.jsx)(n.p,{children:"And the sign-in flow will look like this:"}),"\n",(0,o.jsx)("img",{alt:"Logto sign-in page",src:"https://uploads.strapi.logto.io/sign_in_page_88ea6b5292.png",width:"500"}),"\n",(0,o.jsx)(n.h3,{id:"enable-multi-factor-authentication",children:"Enable multi-factor authentication"}),"\n",(0,o.jsx)(n.p,{children:'With Logto, enabling MFA is simple. Just click the "Multi-factor auth" button in the Logto Console. Then enable it on the Multi-factor authentication page.'}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://uploads.strapi.logto.io/mfa_settings_d74c5492d7.png",alt:"mfa-settings.png"})}),"\n",(0,o.jsx)(n.p,{children:"And the MFA flow will look like this:"}),"\n",(0,o.jsxs)("div",{className:"twoColumn",children:[(0,o.jsx)("img",{alt:"Mfa verification step",src:"https://uploads.strapi.logto.io/verification_step_852fffe7da.png",width:"500"}),(0,o.jsx)("img",{alt:"Scan QR code in authenticator app",src:"https://uploads.strapi.logto.io/scan_auth_app_qr_code_68c2e26277.png",width:"500"})]}),"\n",(0,o.jsx)(n.p,{children:"Everything is so simple! We've set up a complex user authentication system in just a few minutes!"}),"\n",(0,o.jsx)(n.h2,{id:"adding-multi-tenant-organization-experience",children:"Adding multi-tenant organization experience"}),"\n",(0,o.jsx)(n.p,{children:"Now have our first user! However, this user doesn't belong to any organization yet, and we haven't created any organizations."}),"\n",(0,o.jsx)(n.p,{children:"Logto provides built-in support for multi-tenancy. You can create any number of organizations in Logto. Each organization can have multiple members."}),"\n",(0,o.jsx)(n.mermaid,{value:"graph TD\n    T[Logto tenant] --\x3e OrgA[Organization A]\n    T --\x3e OrgB[Organization B]\n    OrgA --\x3e MA1[Member]\n    OrgA --\x3e MA2[Member]\n    OrgB --\x3e MB1[Member]\n    OrgB --\x3e MB2[Member]\n\n    style OrgA fill:#e6ffe6\n    style OrgB fill:#e6ffe6\n"}),"\n",(0,o.jsx)(n.p,{children:"Each user can get their organization information from Logto. This enables multi-tenancy support"}),"\n",(0,o.jsx)(n.h3,{id:"get-a-user-s-organization-information",children:"Get a user's organization information"}),"\n",(0,o.jsx)(n.p,{children:"To get a user's organization information from Logto, follow these two steps:"}),"\n",(0,o.jsxs)(n.p,{children:["Declare organization information access in the Logto Config. This is done by setting the appropriate ",(0,o.jsx)(n.code,{children:"scopes"})," and ",(0,o.jsx)(n.code,{children:"resources"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'import { UserScope, ReservedResource } from "@logto/react";\nconst config: LogtoConfig = {\n  endpoint: "<YOUR_LOGTO_ENDPOINT>",\n  appId: "<YOUR_LOGTO_APP_ID>",\n  scopes: [UserScope.Organizations], // Value: "urn:logto:scope:organizations"\n  resources: [ReservedResource.Organization], // Value: "urn:logto:resource:organizations"\n};\n\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Use Logto's ",(0,o.jsx)(n.code,{children:"fetchUserInfo"})," method to get user information, including organization data."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"function Dashboard() {\n  // Get user info\n  const { fetchUserInfo } = useLogto();\n  const [organizations, setOrganizations] = useState<OrganizationData[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const loadOrganizations = async () => {\n      try {\n        setLoading(true);\n        // Get user info\n        const userInfo = await fetchUserInfo();\n        // Get user's organization info\n        const organizationData = userInfo?.organization_data || [];\n        setOrganizations(organizationData);\n      } catch (error) {\n        console.error('Failed to fetch organizations:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadOrganizations();\n  }, [fetchUserInfo]);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (organizations.length === 0) {\n    return <div>You are not a member of any organization yet</div>;\n  }\n\n  return <div>Organizations: {organizations.map(org => org.name).join(', ')}</div>;\n}\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"After completing these steps, you need to sign out and sign in again. This is necessary because we modified the requested scope and resource."}),"\n",(0,o.jsx)(n.p,{children:"Right now, you haven't created any organizations. The user hasn't joined any organizations either. The dashboard will show \"You don\u2019t have any organization yet\"."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://uploads.strapi.logto.io/dashboard_no_orgs_94678fe16f.png",alt:"dashboard-no-orgs.png"})}),"\n",(0,o.jsx)(n.p,{children:"Next, we\u2019ll create an organization for our users and add them to it."}),"\n",(0,o.jsx)(n.p,{children:"Thanks to Logto, we don't need to build complex organization relationships. We just need to create an organization in Logto and add users to it. Logto handles all the complexity for us. There are two ways to create Organizations:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Manually create organizations through the Logto Console"}),"\n",(0,o.jsx)(n.li,{children:"Use the Logto Management API to create organizations, especially when designing a SaaS flow that lets users create their own organizations (workspaces)."}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"create-organization-in-logto-console",children:"Create organization in Logto console"}),"\n",(0,o.jsx)(n.p,{children:'Click the "Organizations" menu button on the left side of the Logto Console. Create an organization.'}),"\n",(0,o.jsx)(n.p,{children:"Now you have your first organization."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://uploads.strapi.logto.io/console_organizations_7312c72766.png",alt:"console-organizations.png"})}),"\n",(0,o.jsx)(n.p,{children:"Next, let's add the user to this organization."}),"\n",(0,o.jsx)(n.p,{children:'Go to the organization details page. Switch to the Members tab. Click the "+ Add member" button. Select your login user from the left list. Click the "Add members" button in the bottom right. Now you\'ve successfully added the user to this organization.'}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://uploads.strapi.logto.io/console_add_member_to_orgs_ad21beb58f.png",alt:"console-add-member-to-orgs.png"})}),"\n",(0,o.jsx)(n.p,{children:"Refresh your APP page. You'll see the user now belongs to an organization!"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://uploads.strapi.logto.io/dashboard_has_orgs_568a44cc1f.png",alt:"dashboard-has-orgs.png"})}),"\n",(0,o.jsx)(n.h2,{id:"implement-self-serve-organization-creation-experience",children:"Implement self-serve organization creation experience"}),"\n",(0,o.jsx)(n.p,{children:"Creating an organization in the console is not enough. Your SaaS app needs a flow that allows end users to easily create and manage their own workspaces. To implement this functionality, use the Logto Management API."}),"\n",(0,o.jsxs)(n.p,{children:["For guidance, check out the ",(0,o.jsx)(n.a,{href:"/integrate-logto/interact-with-management-api",children:"Interact with Management API"})," documentation to set up API communication with Logto."]}),"\n",(0,o.jsx)(n.h3,{id:"understand-organization-auth-interaction-flow",children:"Understand organization auth interaction flow"}),"\n",(0,o.jsx)(n.p,{children:"Let\u2019s take organization creation flow as an example. Here's how the organization creation process works:"}),"\n",(0,o.jsx)(n.mermaid,{value:"sequenceDiagram\n  actor A as User\n  participant B as Frontend\n  participant C as Backend\n  participant D as Logto\n\n  A->>B: Request to create organization\n  B->>C: POST /organizations\n  C->>D: POST /api/organizations\n  D--\x3e>C: Organization created\n  C->>D: POST /api/organizations/{id}/users\n  D--\x3e>C: User added to organization\n  C--\x3e>B: Success response\n  B--\x3e>A: Show success message"}),"\n",(0,o.jsx)(n.p,{children:"This flow has two key authentication requirements:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Protecting backend service API"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Frontend access to our Backend Service API requires authentication"}),"\n",(0,o.jsx)(n.li,{children:"API endpoints are protected by validating user's Logto Access Token"}),"\n",(0,o.jsx)(n.li,{children:"Ensures only authenticated users can access our services"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Accessing Logto Management API"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Backend Service needs to securely call Logto Management API"}),"\n",(0,o.jsxs)(n.li,{children:["Follow the ",(0,o.jsx)(n.a,{href:"/integrate-logto/interact-with-management-api",children:"Interact with Management API"})," guide for setup"]}),"\n",(0,o.jsx)(n.li,{children:"Use Machine-to-Machine authentication to obtain access credentials"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"protect-your-backend-api",children:"Protect your backend API"}),"\n",(0,o.jsx)(n.p,{children:"First, let's create an API endpoint in our backend service for creating organizations."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"app.post('/organizations', async (req, res) => {\n  // Implementation using Logto Management API\n  // ...\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"Our backend service API only allows authenticated users. We need to use Logto to protect our API. We also need to know the current user's information (like user ID)."}),"\n",(0,o.jsx)(n.p,{children:"In Logto's concept (and OAuth 2.0), our backend service acts as a resource server. Users access DocuMind resource server with an Access token from the frontend. The resource server verifies this token. If valid, it returns the requested resources."}),"\n",(0,o.jsx)(n.p,{children:"Let's create an API Resource to represent our backend service."}),"\n",(0,o.jsx)(n.p,{children:"Go to the Logto Console."}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:'Click the "API resources" button on the right.'}),"\n",(0,o.jsx)(n.li,{children:'Click "Create API resource". Select Express in the popup.'}),"\n",(0,o.jsxs)(n.li,{children:['Fill in "DocuMind API" as the API name. Use "',(0,o.jsx)(n.a,{href:"https://api.documind.com/",children:"https://api.documind.com"}),'" as the API identifier.']}),"\n",(0,o.jsx)(n.li,{children:"Click create."}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Don't worry about this API identifier URL. It's just a unique identifier for your API in Logto. It's not related to your actual backend service URL."}),"\n",(0,o.jsx)(n.p,{children:"You'll see a tutorial for using the API resource. You can follow that tutorial or our steps below."}),"\n",(0,o.jsx)(n.p,{children:"Let's create a requireAuth middleware to protect our POST /organizations endpoint."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"const { createRemoteJWKSet, jwtVerify } = require('jose');\n\nconst getTokenFromHeader = (headers) => {\n  const { authorization } = headers;\n  const bearerTokenIdentifier = 'Bearer';\n\n  if (!authorization) {\n    throw new Error('Authorization header missing');\n  }\n\n  if (!authorization.startsWith(bearerTokenIdentifier)) {\n    throw new Error('Authorization token type not supported');\n  }\n\n  return authorization.slice(bearerTokenIdentifier.length + 1);\n};\n\nconst requireAuth = (resource) => {\n  if (!resource) {\n    throw new Error('Resource parameter is required for authentication');\n  }\n\n  return async (req, res, next) => {\n    try {\n      // Extract the token\n      const token = getTokenFromHeader(req.headers);\n\n      const { payload } = await jwtVerify(\n        token,\n        createRemoteJWKSet(new URL(process.env.LOGTO_JWKS_URL)),\n        {\n          issuer: process.env.LOGTO_ISSUER,\n          audience: resource,\n        }\n      );\n\n      // Add user info to request\n      req.user = {\n        id: payload.sub,\n      };\n\n      next();\n    } catch (error) {\n      console.error('Auth error:', error);\n      res.status(401).json({ error: 'Unauthorized' });\n    }\n  };\n};\n\nmodule.exports = {\n  requireAuth,\n};\n"})}),"\n",(0,o.jsx)(n.p,{children:"To use this middleware, we need these environment variables:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"LOGTO_JWKS_URL"}),"\n",(0,o.jsx)(n.li,{children:"LOGTO_ISSUER"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Get these variables from your Logto tenant's OpenID Configuration endpoint. Visit ",(0,o.jsx)(n.code,{children:"https://<your-tenant-id>.logto.app/oidc/.well-known/openid-configuration"}),". You'll find the needed information in the returned JSON:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "jwks_uri": "<https://tenant-id.logto.app/oidc/jwks>",\n  "issuer": "<https://tenant-id.logto.app/oidc>"\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Now use the requireAuth middleware in our POST /organizations endpoint."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"app.post('/organizations', requireAuth('<https://api.documind.com>'), async (req, res) => {\n  // Handle organization creation logic\n  // ...\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"This protects our POST /organizations endpoint. Only users with valid Logto access tokens can access it."}),"\n",(0,o.jsx)(n.p,{children:"We can now get the token from Logto in our frontend. Users can create organizations through our backend service with this token. The middleware also gives us the user ID. This helps when adding users to organizations."}),"\n",(0,o.jsx)(n.p,{children:"In the frontend code, declare this API resource in the Logto config. Add its identifier to the resources array."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'const config: LogtoConfig = {\n  endpoint: "<YOUR_LOGTO_ENDPOINT>",\n  appId: "<YOUR_LOGTO_APP_ID>",\n  scopes: [UserScope.Organizations],\n  resources: [ReservedResource.Organization, "<https://api.documind.com>"], // Newly created API resource identifier\n};\n\n'})}),"\n",(0,o.jsx)(n.p,{children:"Like before, users need to log in again after we update the Logto config."}),"\n",(0,o.jsx)(n.p,{children:"In the Dashboard, get the Logto Access Token when creating an organization. Use this token to access our backend service API."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Get access token for \"DocuMind API\"\nconst token = await getAccessToken('<https://api.documind.com>');\n\n// Access our backend service API with the token\nconst response = await fetch('<http://localhost:3000/organizations>', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${token}`,\n  },\n  body: JSON.stringify({\n    name: 'Organization A',\n    description: 'Organization A description',\n  }),\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"Now we can properly access DocuMind backend service API."}),"\n",(0,o.jsx)(n.h3,{id:"calling-logto-management-api",children:"Calling Logto Management API"}),"\n",(0,o.jsx)(n.p,{children:"Let's implement organization creation using the Logto Management API."}),"\n",(0,o.jsx)(n.p,{children:"Like frontend requests to backend service, backend service requests to Logto need Access tokens."}),"\n",(0,o.jsxs)(n.p,{children:["In Logto, we use Machine-to-Machine authentication for access tokens. See ",(0,o.jsx)(n.a,{href:"/integrate-logto/interact-with-management-api",children:"Interact with Management API"}),"."]}),"\n",(0,o.jsx)(n.p,{children:'Go to the applications page in Logto Console. Create a Machine-to-Machine application. Assign the "Logto Management API access" role. Copy the Token endpoint, App ID, and App Secret. We\'ll use these for access tokens.'}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://uploads.strapi.logto.io/m2m_application_d882b6386e.png",alt:"m2m-application.png"})}),"\n",(0,o.jsx)(n.p,{children:"Now we can get Logto Management API access tokens through this M2M application."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"async function fetchLogtoManagementApiAccessToken() {\n  const response = await fetch(process.env.LOGTO_MANAGEMENT_API_TOKEN_ENDPOINT, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Basic ${Buffer.from(\n        `${process.env.LOGTO_MANAGEMENT_API_APPLICATION_ID}:${process.env.LOGTO_MANAGEMENT_API_APPLICATION_SECRET}`\n      ).toString('base64')}`,\n    },\n    body: new URLSearchParams({\n      grant_type: 'client_credentials',\n      resource: process.env.LOGTO_MANAGEMENT_API_RESOURCE,\n      scope: 'all',\n    }).toString(),\n  });\n  const data = await response.json();\n  return data.access_token;\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Use this access token to call Logto Management API."}),"\n",(0,o.jsx)(n.p,{children:"We'll use these Management APIs:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"POST /api/organizations"}),": Create organization (see: ",(0,o.jsx)(n.a,{href:"https://openapi.logto.io/operation/operation-createorganization",children:"Create organization API reference"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"POST /api/organizations/{id}/users"}),": Add users to organization (see: ",(0,o.jsx)(n.a,{href:"https://openapi.logto.io/operation/operation-addusers",children:"Add users to organization API reference"}),")"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"app.post('/organizations', requireAuth('<https://api.documind.com>'), async (req, res) => {\n  const accessToken = await fetchLogtoManagementApiAccessToken();\n  // Create organization in Logto, and add user to it\n  const response = await fetch(`${process.env.LOGTO_ENDPOINT}/api/organizations`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${accessToken}`,\n    },\n    body: JSON.stringify({\n      name: req.body.name,\n      description: req.body.description,\n    }),\n  });\n\n  const createdOrganization = await response.json();\n\n  await fetch(`${process.env.LOGTO_ENDPOINT}/api/organizations/${createdOrganization.id}/users`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${accessToken}`,\n    },\n    body: JSON.stringify({\n      userIds: [req.user.id],\n    }),\n  });\n\n  res.json({ data: createdOrganization });\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"We've now implemented organization creation through Logto Management API. We can also add users to organizations."}),"\n",(0,o.jsx)(n.p,{children:"Let's test this feature in the Dashboard."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://uploads.strapi.logto.io/dashboard_create_org_b703f1125b.png",alt:"dashboard-create-org.png"})}),"\n",(0,o.jsx)(n.p,{children:"and click \u201cCreate Organization\u201d"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://uploads.strapi.logto.io/dashboard_has_orgs_568a44cc1f.png",alt:"dashboard-has-orgs.png"})}),"\n",(0,o.jsx)(n.p,{children:"Creation successful!"}),"\n",(0,o.jsxs)(n.p,{children:["The next step would be inviting users to an organization. We won't implement this feature in our tutorial yet. You already know how to use the Management API. You can refer this ",(0,o.jsx)(n.a,{href:"#tenant-creation-and-invitation",children:(0,o.jsx)(n.strong,{children:"Tenant creation and invitation"})})," as product design reference and easily implement this feature by following this blog post: ",(0,o.jsx)(n.a,{href:"https://blog.logto.io/implement-user-collaboration-in-your-app",children:"How we implement user collaboration within a multi-tenant app"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"implement-access-control-to-your-multi-tenant-app",children:"Implement access control to your multi-tenant app"}),"\n",(0,o.jsx)(n.p,{children:"Now let's move on to organization access control."}),"\n",(0,o.jsx)(n.p,{children:"We want to achieve:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Users can only access resources belonging to their own organizations: This can be done through Logto's ",(0,o.jsx)(n.code,{children:"organization token"})]}),"\n",(0,o.jsx)(n.li,{children:"Users have specific roles within organizations (containing different permissions) to perform authorized actions: This can be implemented through Logto's organization template feature"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Let's see how to implement these features."}),"\n",(0,o.jsx)(n.h3,{id:"using-logto-organization-token",children:"Using Logto organization token"}),"\n",(0,o.jsx)(n.p,{children:"Similar to the Logto access token we mentioned earlier, Logto issues an access token corresponding to a specific resource, and users use this token to access protected resources in the backend service. Correspondingly, Logto issues an organization token corresponding to a specific organization, and users use this token to access protected organization resources in the backend service."}),"\n",(0,o.jsxs)(n.p,{children:["In the frontend application, we can use Logto's ",(0,o.jsx)(n.code,{children:"getOrganizationToken"})," method to obtain a token for accessing a specific organization."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"const { getOrganizationToken } = useLogto();\nconst organizationToken = await getOrganizationToken(organizationId);\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Here, ",(0,o.jsx)(n.code,{children:"organizationId"})," is the id of the organization to which the user belongs."]}),"\n",(0,o.jsxs)(n.p,{children:["Before using ",(0,o.jsx)(n.code,{children:"getOrganization"})," or any organization features, we need to ensure that ",(0,o.jsx)(n.code,{children:"urn:logto:scope:organizations"})," scope and ",(0,o.jsx)(n.code,{children:"urn:logto:resource:organization"})," resource are included in the Logto config. Since we've already declared these earlier, we won't repeat it."]}),"\n",(0,o.jsx)(n.p,{children:"In our organization page, we use the organization token to fetch documents within the organization."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"function OrganizationPage() {\n  const { organizationId } = useParams();\n  const navigate = useNavigate();\n  const { signOut, getOrganizationToken } = useLogto();\n  const [error, setError] = useState<Error | null>(null);\n  const [documents, setDocuments] = useState([]);\n\n  const fetchDocuments = useCallback(async () => {\n    if (!organizationId) return;\n\n    try {\n      const organizationToken = await getOrganizationToken(organizationId);\n      const response = await fetch(`http://localhost:3000/documents`, {\n          headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${organizationToken}`,\n        },\n      });\n      const documents = await response.json();\n      setDocuments(documents);\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        setError(error);\n      } else {\n        setError(new Error(String(error)));\n      }\n    }\n  },[getOrganizationToken, organizationId]);\n\n  useEffect(() => {\n    void fetchDocuments();\n  }, [fetchDocuments]);\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  return <div>\n    <h1>Organization Documents</h1>\n    <ul>\n      {documents.map((document) => (\n        <li key={document.id}>{document.name}</li>\n      ))}\n    </ul>\n  </div>\n}\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"There are two important points to note in this implementation:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["If the ",(0,o.jsx)(n.code,{children:"organizationId"})," passed to ",(0,o.jsx)(n.code,{children:"getOrganizationToken"})," is not an organization id that belongs to the current user, this method won't be able to get a token, thus ensuring users can only access their own organizations."]}),"\n",(0,o.jsxs)(n.li,{children:["When requesting organization resources, we use the organization token instead of the access token because for resources belonging to an organization, we want to use organization permission control rather than user permission control (you'll better understand this when we implement the ",(0,o.jsx)(n.code,{children:"GET /documents"})," API later)."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Next, we create a ",(0,o.jsx)(n.code,{children:"GET /documents"})," API in our backend service. Similar to how we use API resource to protect the ",(0,o.jsx)(n.code,{children:"POST /organizations"})," API, we use organization-specific resource indicators to protect the ",(0,o.jsx)(n.code,{children:"GET /documents"})," API."]}),"\n",(0,o.jsxs)(n.p,{children:["First, let's create a ",(0,o.jsx)(n.code,{children:"requireOrganizationAccess"})," middleware to protect Organization resources."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"const getTokenFromHeader = (headers) => {\n  const { authorization } = headers;\n  const bearerTokenIdentifier = 'Bearer';\n\n  if (!authorization) {\n    throw new Error('Authorization header missing');\n  }\n\n  if (!authorization.startsWith(bearerTokenIdentifier)) {\n    throw new Error('Authorization token type not supported');\n  }\n\n  return authorization.slice(bearerTokenIdentifier.length + 1);\n};\n\nconst extractOrganizationId = (aud) => {\n  if (!aud || typeof aud !== 'string' || !aud.startsWith('urn:logto:organization:')) {\n    throw new Error('Invalid organization token');\n  }\n  return aud.replace('urn:logto:organization:', '');\n};\n\nconst decodeJwtPayload = (token) => {\n  try {\n    const [, payloadBase64] = token.split('.');\n    if (!payloadBase64) {\n      throw new Error('Invalid token format');\n    }\n    const payloadJson = Buffer.from(payloadBase64, 'base64').toString('utf-8');\n    return JSON.parse(payloadJson);\n  } catch (error) {\n    throw new Error('Failed to decode token payload');\n  }\n};\n\nconst requireOrganizationAccess = () => {\n  return async (req, res, next) => {\n    try {\n      // Extract the token\n      const token = getTokenFromHeader(req.headers);\n\n      // Dynamically get the audience from the token\n      const { aud } = decodeJwtPayload(token);\n      if (!aud) {\n        throw new Error('Missing audience in token');\n      }\n\n      // Verify the token with the audience\n      const { payload } = await jwtVerify(\n        token,\n        createRemoteJWKSet(new URL(process.env.LOGTO_JWKS_URL)),\n        {\n          issuer: process.env.LOGTO_ISSUER,\n          audience: aud,\n        }\n      );\n\n      // Extract organization ID from the audience claim\n      const organizationId = extractOrganizationId(payload.aud);\n\n      // Add organization info to request\n      req.user = {\n        id: payload.sub,\n        organizationId,\n      };\n\n      next();\n    } catch (error) {\n      console.error('Organization auth error:', error);\n      res.status(401).json({ error: 'Unauthorized - Invalid organization access' });\n    }\n  };\n};\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Then we use the ",(0,o.jsx)(n.code,{children:"requireOrganizationAccess"})," middleware to protect the ",(0,o.jsx)(n.code,{children:"GET /documents"})," API."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"app.get('/documents', requireOrganizationAccess(), async (req, res) => {\n  // You can get the current user's id and organizationId through req.user\n  console.log('userId', req.user.id);\n  console.log('organizationId', req.user.organizationId);\n\n  // Get documents from the database by organizationId\n  // ....\n  const documents = await getDocumentsByOrganizationId(req.user.organizationId);\n\n  res.json(documents);\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"This way, we've implemented using organization tokens to access organization resources. In the backend service, you can retrieve corresponding resources from the database based on the organization id."}),"\n",(0,o.jsxs)(n.p,{children:["Some software requires data isolation between organizations. For further discussion and implementation, you can refer to the blog post: ",(0,o.jsx)(n.a,{href:"https://blog.logto.io/implement-multi-tenancy",children:"Multi-tenancy implementation with PostgreSQL: Learn through a simple real-world example"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"implement-organization-level-role-based-access-control-design",children:"Implement organization-level role-based access control design"}),"\n",(0,o.jsx)(n.p,{children:"We've implemented using organization tokens to access organization resources. Next, we'll implement user permission control within organizations using RBAC."}),"\n",(0,o.jsx)(n.p,{children:"Let's assume DocuMind has two roles: Admin and Collaborator."}),"\n",(0,o.jsx)(n.p,{children:"Admins can create and access documents, while Collaborators can only access documents."}),"\n",(0,o.jsx)(n.p,{children:"Therefore, our Organization needs to have these two roles: Admin and Collaborator."}),"\n",(0,o.jsxs)(n.p,{children:["Admin has both ",(0,o.jsx)(n.code,{children:"read:documents"})," and ",(0,o.jsx)(n.code,{children:"create:documents"})," permissions, while Collaborator has only the ",(0,o.jsx)(n.code,{children:"read:documents"})," permission."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Admin","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"read:documents"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"create:documents"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Collaborator","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"read:documents"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"This is where Logto's organization template feature comes in."}),"\n",(0,o.jsx)(n.p,{children:"An organization template is a blueprint of the access control model for every organization: it defines the roles and permissions that apply to all organizations."}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Why organization template?"}),"\n",(0,o.jsx)(n.p,{children:"Because scalability is one of the most important requirements for SaaS products. In other words, what works for one client should work for all clients."}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Let's go to Logto Console > Organization Templates > Organization permissions and create two permissions: ",(0,o.jsx)(n.code,{children:"read:documents"})," and ",(0,o.jsx)(n.code,{children:"create:documents"}),"."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://uploads.strapi.logto.io/org_template_permission_f0ad59f5b5.png",alt:"org-template-permission.png"})}),"\n",(0,o.jsx)(n.p,{children:"Then go to the organization roles tab to create two user roles: Admin and Collaborator, and assign corresponding permissions to these roles."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://uploads.strapi.logto.io/organization_details_9293d7965d.png",alt:"organization-details.png"})}),"\n",(0,o.jsx)(n.p,{children:"This way, we've created an RBAC permission model for each organization."}),"\n",(0,o.jsx)(n.p,{children:"Next, we go to our Organization details page to assign appropriate roles to our members."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://uploads.strapi.logto.io/org_template_role_0137f5a8ca.png",alt:"org-template-role.png"})}),"\n",(0,o.jsx)(n.p,{children:"Now our organization users have roles!\nYou can achieve these steps via Logto Management API:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// Assign 'Admin' role to the organization creator\napp.post('/organizations', requireAuth('https://api.documind.com'), async (req, res) => {\n  const accessToken = await fetchLogtoManagementApiAccessToken();\n  // Create organization in Logto\n  // existing codes...\n\n  // Add user to organization in Logto\n  await fetch(`${process.env.LOGTO_ENDPOINT}/api/organizations/${createdOrganization.id}/users`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${accessToken}`,\n    },\n    body: JSON.stringify({\n      userIds: [req.user.id],\n    }),\n  });\n\n  // Assign `Admin` role to the first user.\n  const rolesResponse = await fetch(`${process.env.LOGTO_ENDPOINT}/api/organization-roles`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${accessToken}`,\n    },\n  });\n\n  const roles = await rolesResponse.json();\n\n  // Find the `Admin` role\n  const adminRole = roles.find((role) => role.name === 'Admin');\n\n  // Assign `Admin` role to the first user.\n  await fetch(\n    `${process.env.LOGTO_ENDPOINT}/api/organizations/${createdOrganization.id}/users/${req.user.id}/roles`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${accessToken}`,\n      },\n      body: JSON.stringify({\n        organizationRoleIds: [adminRole.id],\n      }),\n    }\n  );\n\n  // existing codes...\n});\n"})}),"\n",(0,o.jsx)(n.p,{children:"Now we can implement user permission control by checking their permissions."}),"\n",(0,o.jsx)(n.p,{children:"In our code, we need to make the user's organization token carry permission information, and then verify these permissions in the backend."}),"\n",(0,o.jsxs)(n.p,{children:["In the frontend code's Logto config, we need to declare the permissions users need to request within the organization. Let's add ",(0,o.jsx)(n.code,{children:"read:documents"})," and ",(0,o.jsx)(n.code,{children:"create:documents"})," permissions to the ",(0,o.jsx)(n.code,{children:"scopes"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'const config: LogtoConfig = {\n  endpoint: "<YOUR_LOGTO_ENDPOINT>",\n  appId: "<YOUR_LOGTO_APP_ID>",\n  scopes: [UserScope.Organizations, "read:documents", "create:documents"],\n  resources: [ReservedResource.Organization, "<https://api.documind.com>"], // Newly created API resource identifier\n};\n\n'})}),"\n",(0,o.jsx)(n.p,{children:"As usual, log in again with your user to make these configurations take effect."}),"\n",(0,o.jsxs)(n.p,{children:["Then in the backend's ",(0,o.jsx)(n.code,{children:"requireOrganizationAccess"})," middleware, we add verification for user permissions."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"const hasRequiredScopes = (tokenScopes, requiredScopes) => {\n  if (!requiredScopes || requiredScopes.length === 0) {\n    return true;\n  }\n  const scopeSet = new Set(tokenScopes);\n  return requiredScopes.every((scope) => scopeSet.has(scope));\n};\n\nconst requireOrganizationAccess = ({ requiredScopes = [] } = {}) => {\n  return async (req, res, next) => {\n    try {\n      //...\n\n      // Verify the token with the audience\n      const { payload } = await jwtVerify(\n        token,\n        createRemoteJWKSet(new URL(process.env.LOGTO_JWKS_URL)),\n        {\n          issuer: process.env.LOGTO_ISSUER,\n          audience: aud,\n        }\n      );\n\n      //...\n\n      // Get scopes from the token\n      const scopes = payload.scope?.split(' ') || [];\n\n      // Verify required scopes\n      if (!hasRequiredScopes(scopes, requiredScopes)) {\n        throw new Error('Insufficient permissions');\n      }\n\n      //...\n\n      next();\n    } catch (error) {\n      //...\n    }\n  };\n};\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Then create a POST /documents API, and use the ",(0,o.jsx)(n.code,{children:"requireOrganizationAccess"})," middleware with requiredScopes configuration to protect this API and the previous ",(0,o.jsx)(n.code,{children:"GET /documents"})," API."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"// API for creating documents\napp.post(\n  '/documents',\n  requireOrganizationAccess({ requiredScopes: ['create:documents'] }),\n  async (req, res) => {\n    //...\n  }\n);\n\n// API for getting documents\napp.get(\n  '/documents',\n  requireOrganizationAccess({ requiredScopes: ['read:documents'] }),\n  async (req, res) => {\n    //...\n  }\n);\n"})}),"\n",(0,o.jsx)(n.p,{children:"This way, we've implemented user permission control by checking user permissions."}),"\n",(0,o.jsxs)(n.p,{children:["In the frontend, you can get user permission information by decoding the organization token or calling Logto's ",(0,o.jsx)(n.code,{children:"getOrganizationTokenClaims"})," method."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:"const [scopes, setScopes] = useState([]);\nconst { getOrganizationTokenClaims } = useLogto();\n\nconst loadScopes = async () => {\n  const claims = await getOrganizationTokenClaims(organizationId);\n  setScopes(claims.scope.split(' '));\n};\n\n// ...\n"})}),"\n",(0,o.jsx)(n.p,{children:"Control page elements based on user permissions by checking the scopes in the claims."}),"\n",(0,o.jsx)(n.h2,{id:"add-more-multi-tenant-app-features",children:"Add more multi-tenant app features"}),"\n",(0,o.jsx)(n.p,{children:"So far, we've implemented the basic user and organization features in a multi-tenant SaaS system! However, there are still some features we haven't covered, such as customizing login page branding for each Organization, automatically adding users with specific domain emails to certain organizations, and integrating enterprise-level SSO functionality."}),"\n",(0,o.jsx)(n.p,{children:"These are all out-of-the-box features, and you can find more information about these features in the Logto documentation:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/end-user-flows/enterprise-sso",children:"Enterprise SSO Integration"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/organizations/just-in-time-provisioning",children:"Just-in-Time (JIT) Provisioning"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/customization/match-your-brand#organization-specific-branding",children:"Organization-Level Branding"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/organizations/organization-management#require-mfa-for-organization-members",children:"Organization-Level Multi-Factor Authentication (MFA)"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/end-user-flows/organization-experience/organization-management",children:"Organization-Level Management"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsx)(n.p,{children:"Remember how overwhelming it felt at the beginning? Users, organizations, permissions, enterprise features... it seemed like an endless mountain to climb."}),"\n",(0,o.jsx)(n.p,{children:"But look at what we've accomplished:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"A complete authentication system with multiple sign-in options and MFA support"}),"\n",(0,o.jsx)(n.li,{children:"A flexible organization system that supports multiple memberships"}),"\n",(0,o.jsx)(n.li,{children:"Role-based access control within organizations"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"And the best part? We didn't have to reinvent the wheel. By leveraging modern tools like Logto, we transformed what could have been months of development into a matter of minutes."}),"\n",(0,o.jsxs)(n.p,{children:["The complete source code for this tutorial is available at: ",(0,o.jsx)(n.a,{href:"https://github.com/logto-io/multi-tenant-saas-sample",children:"Multi-tenant SaaS Sample"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"This is the power of modern development in 2025 - we can focus on building unique product features instead of wrestling with infrastructure. Now it's your turn to build something amazing!"}),"\n",(0,o.jsxs)(n.p,{children:["Explore all of Logto\u2019s features, from Logto Cloud to Logto OSS, on the ",(0,o.jsx)(n.a,{href:"https://logto.io/",children:"Logto website"})," or sign up ",(0,o.jsx)(n.a,{href:"https://cloud.logto.io/?sign_up",children:"Logto cloud"})," today."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},79621:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(58101);const o={},s=i.createContext(o);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);