"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[47828],{51199:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"logto-oss/using-cli/translation","title":"Translation","description":"Use CLI to manage i18n translations.","source":"@site/docs/logto-oss/using-cli/translation.mdx","sourceDirName":"logto-oss/using-cli","slug":"/logto-oss/using-cli/translation","permalink":"/logto-oss/using-cli/translation","draft":false,"unlisted":false,"editUrl":"https://github.com/logto-io/docs/tree/master/docs/logto-oss/using-cli/translation.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"description":"Use CLI to manage i18n translations.","sidebar_position":5},"sidebar":"docsSidebar","previous":{"title":"Manage database configs","permalink":"/logto-oss/using-cli/manage-database-configs"},"next":{"title":"Migrate configs from env","permalink":"/logto-oss/using-cli/migrate-from-env"}}');var a=s(25105),i=s(79621);const o={description:"Use CLI to manage i18n translations.",sidebar_position:5},l="Translation",r={},c=[{value:"Sync keys",id:"sync-keys",level:2},{value:"Translate keys using ChatGPT",id:"translate-keys-using-chatgpt",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"translation",children:"Translation"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["Started from v1.20.0, the translate command is removed from the ",(0,a.jsx)(n.code,{children:"@logto/cli"}),", and maintained as a standalone ",(0,a.jsx)(n.code,{children:"@logto/translate"})," package in the logto monorepo. Please refer to the ",(0,a.jsx)(n.a,{href:"/logto-oss/translate-cli/",children:"translate CLI"})," for more details."]})}),"\n",(0,a.jsxs)(n.p,{children:["Use CLI to manage i18n translations. These commands are for developers who want to contribute to Logto. If you just want to use Logto with custom translation, please refer to ",(0,a.jsx)(n.a,{href:"/customization/localized-languages/",children:"this guide"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"sync-keys",children:"Sync keys"}),"\n",(0,a.jsxs)(n.p,{children:["Let's say we made some changes to the translation keys in the ",(0,a.jsx)(n.code,{children:"en"})," folder of the ",(0,a.jsx)(n.code,{children:"phrases"})," package. We want to sync these changes to the ",(0,a.jsx)(n.code,{children:"pt-BR"})," folder. Run the command below to sync translation keys and file structure:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pnpm cli translate sync-keys --target pt-BR\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This command will read all translation keys from the source language folder (",(0,a.jsx)(n.code,{children:"en"})," by default) and sync them to the target language folder (",(0,a.jsx)(n.code,{children:"pt-BR"})," in this example)."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"If the target language folder doesn't exist, it will be created automatically;"}),"\n",(0,a.jsx)(n.li,{children:"If the target language folder already exists, it will be updated with new keys and removed with obsolete keys."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"For each translation key:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["If a key is missing in the target, it will be added with a comment to indicate that the phrase is untranslated (marked with ",(0,a.jsx)(n.code,{children:"/** UNTRANSLATED */"}),");"]}),"\n",(0,a.jsx)(n.li,{children:"If a key is missing in the baseline, it will be removed from the target;"}),"\n",(0,a.jsx)(n.li,{children:"If a key exists in both the baseline and the target, the value of the target will be used."}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["To sync keys for all languages in the ",(0,a.jsx)(n.code,{children:"phrases"})," package, run the command below:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pnpm cli translate sync-keys --target all\n"})}),"\n",(0,a.jsx)(n.p,{children:"Thus we can focusing on updating the translation keys in the source language folder, and the translation keys in other languages will be updated automatically."}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["This command executes for ",(0,a.jsx)(n.code,{children:"phrases"})," package by default. You can specify the package name by ",(0,a.jsx)(n.code,{children:"--package"})," option. For example, use ",(0,a.jsx)(n.code,{children:"--package phrases-experience"})," to sync keys for the ",(0,a.jsx)(n.code,{children:"phrases-experience"})," package."]})}),"\n",(0,a.jsx)(n.p,{children:"After syncing keys, we can translate the keys using ChatGPT API."}),"\n",(0,a.jsx)(n.h2,{id:"translate-keys-using-chatgpt",children:"Translate keys using ChatGPT"}),"\n",(0,a.jsx)(n.p,{children:"Run the command below to translate keys using ChatGPT:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"pnpm cli translate sync\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This command will translate all untranslated keys (marked with ",(0,a.jsx)(n.code,{children:"/** UNTRANSLATED */"}),") across all languages in the ",(0,a.jsx)(n.code,{children:"phrases"})," and ",(0,a.jsx)(n.code,{children:"phrases-experience"})," packages. Note an environment variable ",(0,a.jsx)(n.code,{children:"OPENAI_API_KEY"})," is required to run this command."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},79621:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var t=s(58101);const a={},i=t.createContext(a);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);