"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[43954],{6484:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>u,contentTitle:()=>d,default:()=>c,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"quick-starts/database/supabase/README","title":"Authentifizierung zu deiner Supabase-Anwendung hinzuf\xfcgen","description":"Supabase-Grundlagen \\\\","source":"@site/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/database/supabase/README.mdx","sourceDirName":"quick-starts/database/supabase","slug":"/quick-starts/supabase","permalink":"/de/quick-starts/supabase","draft":false,"unlisted":false,"editUrl":"https://github.com/logto-io/docs/tree/master/i18n/de/docusaurus-plugin-content-docs/current/quick-starts/database/supabase/README.mdx","tags":[],"version":"current","frontMatter":{"slug":"/quick-starts/supabase","sidebar_label":"Supabase","sidebar_custom_props":{"description":"Logto mit Supabase integrieren.","logoFilename":"supabase.svg"}},"sidebar":"quickStartSidebar","previous":{"title":"Hasura","permalink":"/de/quick-starts/hasura"},"next":{"title":"OIDC (Third-party app)","permalink":"/de/quick-starts/third-party-oidc"}}');var i=s(25105),r=s(79621);const a={slug:"/quick-starts/supabase",sidebar_label:"Supabase",sidebar_custom_props:{description:"Logto mit Supabase integrieren.",logoFilename:"supabase.svg"}},d="Authentifizierung zu deiner Supabase-Anwendung hinzuf\xfcgen",u={},o=[{value:"Supabase-Grundlagen",id:"supabase-basics",level:2},{value:"Benutzerdaten zu den Supabase-Anfragen hinzuf\xfcgen",id:"add-user-data-to-the-supabase-requests",level:3},{value:"Row-Level-Security-Richtlinie erstellen",id:"create-row-level-security-policy",level:3},{value:"Grundlegender Integrationsprozess mit Logto",id:"basic-integration-process-with-logto",level:3},{value:"Logto-Integration",id:"logto-integration",level:2},{value:"Native App oder SPA",id:"native-app-or-spa",level:3},{value:"Traditionelle Web-App",id:"traditional-web-app",level:3},{value:"Maschine-zu-Maschine-App",id:"machine-to-machine-app",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"authentifizierung-zu-deiner-supabase-anwendung-hinzuf\xfcgen",children:"Authentifizierung zu deiner Supabase-Anwendung hinzuf\xfcgen"})}),"\n",(0,i.jsx)(n.h2,{id:"supabase-basics",children:"Supabase-Grundlagen"}),"\n",(0,i.jsxs)(n.p,{children:["Supabase nutzt ",(0,i.jsx)(n.a,{href:"https://www.postgresql.org/docs/current/ddl-rowsecurity.html",children:"Postgres' Row-Level Security"}),", um Datenzugriffsberechtigungen zu steuern. Einfach ausgedr\xfcckt, k\xf6nnen wir durch das Erstellen von Row-Level-Security-Richtlinien f\xfcr Tabellen in der Datenbank einschr\xe4nken und verwalten, wer Daten in einer Tabelle lesen, schreiben und aktualisieren kann."]}),"\n",(0,i.jsx)(n.p,{children:'Angenommen, du hast eine Tabelle namens "posts" in deiner Datenbank mit folgendem Inhalt:'}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Posts-Tabelle",src:s(13068).A+"",width:"2000",height:"339"})}),"\n",(0,i.jsxs)(n.p,{children:["Das ",(0,i.jsx)(n.code,{children:"user_id"}),"-Feld in der Tabelle repr\xe4sentiert den Benutzer, dem die jeweiligen Post-Daten geh\xf6ren. Du kannst einschr\xe4nken, dass jeder Benutzer nur auf seine eigenen Post-Daten basierend auf dem ",(0,i.jsx)(n.code,{children:"user_id"}),"-Feld zugreifen kann."]}),"\n",(0,i.jsx)(n.p,{children:"Bevor dies jedoch implementiert werden kann, muss Supabase in der Lage sein, den aktuellen Benutzer zu identifizieren, der auf die Datenbank zugreift."}),"\n",(0,i.jsx)(n.h3,{id:"add-user-data-to-the-supabase-requests",children:"Benutzerdaten zu den Supabase-Anfragen hinzuf\xfcgen"}),"\n",(0,i.jsx)(n.p,{children:"Dank der Unterst\xfctzung von JWT durch Supabase k\xf6nnen wir, wenn unsere Anwendung mit Supabase interagiert, ein JWT generieren, das Benutzerdaten enth\xe4lt, indem wir das von Supabase bereitgestellte JWT-Geheimnis verwenden. Wir verwenden dieses JWT dann als Authentifizierungsheader bei Anfragen. Bei Erhalt der Anfrage \xfcberpr\xfcft Supabase automatisch die G\xfcltigkeit des JWT und erlaubt den Zugriff auf die darin enthaltenen Daten w\xe4hrend der nachfolgenden Prozesse."}),"\n",(0,i.jsx)(n.p,{children:'Zuerst k\xf6nnen wir das von Supabase bereitgestellte JWT-Geheimnis aus den "Projekteinstellungen" im Supabase-Dashboard erhalten:'}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Supabase API-Einstellungen-Seite",src:s(28337).A+"",width:"2000",height:"1018"})}),"\n",(0,i.jsx)(n.p,{children:"Dann, wenn wir das Supabase SDK verwenden, um Anfragen an Supabase zu stellen, nutzen wir dieses Geheimnis, um unser JWT zu generieren und es als Authentifizierungsheader an die Anfrage anzuh\xe4ngen. (Bitte beachte, dass dieser Prozess innerhalb des Backend-Dienstes deiner Anwendung stattfindet und das JWT-Geheimnis niemals Dritten offengelegt werden sollte)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"import { createClient } from '@supabase/supabase-js';\nimport { sign } from 'jsonwebtoken';\n\n/*\n * Hinweis:\n * Du kannst die SUPABASE_URL, SUPABASE_ANON_KEY an derselben Stelle finden, an der du das JWT-Geheimnis findest.\n */\nconst SUPABASE_URL = process.env.SUPABASE_URL;\nconst SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY;\n\nconst SUPABASE_JWT_SECRET = process.env.SUPABASE_JWT_SECRET;\n\nexport const getSupabaseClient = (userId) => {\n  const jwtPayload = {\n    userId,\n  };\n\n  const jwt = sign(jwtPayload, SUPABASE_JWT_SECRET, {\n    expiresIn: '1h', // Nur zur Demonstration\n  });\n\n  const client = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {\n    global: {\n      headers: {\n        Authorization: `Bearer ${jwt}`,\n      },\n    },\n  });\n\n  return client;\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"Navigiere als N\xe4chstes zum SQL-Editor im Supabase-Dashboard und erstelle eine Funktion, um die userId abzurufen, die in der Anfrage \xfcbermittelt wird:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Funktion zum Abrufen der Benutzer-ID erstellen",src:s(58280).A+"",width:"2000",height:"1054"})}),"\n",(0,i.jsx)(n.p,{children:"Der im Bild verwendete Code lautet wie folgt:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"create or replace function auth.user_id() returns text as $$\n  select nullif(current_setting('request.jwt.claims', true)::json->>'userId', '')::text;\n$$ language sql stable;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Wie der Code zeigt, kannst du in Supabase die Nutzlast des von uns generierten JWT abrufen, indem du ",(0,i.jsx)(n.code,{children:"request.jwt.claims"})," aufrufst. Das ",(0,i.jsx)(n.code,{children:"userId"}),"-Feld innerhalb der Nutzlast ist der von uns gesetzte Wert."]}),"\n",(0,i.jsx)(n.p,{children:"Mit dieser Funktion kann Supabase den Benutzer bestimmen, der derzeit auf die Datenbank zugreift."}),"\n",(0,i.jsx)(n.h3,{id:"create-row-level-security-policy",children:"Row-Level-Security-Richtlinie erstellen"}),"\n",(0,i.jsxs)(n.p,{children:["Als N\xe4chstes k\xf6nnen wir eine Row-Level-Security-Richtlinie erstellen, um jeden Benutzer darauf zu beschr\xe4nken, nur auf seine eigenen Post-Daten basierend auf dem ",(0,i.jsx)(n.code,{children:"user_id"}),"-Feld in der Posts-Tabelle zuzugreifen."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Navigiere zur Tabellen-Editor-Seite im Supabase-Dashboard und w\xe4hle die Posts-Tabelle aus."}),"\n",(0,i.jsx)(n.li,{children:'Klicke oben in der Tabelle auf "RLS-Richtlinie hinzuf\xfcgen".'}),"\n",(0,i.jsx)(n.li,{children:'Klicke im angezeigten Fenster auf "Richtlinie erstellen".'}),"\n",(0,i.jsx)(n.li,{children:"Gib einen Richtliniennamen ein und w\xe4hle den SELECT-Richtlinienbefehl."}),"\n",(0,i.jsxs)(n.li,{children:["Gib im ",(0,i.jsx)(n.code,{children:"using"}),"-Block des folgenden Codes ein:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"auth.user_id() = user_id\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"RLS-Richtlinie erstellen",src:s(3585).A+"",width:"2000",height:"2330"})}),"\n",(0,i.jsx)(n.p,{children:"Durch die Nutzung solcher Richtlinien wird die Datenzugriffskontrolle innerhalb von Supabase erreicht."}),"\n",(0,i.jsxs)(n.p,{children:["In realen Anwendungen w\xfcrdest du verschiedene Richtlinien erstellen, um Benutzeraktionen wie das Einf\xfcgen und \xc4ndern von Daten einzuschr\xe4nken. Dies liegt jedoch au\xdferhalb des Umfangs dieses Artikels. F\xfcr weitere Informationen zur Row-Level-Security (RLS) siehe ",(0,i.jsx)(n.a,{href:"https://supabase.com/docs/guides/database/postgres/row-level-security",children:"Sichere deine Daten mit Postgres Row Level Security"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"basic-integration-process-with-logto",children:"Grundlegender Integrationsprozess mit Logto"}),"\n",(0,i.jsx)(n.p,{children:"Wie bereits erw\xe4hnt, da Supabase RLS f\xfcr seine Zugriffskontrolle nutzt, liegt der Schl\xfcssel zur Integration mit Logto (oder einem anderen Authentifizierungsdienst) darin, die Benutzer-ID des autorisierten Benutzers zu erhalten und an Supabase zu senden. Der gesamte Prozess wird im folgenden Diagramm veranschaulicht:"}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n\tParticipant U as Endbenutzer\n\tParticipant Logto\n\tParticipant B as App-Backend-Dienst\n\tParticipant Supabase\n\n\tU->>Logto: Anmeldung bei Logto\n\tLogto--\x3e>U: `access_token`\n\tU->>B: Anfrage mit `access_token`\n\tB->>B: Abrufen der `user_id` aus `access_token`\n\tB->>B: JWT generieren durch `user_id` & `Supabase JWT secret`\n\tB->>Supabase: Anfrage mit JWT\n\tSupabase--\x3e>B: Antwortdaten\n\tB--\x3e>U: Antwortdaten"}),"\n",(0,i.jsx)(n.p,{children:"Als N\xe4chstes erkl\xe4ren wir, wie Logto basierend auf diesem Prozessdiagramm mit Supabase integriert wird."}),"\n",(0,i.jsx)(n.h2,{id:"logto-integration",children:"Logto-Integration"}),"\n",(0,i.jsx)(n.p,{children:"Logto bietet Integrationsanleitungen f\xfcr verschiedene Frameworks und Programmiersprachen."}),"\n",(0,i.jsxs)(n.p,{children:["Im Allgemeinen fallen Apps, die mit diesen Frameworks und Sprachen erstellt wurden, in Kategorien wie Native Apps, SPA (Single-Page-Apps), traditionelle Web-Apps und M2M (Maschine-zu-Maschine)-Apps. Du kannst die ",(0,i.jsx)(n.a,{href:"/quick-starts",children:"Logto-Schnellstartseite"})," besuchen, um Logto basierend auf dem von dir verwendeten Tech-Stack in deine Anwendung zu integrieren. Anschlie\xdfend folge den unten stehenden Anweisungen, um Logto basierend auf dem Typ deiner Anwendung in dein Projekt zu integrieren."]}),"\n",(0,i.jsx)(n.h3,{id:"native-app-or-spa",children:"Native App oder SPA"}),"\n",(0,i.jsx)(n.p,{children:"Sowohl Native Apps als auch SPAs laufen auf deinem Ger\xe4t, und die nach der Anmeldung erhaltenen Anmeldeinformationen (Zugangstoken) werden lokal auf deinem Ger\xe4t gespeichert."}),"\n",(0,i.jsx)(n.p,{children:"Daher musst du bei der Integration deiner App mit Supabase \xfcber deinen Backend-Dienst mit Supabase interagieren, da du keine sensiblen Informationen (wie das Supabase JWT-Geheimnis) auf dem Ger\xe4t jedes Benutzers offenlegen kannst."}),"\n",(0,i.jsxs)(n.p,{children:["Angenommen, du erstellst deine SPA mit React und Express. Du hast Logto erfolgreich in deine Anwendung integriert, indem du der ",(0,i.jsx)(n.a,{href:"/quick-starts/react",children:"Logto React SDK-Anleitung"})," gefolgt bist (du kannst den Code in unserem ",(0,i.jsx)(n.a,{href:"https://github.com/logto-io/js/tree/master/packages/react-sample",children:"React-Beispiel"})," einsehen). Zus\xe4tzlich hast du die Logto-Zugangstoken-Validierung zu deinem Backend-Server gem\xe4\xdf der ",(0,i.jsx)(n.a,{href:"/authorization/api-resources/node-express",children:"Sch\xfctze deine API auf Node (Express)"})," Dokumentation hinzugef\xfcgt."]}),"\n",(0,i.jsx)(n.p,{children:"Als N\xe4chstes verwendest du das von Logto erhaltene Zugangstoken, um Benutzerdaten von deinem Backend-Server anzufordern:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"import { useLogto } from '@logto/react';\nimport { useState, useEffect } from 'react';\nimport PostList from './PostList';\n\nconst endpoint = '<https://www.mysite.com/api/posts>';\nconst resource = '<https://www.mysite.com/api>';\n\nfunction PostPage() {\n  const { isAuthenticated, getAccessToken } = useLogto();\n  const [posts, setPosts] = useState();\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const response = await fetch(endpoint, {\n        headers: {\n          Authorization: `Bearer ${await getAccessToken(resource)}`,\n        },\n      });\n      setPosts(response.json());\n    };\n\n    if (isAuthenticated) {\n      void fetchPosts();\n    }\n  }, [isAuthenticated, getAccessToken]);\n\n  return <PostList posts={posts} />;\n}\n\nexport default PostPage;\n"})}),"\n",(0,i.jsx)(n.p,{children:"Auf deinem Backend-Server hast du bereits die ID des angemeldeten Benutzers aus dem Zugangstoken mithilfe von Middleware extrahiert:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"// auth-middleware.ts\nimport { createRemoteJWKSet, jwtVerify } from 'jose';\n\n//...\n\nexport const verifyAuthFromRequest = async (ctx, next) => {\n  // Extrahiere das Token\n  const token = extractBearerTokenFromHeaders(ctx.request.headers);\n\n  const { payload } = await jwtVerify(\n    token, // Das rohe Bearer-Token, das aus dem Anfrage-Header extrahiert wurde\n    createRemoteJWKSet(new URL('https://<your-logto-domain>/oidc/jwks')), // Erzeuge ein jwks mithilfe der jwks_uri, die vom Logto-Server abgefragt wurde\n    {\n      // Erwarteter Aussteller des Tokens, sollte vom Logto-Server ausgestellt werden\n      issuer: 'https://<your-logto-domain>/oidc',\n      // Erwartetes Zielgruppen-Token, sollte der Ressourcenindikator der aktuellen API sein\n      audience: '<your request listener resource indicator>',\n    }\n  );\n\n  // wenn du RBAC verwendest\n  assert(payload.scope.includes('some_scope'));\n\n  // benutzerdefinierte Nutzlastlogik\n  ctx.auth = {\n    userId: payload.sub,\n  };\n\n  return next();\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Jetzt kannst du den oben beschriebenen ",(0,i.jsx)(n.code,{children:"getSupabaseClient"})," verwenden, um die ",(0,i.jsx)(n.code,{children:"userId"})," an das JWT anzuh\xe4ngen, das in nachfolgenden Anfragen an Supabase verwendet wird. Alternativ kannst du eine Middleware erstellen, um einen Supabase-Client f\xfcr Anfragen zu erstellen, die mit Supabase interagieren m\xfcssen:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"export const withSupabaseClient = async (ctx, next) => {\n  ctx.supabase = getSupabaseClient(ctx.auth.userId);\n\n  return next();\n};\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Im nachfolgenden Verarbeitungsfluss kannst du direkt ",(0,i.jsx)(n.code,{children:"ctx.supabase"})," aufrufen, um mit Supabase zu interagieren:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"const fetchPosts = async (ctx) => {\n  const { data } = await ctx.supabase.from('posts').select('*');\n\n  return data;\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"In diesem Code gibt Supabase nur die Post-Daten zur\xfcck, die dem aktuellen Benutzer basierend auf den zuvor festgelegten Richtlinien geh\xf6ren."}),"\n",(0,i.jsx)(n.h3,{id:"traditional-web-app",children:"Traditionelle Web-App"}),"\n",(0,i.jsx)(n.p,{children:"Der Hauptunterschied zwischen einer traditionellen Web-App und einer Native App oder SPA besteht darin, dass eine traditionelle Web-App Seiten ausschlie\xdflich auf dem Webserver rendert und aktualisiert. Daher werden Benutzeranmeldeinformationen direkt vom Webserver verwaltet, w\xe4hrend sie in Native Apps und SPAs auf dem Ger\xe4t des Benutzers gespeichert sind."}),"\n",(0,i.jsx)(n.p,{children:"Bei der Integration von Logto mit einer traditionellen Web-App in Supabase kannst du die ID des angemeldeten Benutzers direkt vom Backend abrufen."}),"\n",(0,i.jsxs)(n.p,{children:["Nehmen wir ein Next.js-Projekt als Beispiel: Nachdem du Logto gem\xe4\xdf der ",(0,i.jsx)(n.a,{href:"/quick-starts/next-app-router",children:"Next.js SDK-Anleitung"})," in dein Projekt integriert hast, kannst du das Logto SDK verwenden, um Benutzerinformationen abzurufen und das entsprechende JWT f\xfcr die Interaktion mit Supabase zu erstellen."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"import { getLogtoContext } from '@logto/next-server-actions';\nimport { logtoConfig } from '@/logto';\nimport { getSupabaseClient } from '@/utils';\nimport PostList from './PostList';\n\nexport default async function PostPage() {\n  const { claims } = await getLogtoContext(logtoConfig);\n\n  // Der `sub`-Wert in `claims` ist die Benutzer-ID.\n  const supabase = getSupabaseClient(claims.sub);\n\n  const { data: posts } = await supabase.from('posts').select('*');\n\n  return <PostList posts={posts} />;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"machine-to-machine-app",children:"Maschine-zu-Maschine-App"}),"\n",(0,i.jsx)(n.p,{children:"Maschine-zu-Maschine (M2M) wird h\xe4ufig verwendet, wenn deine App direkt mit Ressourcendiensten kommunizieren muss, wie z. B. ein statischer Dienst, der t\xe4gliche Posts abruft usw."}),"\n",(0,i.jsxs)(n.p,{children:["Du kannst die ",(0,i.jsx)(n.a,{href:"/quick-starts/m2m",children:"Maschine-zu-Maschine: Auth mit Logto"}),' Anleitung f\xfcr die Authentifizierung von Maschine-zu-Maschine-Apps verwenden. Die Integration zwischen Supabase und Maschine-zu-Maschine-Apps \xe4hnelt der von Native Apps und SPAs (wie im Abschnitt "',(0,i.jsx)(n.a,{href:"#native-app-or-spa",children:"Native App oder SPA"}),'" beschrieben). Es geht darum, ein Zugangstoken von Logto zu erhalten und es dann \xfcber eine gesch\xfctzte Backend-API zu validieren.']}),"\n",(0,i.jsxs)(n.p,{children:["Es ist jedoch wichtig zu beachten, dass Native Apps und SPAs typischerweise f\xfcr Endbenutzer konzipiert sind, sodass die erhaltene Benutzer-ID den Benutzer selbst repr\xe4sentiert. Das Zugangstoken f\xfcr Maschine-zu-Maschine-Apps repr\xe4sentiert jedoch die Anwendung selbst, und das ",(0,i.jsx)(n.code,{children:"sub"}),"-Feld in der Nutzlast des Zugangstokens ist die Client-ID der M2M-App, nicht ein spezifischer Benutzer. Daher ist es w\xe4hrend der Entwicklung entscheidend, zu unterscheiden, welche Daten f\xfcr M2M-Apps bestimmt sind."]}),"\n",(0,i.jsxs)(n.p,{children:["Dar\xfcber hinaus, wenn du m\xf6chtest, dass eine bestimmte M2M-App im Namen des gesamten Dienstes auf Supabase zugreift, um RLS-Einschr\xe4nkungen zu umgehen, kannst du das ",(0,i.jsx)(n.code,{children:"service_role"}),"-Geheimnis von Supabase verwenden, um einen Supabase-Client zu erstellen. Dies ist n\xfctzlich, wenn du einige administrative oder automatisierte Aufgaben ausf\xfchren m\xf6chtest, die Zugriff auf alle Daten erfordern, ohne durch die f\xfcr einzelne Benutzer festgelegten Row-Level-Security-Richtlinien eingeschr\xe4nkt zu werden."]}),"\n",(0,i.jsxs)(n.p,{children:["Das ",(0,i.jsx)(n.code,{children:"service_role"}),"-Geheimnis findest du auf derselben Seite wie das JWT-Geheimnis:"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Service-Rolle-Geheimnis",src:s(86715).A+"",width:"2000",height:"948"})}),"\n",(0,i.jsxs)(n.p,{children:["Beim Erstellen eines Supabase-Clients verwende das ",(0,i.jsx)(n.code,{children:"service_role"}),"-Geheimnis, dann kann dieser Client auf alle Daten in der Datenbank zugreifen:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"import { createClient } from '@supabase/supabase-js';\n\n// ...\nconst SUPABASE_SERVICE_ROLE_SECRET = process.env.SUPABASE_SERVICE_ROLE_SECRET;\n\nconst client = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_SECRET, {\n  // ...Optionen\n});\n"})})]})}function c(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},58280:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/create-get-user-id-function-a82403fda6b70a5ee944d2ddc6058fdd.webp"},3585:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/create-rls-policy-d25a9bcf6966e995cd80e49dbd1a5739.webp"},13068:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/posts-table-d61708b17c77e0f3e3c23edad626b553.webp"},86715:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/service-role-secret-b671423defc58517bd481227b24da422.webp"},28337:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/supabase-api-settings-b81e56237542563029e32cffc158bead.webp"},79621:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>d});var t=s(58101);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);