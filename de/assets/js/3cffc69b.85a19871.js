"use strict";(self.webpackChunk_logto_docs=self.webpackChunk_logto_docs||[]).push([[355],{27663:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"logto-oss/develop-your-connector/connector-file-structure","title":"Connector-Dateistruktur","description":"Anbei ist ein Dateibaum, der zeigt, wie die Dateien von Connectors als TypeScript-Projekt organisiert sind.","source":"@site/i18n/de/docusaurus-plugin-content-docs/current/logto-oss/develop-your-connector/connector-file-structure.mdx","sourceDirName":"logto-oss/develop-your-connector","slug":"/logto-oss/develop-your-connector/connector-file-structure","permalink":"/de/logto-oss/develop-your-connector/connector-file-structure","draft":false,"unlisted":false,"editUrl":"https://github.com/logto-io/docs/tree/master/i18n/de/docusaurus-plugin-content-docs/current/logto-oss/develop-your-connector/connector-file-structure.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Entwickle deinen Connector","permalink":"/de/logto-oss/develop-your-connector/"},"next":{"title":"Connectors implementieren","permalink":"/de/logto-oss/develop-your-connector/implement-connectors"}}');var o=t(25105),i=t(79621);const r={sidebar_position:1},d="Connector-Dateistruktur",c={},l=[{value:"package.json",id:"packagejson",level:3},{value:"README.md",id:"readmemd",level:3},{value:"logo.svg",id:"logosvg",level:3},{value:"logo-dark.svg",id:"logo-darksvg",level:3},{value:"index.ts",id:"indexts",level:3},{value:"index.test.ts",id:"indextestts",level:3},{value:"types.ts",id:"typests",level:3},{value:"constant.ts",id:"constantts",level:3},{value:"mock.ts",id:"mockts",level:3},{value:"utils.ts",id:"utilsts",level:3}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"connector-dateistruktur",children:"Connector-Dateistruktur"})}),"\n",(0,o.jsx)(n.p,{children:"Anbei ist ein Dateibaum, der zeigt, wie die Dateien von Connectors als TypeScript-Projekt organisiert sind."}),"\n",(0,o.jsxs)(n.p,{children:["Dateien, deren Name mit ",(0,o.jsx)(n.code,{children:"^"})," endet, beziehen sich auf eine optionale Datei, andernfalls sind sie erforderlich."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"ConnectorRootDir/\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 logo.svg\n\u251c\u2500\u2500 logo-dark.svg^\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 index.ts\n    \u251c\u2500\u2500 index.test.ts\n    \u251c\u2500\u2500 types.ts\n    \u251c\u2500\u2500 constant.ts\n    \u251c\u2500\u2500 mock.ts^\n    \u251c\u2500\u2500 utils.ts^\n    \u251c\u2500\u2500 utils.test.ts^\n    \u2514\u2500\u2500 ...\n"})}),"\n",(0,o.jsx)(n.p,{children:"Basierend auf der Connector-Dateistruktur gehen wir jede Datei durch und finden heraus, wie sie zusammen als ein Gesamtsystem funktionieren."}),"\n",(0,o.jsx)(n.h3,{id:"packagejson",children:"package.json"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"package.json"})," enth\xe4lt Konfigurationen dieses Connector-Repos. Es wird mit einem gemeinsamen ",(0,o.jsx)(n.code,{children:"package.json"})," zusammengef\xfchrt, das allgemeine Abh\xe4ngigkeiten und Attribute enth\xe4lt."]}),"\n",(0,o.jsx)(n.h3,{id:"readmemd",children:"README.md"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"README.md"})," ist ein ausf\xfchrlicher Leitfaden zum Einrichten der Connector-Konfiguration."]}),"\n",(0,o.jsx)(n.h3,{id:"logosvg",children:"logo.svg"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"logo.svg"})," ist eine Datei, die das Logo des Connectors im Vektorbildformat speichert."]}),"\n",(0,o.jsx)(n.h3,{id:"logo-darksvg",children:"logo-dark.svg"}),"\n",(0,o.jsxs)(n.p,{children:["Die Datei ",(0,o.jsx)(n.code,{children:"logo-dark.svg"})," enth\xe4lt die Vektorgrafik des Logos des Connectors im Dunkelmodus."]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["Siehe ",(0,o.jsx)(n.a,{href:"/connectors/connector-data-structure/#logo",children:"Connector-Logo"}),", um mehr \xfcber die Beziehung zwischen ",(0,o.jsx)(n.code,{children:"logo.svg"})," und ",(0,o.jsx)(n.code,{children:"logo-dark.svg"})," zu erfahren."]})}),"\n",(0,o.jsx)(n.h3,{id:"indexts",children:"index.ts"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"index.ts"})," ist die Datei f\xfcr die Implementierung der Connector-Klasse."]}),"\n",(0,o.jsx)(n.h3,{id:"indextestts",children:"index.test.ts"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"index.test.ts"})," ist eine Datei, die entsprechende Unit-Tests (UTs) f\xfcr Implementierungen in ",(0,o.jsx)(n.code,{children:"index.ts"})," enth\xe4lt."]}),"\n",(0,o.jsx)(n.h3,{id:"typests",children:"types.ts"}),"\n",(0,o.jsxs)(n.p,{children:["In ",(0,o.jsx)(n.code,{children:"types.ts"})," solltest du die Typen der Variablen definieren."]}),"\n",(0,o.jsx)(n.h3,{id:"constantts",children:"constant.ts"}),"\n",(0,o.jsxs)(n.p,{children:["In ",(0,o.jsx)(n.code,{children:"constant.ts"})," solltest du Konstanten im Zusammenhang mit dem Connector ablegen, einschlie\xdflich Endpunkten, Connector-Metadaten usw."]}),"\n",(0,o.jsx)(n.h3,{id:"mockts",children:"mock.ts"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"mock.ts"})," ist die Datei, in der du m\xf6glicherweise simulierte Werte f\xfcr Testzwecke ablegst."]}),"\n",(0,o.jsx)(n.h3,{id:"utilsts",children:"utils.ts"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"utils.ts"})," ist die Datei, in der Entwickler Hilfsfunktionen ablegen, und ",(0,o.jsx)(n.code,{children:"utils.test.ts"})," sollte die dazugeh\xf6rigen UTs enthalten."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},79621:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var s=t(58101);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);